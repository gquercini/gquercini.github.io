<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gianluca Quercini</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Gianluca Quercini</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 10 Feb 2020 15:24:48 +0100</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=true) shape:circle]</url>
      <title>Gianluca Quercini</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Tutorials</title>
      <link>/courses/cloud-computing/cc-tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/cc-tutorials/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;p&gt;The following tutorials are proposed in this course:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;a href=&#34;/courses/cloud-computing/tutorial-docker&#34;&gt;Getting started with Docker&lt;/a&gt;.
In this tutorial, you’ll use the basic tools to play with Docker containers and images.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;more information to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data for You</title>
      <link>/project/data-for-you/</link>
      <pubDate>Mon, 10 Feb 2020 15:24:48 +0100</pubDate>
      <guid>/project/data-for-you/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MOMENT: Temporal Meta-Fact Generation and Propagation in Knowledge Graphs</title>
      <link>/publication/sais-2020/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/publication/sais-2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Determining the interests of social media users: two approaches</title>
      <link>/publication/seghouani-2019/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>/publication/seghouani-2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Profile Reconciliation Through Dynamic Activities Across Social Networks</title>
      <link>/publication/isaj-2019/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>/publication/isaj-2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>/privacy/</guid>
      <description>&lt;p&gt;Add your privacy policy here and set &lt;code&gt;draft: false&lt;/code&gt; to publish it. Otherwise, delete this file if you don&amp;rsquo;t need it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terms</title>
      <link>/terms/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>/terms/</guid>
      <description>&lt;p&gt;Add your terms here and set &lt;code&gt;draft: false&lt;/code&gt; to publish it. Otherwise, delete this file if you don&amp;rsquo;t need it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A frequent named entities-based approach for interpreting reputation in Twitter</title>
      <link>/publication/seghouani-2018/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/publication/seghouani-2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Élimination des liens inter-langues erronés dans Wikipédia</title>
      <link>/publication/seghouani-2018-a/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/publication/seghouani-2018-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Eliminating Incorrect Cross-Language Links in Wikipedia</title>
      <link>/publication/bennacer-2017-a/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/publication/bennacer-2017-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Frisk: A multilingual approach to find twitteR InterestS via wiKipedia</title>
      <link>/publication/jipmo-2017/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/publication/jipmo-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Interpreting reputation through frequent named entities in twitter</title>
      <link>/publication/bennacer-2017/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/publication/bennacer-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Liaison: reconciliation of individuals profiles across social networks</title>
      <link>/publication/quercini-2017/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Wikipedia-based extraction of key information from resumes</title>
      <link>/publication/ghufran-2017/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/publication/ghufran-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Catégorisation et Désambiguı̈sation des Intérêts des Individus dans le Web Social.</title>
      <link>/publication/jipmo-2016/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>/publication/jipmo-2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A multilingual approach to discover cross-language links in Wikipedia</title>
      <link>/publication/bennacer-2015/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>/publication/bennacer-2015/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Toponym disambiguation in online social network profiles</title>
      <link>/publication/ghufran-2015/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>/publication/ghufran-2015/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Matching user profiles across social networks</title>
      <link>/publication/bennacer-2014/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>/publication/bennacer-2014/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Réconciliation des profils dans les réseaux sociaux.</title>
      <link>/publication/bennacer-2014-a/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>/publication/bennacer-2014-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Uncovering the spatial relatedness in Wikipedia</title>
      <link>/publication/quercini-2014/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2014/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Entity discovery and annotation in tables</title>
      <link>/publication/quercini-2013/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2013/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Des données tabulaires à RDF: l’extraction de données de Google Fusion Tables</title>
      <link>/publication/quercini-2012-a/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2012-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Developing Attention-Aware and Context-Aware User Interfaces on Handheld Devices</title>
      <link>/publication/ancona-2012/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Discovering Cross-language Links in Wikipedia through Semantic Relatedness.</title>
      <link>/publication/penta-2012/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/penta-2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Facetted Browsing on Extracted Fusion Tables Data for Digital Cities.</title>
      <link>/publication/quercini-2012/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Facetted search on extracted fusion tables data for digital cities</title>
      <link>/publication/setz-2012/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/setz-2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Agents and Ontologies for Understanding and Preserving the Rock Art of Mount Bego.</title>
      <link>/publication/papaleo-2011/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      <guid>/publication/papaleo-2011/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Confluent drawing algorithms using rectangular dualization</title>
      <link>/publication/quercini-2010/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2010/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Determining the spatial reader scopes of news sources using local lexicons</title>
      <link>/publication/quercini-2010-a/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2010-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Virtual institutions for preserving and simulating the culture of Mount Bego&#39;s ancient people</title>
      <link>/publication/ancona-2010/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2010/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Integrating agents and virtual institutions for sharing cultural heritage on the Web</title>
      <link>/publication/bogdanovych-2009/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      <guid>/publication/bogdanovych-2009/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Text Entry in PDAs with WtX</title>
      <link>/publication/ancona-2009/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2009/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Wireless networks in archaeology and cultural heritage</title>
      <link>/publication/ancona-2008/</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2008/</guid>
      <description></description>
    </item>
    
    <item>
      <title>An Improved Text Entry Tool for PDAs</title>
      <link>/publication/ancona-2007-a/</link>
      <pubDate>Mon, 01 Jan 2007 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2007-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Rectangular Dualization of Biconnected Planar Graphs in Linear Time and Related Applications</title>
      <link>/publication/ancona-2007-b/</link>
      <pubDate>Mon, 01 Jan 2007 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2007-b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Rectangular Dualization of Biconnected Planar Graphs in Linear Time and Related Applications</title>
      <link>/publication/ancona-2007/</link>
      <pubDate>Mon, 01 Jan 2007 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2007/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mobile vision and cultural heritage: the agamemnon project</title>
      <link>/publication/ancona-2006-a/</link>
      <pubDate>Sun, 01 Jan 2006 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2006-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Visualizing and managing network topologies via rectangular dualization</title>
      <link>/publication/ancona-2006/</link>
      <pubDate>Sun, 01 Jan 2006 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2006/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Comfortable textual data entry for PocketPC: the WTX system</title>
      <link>/publication/ancona-2005/</link>
      <pubDate>Sat, 01 Jan 2005 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2005/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Grading</title>
      <link>/courses/cloud-computing/exam-presentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/exam-presentation/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;p&gt;The evaluation will be based on the grades of some
lab assignments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lab assignments</title>
      <link>/courses/cloud-computing/cc-labs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/cc-labs/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;p&gt;under construction&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lectures</title>
      <link>/courses/cloud-computing/lectures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/lectures/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;p&gt;Under construction&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>References</title>
      <link>/courses/cloud-computing/cc-references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/cc-references/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;class-material&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Class material&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lecture slides, available &lt;a href=&#34;/courses/cloud-computing/lectures&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An &lt;a href=&#34;/courses/cloud-computing/docker-primer&#34;&gt;introduction to Docker&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A &lt;a href=&#34;/courses/cloud-computing/docker-cheat-sheet&#34;&gt;Docker cheat sheet&lt;/a&gt;, with a summary of
the most important Docker commands.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An &lt;a href=&#34;/courses/cloud-computing/linux-introduction&#34;&gt;introduction to Linux&lt;/a&gt;, useful to
understand how Docker works and how to interact with Docker.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;books&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Books&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Schenker, Gabriel. Learn Docker - &lt;em&gt;Fundamentals of Docker 18.x.&lt;/em&gt; Packt Publishing,. Print.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Surianarayanan, C., &amp;amp; Chelliah, P. R. (2019). &lt;em&gt;Essentials of Cloud Computing: A Holistic Perspective.&lt;/em&gt; Springer Nature.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Docker Cheat Sheet</title>
      <link>/courses/cloud-computing/docker-cheat-sheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/docker-cheat-sheet/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-run-containers&#34;&gt;Run containers&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Docker command:&lt;/strong&gt; &lt;code&gt;docker run [options] image-name [command] [arg]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Running a container from the image &lt;em&gt;alpine&lt;/em&gt;.&lt;/p&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;docker run image-name&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;docker run image-name command&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;docker run image-name command arg&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker run alpine&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker run alpine ls&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker run alpine ping 192.168.3.1&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Common options:&lt;/strong&gt;&lt;/p&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Remove the container when it exits&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Give the container a name&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Allocate a terminal for the container&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker run --rm alpine&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker run --name toto alpine&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker run -it alpine&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Mount &lt;em&gt;data-volume&lt;/em&gt; at &lt;em&gt;/data&lt;/em&gt;&lt;/strong&gt;**
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Container port –&amp;gt; random host port&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Host port 8080 –&amp;gt; container port 80&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker run -v data-volume:/data alpine&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker run --P alpine&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker run -p 8080:80 alpine&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Attach container to network&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker run --network mynet alpine&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-manage-containers&#34;&gt;Manage containers&lt;/h1&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;List all containers&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;List running containers&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Stop a container&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker container ls -a&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker container ls&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker stop my-container&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Remove a container&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove all stopped containers&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Start a container&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker container rm  my-container&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker container prune&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker start my-container&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Start a container (I/O)&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Inspect changes in a container&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Create image from container&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker start -ai my-container&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker  diff my-container&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker commit my-container new-image&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-build-images&#34;&gt;Build images&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Docker command:&lt;/strong&gt; &lt;code&gt;docker build [OPTIONS] PATH | URL&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; Building an image from a Dockerfile in the current directory:
&lt;code&gt;docker build .&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The command assumes that a file named &lt;em&gt;Dockerfile&lt;/em&gt; is in the current directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Common options:&lt;/strong&gt;&lt;/p&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Tag the image&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Name of the Dockerfile&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker build -t my-image:latest .&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker build -f my-dockerfile .&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-manage-image&#34;&gt;Manage images&lt;/h1&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;List all images&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;List images (no intermediate)&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove an image&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker image ls -a&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker image ls&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker image rm my-image&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Remove dangling images&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove unused images&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Show the history of an image&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker image prune&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker image prune -a&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker history my-image&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-dockerfile&#34;&gt;Dockerfile&lt;/h1&gt;
&lt;p&gt;In a &lt;strong&gt;Dockerfile&lt;/strong&gt; the following main keywords
are used:&lt;/p&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;FROM base-image&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;FROM scratch&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;RUN cmd&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
Specifies the base image
&lt;/td&gt;
&lt;td&gt;
No base image used
&lt;/td&gt;
&lt;td&gt;
Runs a command
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;COPY src dst&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;ADD src dst&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;WORKDIR dir&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
Copy source file to destination
&lt;/td&gt;
&lt;td&gt;
Copy source file (including URL and TAR) to destination
&lt;/td&gt;
&lt;td&gt;
Sets the working directory
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;ENTRYPOINT cmd&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;CMD params&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;EXPOSE port&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
Command to execute when container is run
&lt;/td&gt;
&lt;td&gt;
Parameters of the entrypoint command
&lt;/td&gt;
&lt;td&gt;
Exposes a container port
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-volumes&#34;&gt;Volumes&lt;/h1&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Create a volume&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove a volume&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove unused volumes&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker volume create my-volume&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker volume rm my-volume&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker volume prune&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;List volumes&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker volume ls&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-networks&#34;&gt;Networks&lt;/h1&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Create a network&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove a network&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove unused networks&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker volume create my-network&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker network rm my-network&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker network prune&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;List all the networks&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Inspect a network&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Connect a container to a network&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker network ls&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker network inspect my-network&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker network connect my-network my-container&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Docker primer</title>
      <link>/courses/cloud-computing/docker-primer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/docker-primer/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This page is still under construction&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Introduction&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; is defined as
&lt;a href=&#34;https://docs.docker.com/engine/docker-overview/&#34; target=&#34;_blank&#34;&gt;“an open platform for developing,
shipping and running applications”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to understand the importance of Docker in software development, it is useful
to make an analogy to the transportation industry &lt;span class=&#34;citation&#34;&gt;(Schenker 2018)&lt;/span&gt;.
Before the advent of &lt;em&gt;containers&lt;/em&gt;, goods were packaged in
boxes of different types and dimensions.
As a result, loading and unloading the merchandise from
ships or trucks was a long and tedious
task, because each package needed to be handled in a different way.
Containers, on the other hand, have standard dimensions and thus the process of loading/unloading them
could be standardized as well.&lt;/p&gt;
&lt;p&gt;Similarly, before the advent of Docker, the development and deployment of a new software application in
an enterprise was extremely complicated.
Different teams of &lt;em&gt;developers&lt;/em&gt; would produce different types of applications
that the &lt;em&gt;operations engineers&lt;/em&gt; would need to install on production servers.
Commonly, these applications rely on external libraries that need to be installed
on the production server; sometimes, two applications may depend on different versions of the same library
that might not be completely compatible between each other.&lt;/p&gt;
&lt;p&gt;Docker addresses this issue by providing the ability of packaging software applications
with all their dependencies into isolated environment called, not suprisingly, &lt;strong&gt;containers&lt;/strong&gt;.
The operations engineers don’t need to know the dependencies of each application, they just see
the container as a black box that can be handled in a standardized way, no matter the application it contains.&lt;/p&gt;
&lt;div class=&#34;infobox curiosity&#34;&gt;
&lt;p&gt;&lt;strong&gt;Did you know?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The word &lt;em&gt;docker&lt;/em&gt; refers to a worker whose task is loading and unloading goods from a mean of
transportation, such as a truck, train, ship or airplanes.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Docker is based on a &lt;strong&gt;client-server architecture&lt;/strong&gt; (Figure &lt;a href=&#34;#fig:docker-architecture&#34;&gt;1.1&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:docker-architecture&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/docker-architecture.svg&#34; alt=&#34;[Docker architecture](https://docs.docker.com/engine/docker-overview/)&#34; width=&#34;100%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1.1: &lt;a href=&#34;https://docs.docker.com/engine/docker-overview/&#34;&gt;Docker architecture&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;client&lt;/em&gt; (in our case, a command-line terminal) talks to the &lt;em&gt;server&lt;/em&gt; (the Docker daemon) by sending some commands
that the server can understand.
The role of the Docker daemon is to manage all the Docker objects necessary to run containerized applications.
Two objects are particularly important to this purpose: images and containers.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;image&lt;/strong&gt; is essentially an archive that contains a filesystem with the necessary files and commands to build and
run an application.
An image can be seen as a template with the necessary instructions for creating a Docker container.&lt;/p&gt;
&lt;p&gt;The Docker daemon looks for images in a special repository called a &lt;strong&gt;registry&lt;/strong&gt;;
as of the time writing, some public registries exist, such as &lt;a href=&#34;https://hub.docker.com/_/registry&#34;&gt;Docker Hub&lt;/a&gt;,
&lt;a href=&#34;https://cloud.google.com/container-registry&#34;&gt;Google&lt;/a&gt;, &lt;a href=&#34;https://aws.amazon.com/ecr/&#34;&gt;Amazon AWS&lt;/a&gt; and
&lt;a href=&#34;https://azure.microsoft.com/en-us/services/container-registry/&#34;&gt;Microsoft Azure&lt;/a&gt;.
If not instructed otherwise, the Docker daemon is configured to look in the Docker Hub registry.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;container&lt;/strong&gt; is a runnable instance of an image.
In order to run a container:&lt;/p&gt;
&lt;div id=&#34;first-example-hello-world&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; First example: Hello World&lt;/h2&gt;
&lt;p&gt;In the Docker Hub registry you can find an &lt;a href=&#34;https://hub.docker.com/_/hello-world&#34;&gt;image called &lt;em&gt;hello-world&lt;/em&gt;&lt;/a&gt;
that contains a simple application written in C that prints a “hello world” message on screen.&lt;/p&gt;
&lt;p&gt;Open the terminal and type the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --name hello-world hello-world&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The image &lt;em&gt;hello-world&lt;/em&gt; includes a binary file that has been compiled on Linux.
Yet, you can execute it even if your computer runs another operating system, such as Windows and
MacOS.
This is possible because Docker runs the containers in a Linux Virtual Machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;What is an image?&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;You can think of an &lt;strong&gt;image&lt;/strong&gt; as a set of instructions that need
to be executed to create and run a container;
each instruction corresponds to a &lt;strong&gt;layer&lt;/strong&gt; in the image.
A &lt;strong&gt;layer&lt;/strong&gt; is a filesystem that contains files and folders.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/cc/docker-tutorial/image-layers.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The above figure shows the layers of the image &lt;em&gt;hello-world&lt;/em&gt; that we used
before.
For the moment, don’t worry about the syntax of the instructions that you see in the figure.
We’ll study them in a minute.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;base layer&lt;/strong&gt; corresponds to the following instruction:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;COPY hello /&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which copies a file named &lt;em&gt;hello&lt;/em&gt; from the machine where the image
has been created to the root folder (represented by /) in the image.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;layer 2&lt;/strong&gt; corresponds to the following instruction:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CMD [&amp;quot;/hello&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;that will be executed when a container is run from this image.
This instruction will execute the binary file &lt;em&gt;hello&lt;/em&gt;.
This layer doesn’t contain any file and folder, but just
a command.&lt;/p&gt;
&lt;p&gt;All layers in an image are &lt;strong&gt;immutable&lt;/strong&gt;, which means that
they cannot be modified.
By virtue of their immutability, layers can be stored as separate
entities (not belonging to any specific images) and can therefore be
shared among different images.&lt;/p&gt;
&lt;div id=&#34;so-what-happens-when-i-run-a-container&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.0.1&lt;/span&gt; So, what happens when I run a container?&lt;/h4&gt;
&lt;p&gt;When we invoke the run command on an image, the Docker engine
creates a new container from that image and adds a new layer
(also known as the &lt;em&gt;container layer&lt;/em&gt;) that is writable;
this means that all the files created within the container
will be written to this new container layer.
When we executed the command &lt;code&gt;wget&lt;/code&gt; within the Ubuntu container,
we downloaded some pictures from a Web page, and those pictures
have been saved in the writable layer of the container.&lt;/p&gt;
&lt;p&gt;The image below shows that many containers can be run from&lt;br /&gt;
the same image;
the different containers can share the immutable layers
of the image (which saves a lot of disk space), and each container
will have its own writable container layer.&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;single-host-networking&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Single-host networking&lt;/h1&gt;
&lt;div id=&#34;cnm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Container network model&lt;/h2&gt;
&lt;p&gt;In order to let containers communicate and, therefore, co-operate,
Docker defines a simple networking model known as
the &lt;strong&gt;container network model&lt;/strong&gt; (CNM), illustrated
in the following figure.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:cnm&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/cnm.png&#34; alt=&#34;The container network model&#34; width=&#34;100%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2.1: The container network model
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;/img/cc/docker-tutorial/cnm.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The figure shows three containers (from left to right, Athos, Porthos and Aramis);
the CNM consists of three elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sandbox.&lt;/strong&gt; It contains
the network configuration of the container, such as IP and MAC addresses, routing tables and
DNS records.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Endpoint.&lt;/strong&gt; Connection between the sandbox and a network.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network.&lt;/strong&gt; Object that provides the function to connect two or more endpoints.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The actual implementation of the network is called a &lt;strong&gt;driver&lt;/strong&gt;.
Docker provides some built-in drivers, such as &lt;em&gt;bridge&lt;/em&gt;, &lt;em&gt;host&lt;/em&gt;, &lt;em&gt;overlay&lt;/em&gt; and &lt;em&gt;null&lt;/em&gt;;
third-party drivers can be used by installing the corresponding plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1 unnumbered&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-Schenker2018&#34;&gt;
&lt;p&gt;Schenker, Gabriel. 2018. &lt;em&gt;Learn Docker - Fundamentals of Docker 18.x&lt;/em&gt;. 1st edition. Packt Publishing,&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Installing Docker</title>
      <link>/courses/cloud-computing/installing-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/installing-docker/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#windows&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Windows&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#docker-for-windows&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; Docker Desktop for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker-toolbox-windows&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; Docker Toolbox for Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#macos&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; MacOS&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#docker-desktop-for-mac.&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; Docker Desktop for Mac.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker-toolbox-mac&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; Docker Toolbox for Mac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker-on-linux&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#alternative-options&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Alternative options&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#docker-playground&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.1&lt;/span&gt; Docker playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker-in-a-linux-virtual-machine&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2&lt;/span&gt; Docker in a Linux virtual machine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#verify-installation&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; Verify your installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#interacting-with-docker&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;6&lt;/span&gt; Interacting with Docker&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#graphical-interface&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;6.1&lt;/span&gt; Graphical interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#troubleshooting&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;7&lt;/span&gt; Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;p&gt;This document contains information on how to install Docker
on your computer.&lt;/p&gt;
&lt;p&gt;Although you can access an online Docker environment without installing anything on
your computer (see Section &lt;a href=&#34;#docker-playground&#34;&gt;4.1&lt;/a&gt;), you should consider this option
only if you really cannot install Docker.&lt;/p&gt;
&lt;p&gt;The installation procedure depends on the operating system
that your computer runs.&lt;/p&gt;
&lt;div id=&#34;windows&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Windows&lt;/h1&gt;
&lt;p&gt;The installation procedure depends on the Windows version running on your computer.&lt;/p&gt;
&lt;div id=&#34;docker-for-windows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; Docker Desktop for Windows&lt;/h2&gt;
&lt;p&gt;If your computer runs &lt;strong&gt;Windows 10 64 bits (Pro, Enterprise, or Education, build 15063 or later)&lt;/strong&gt;,
you can install &lt;strong&gt;Docker Desktop for Windows (recommended)&lt;/strong&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Show me more&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hardware prerequisites&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;64 bit processor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4GB system RAM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BIOS-level hardware virtualization support must be enabled in the BIOS settings.
For more information, see &lt;a href=&#34;https://docs.docker.com/docker-for-windows/troubleshoot/#virtualization-must-be-enabled&#34; target=&#34;_blank&#34;&gt;Virtualization&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;VirtualBox users&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Docker for Windows uses &lt;strong&gt;Hyper-V&lt;/strong&gt; as a virtual machine to run containers.
Unfortunately, Hyper-V and VirtualBox are not compatible;
when Hyper-V is enabled, &lt;strong&gt;VirtualBox will stop working&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;However:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The existing VirtualBox images &lt;strong&gt;will not be removed&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you want to use VirtualBox, &lt;a href=&#34;https://ugetfix.com/ask/how-to-disable-hyper-v-in-windows-10/&#34; target=&#34;_blank&#34;&gt;you can turn Hyper-V off&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cannot/don’t want to install Docker Desktop for for Windows&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If your computer doesn’t meet the hardware requirements, or you
don’t want to install Docker Desktop for Windows because you don’t want to
mess up your VirtualBox installation (although you shouldn’t really worry about the latter),
you have two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install Docker Toolbox for Windows (Section &lt;a href=&#34;#docker-toolbox-windows&#34;&gt;1.2&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;See the alternative options (Section &lt;a href=&#34;#alternative-options&#34;&gt;4&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Installation procedure&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Download &lt;a href=&#34;https://hub.docker.com/editions/community/docker-ce-desktop-windows/&#34; target=&#34;_blank&#34;&gt;Docker Desktop for Windows.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow the &lt;a href=&#34;https://docs.docker.com/docker-for-windows/install/#install-docker-desktop-on-windows&#34; target=&#34;_blank&#34;&gt;installation instructions.&lt;/a&gt;
You might need to restart the system to enable Hyper-V.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify your installation (see Section &lt;a href=&#34;#verify-installation&#34;&gt;5&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-toolbox-windows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; Docker Toolbox for Windows&lt;/h2&gt;
&lt;p&gt;If your computer runs &lt;strong&gt;Windows 7 or higher&lt;/strong&gt;, and
doesn’t meet the hardware requirements for Docker for Windows,
you can install &lt;strong&gt;Docker Toolbox for Windows&lt;/strong&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Show me more&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;Please refer to &lt;a href=&#34;https://docs.docker.com/toolbox/toolbox_install_windows/&#34; target=&#34;_blank&#34;&gt;these installation instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cannot install Docker Toolbox&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See the alternative options (Section &lt;a href=&#34;#alternative-options&#34;&gt;4&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;macos&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; MacOS&lt;/h1&gt;
&lt;p&gt;The installation procedure depends on the version of MacOS running on your computer.&lt;/p&gt;
&lt;div id=&#34;docker-desktop-for-mac.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Docker Desktop for Mac.&lt;/h2&gt;
&lt;p&gt;If your computer runs &lt;strong&gt;MacOS 10.13 or higher&lt;/strong&gt;, you can install
&lt;strong&gt;Docker Desktop for Mac (recommended)&lt;/strong&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Show me more&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hardware requirements&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your computer hardware must be a 2010 or a newer model.
Verify that your computer is compatible with
Docker Desktop for Mac:
&lt;ul&gt;
&lt;li&gt;Open a terminal.&lt;/li&gt;
&lt;li&gt;Run the following command: &lt;code&gt;sysctl kern.hv_support&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the output of the command is &lt;code&gt;kern.hv_support: 1&lt;/code&gt; your computer is compatible.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;At least 4GB of RAM.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;VirtualBox users&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you have a version of VirtualBox older than 4.3.30, you should consider upgrading it, as
it would not be compatible with Docker Desktop.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cannot install Docker Desktop for Mac&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If your computer doesn’t meet the hardware requirements,
you have two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install Docker Toolbox for Mac (Section &lt;a href=&#34;#docker-toolbox-mac&#34;&gt;2.2&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;See the alternative options (Section &lt;a href=&#34;#alternative-options&#34;&gt;4&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Installation instructions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Download &lt;a href=&#34;https://hub.docker.com/editions/community/docker-ce-desktop-mac/&#34; target=&#34;_blank&#34;&gt;Docker Desktop for Mac.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow the &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/#install-and-run-docker-desktop-on-mac&#34; target=&#34;_blank&#34;&gt;installation instructions.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify your installation (see Section &lt;a href=&#34;#verify-installation&#34;&gt;5&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-toolbox-mac&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Docker Toolbox for Mac&lt;/h2&gt;
&lt;p&gt;If your computer runs &lt;strong&gt;MacOs 10.8 or higher&lt;/strong&gt;, and
doesn’t meet the hardware requirements for Docker Desktop for Mac,
you can install &lt;strong&gt;Docker Toolbox for Mac&lt;/strong&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Show me more&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;Please refer to &lt;a href=&#34;https://docs.docker.com/toolbox/toolbox_install_mac/&#34; target=&#34;_blank&#34;&gt;these installation instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cannot install Docker Toolbox&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See the alternative options (Section &lt;a href=&#34;#alternative-options&#34;&gt;4&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-on-linux&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Linux&lt;/h1&gt;
&lt;p&gt;You can install Docker on the following Linux distributions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CentOS (&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/centos/&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debian (&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/debian/&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fedora (&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/fedora/&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ubuntu (&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make sure to read the &lt;a href=&#34;https://docs.docker.com/engine/install/linux-postinstall/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;post-installation steps for Linux&lt;/strong&gt;&lt;/a&gt;
and to take the necessary steps to be able to run Docker as a non-root user.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;alternative-options&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Alternative options&lt;/h1&gt;
&lt;p&gt;If you’re unable to install Docker on your computer,
you have two options left:
using the Docker playground or installing Docker in a Linux virtual machine.&lt;/p&gt;
&lt;div id=&#34;docker-playground&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1&lt;/span&gt; Docker playground&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://labs.play-with-docker.com&#34; target=&#34;_blank&#34;&gt;Docker playground&lt;/a&gt; is
an online Docker environment that you can play with for free.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;advantage&lt;/strong&gt; is that you don’t have anything to install on your computer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;disadvantage&lt;/strong&gt; is that you might be unable to open a session
depending on the number of active sessions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to connect to the playground,
you need to &lt;a href=&#34;https://hub.docker.com/signup?next=%2F%3Fref%3Dlogin&#34; target=&#34;_blank&#34;&gt;create an account on DockerHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-in-a-linux-virtual-machine&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2&lt;/span&gt; Docker in a Linux virtual machine&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install VirtualBox on your computer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download the ISO image of &lt;a href=&#34;https://ubuntu.com/download/desktop&#34; target=&#34;_blank&#34;&gt;Ubuntu Desktop&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open VirtualBox and select &lt;em&gt;New&lt;/em&gt; to install a new operating system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;Linux&lt;/strong&gt; as the operating system &lt;strong&gt;type&lt;/strong&gt; and &lt;strong&gt;Ubuntu (64-bit)&lt;/strong&gt; as the version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set the &lt;strong&gt;memory size&lt;/strong&gt; (1024 MB or higher).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a &lt;strong&gt;virtual hard disk&lt;/strong&gt; with the recommended size.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select &lt;strong&gt;VDI (VirtualBox Disk Image)&lt;/strong&gt; as the hard disk type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the option &lt;strong&gt;Fixed size&lt;/strong&gt; and create the new virtual machine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Double-click on the new virtual machine and, when prompted,
select the ISO image of Ubuntu.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow the instructions to install Ubuntu.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When Ubuntu is finally installed, follow the instructions in Section &lt;a href=&#34;#docker-on-linux&#34;&gt;3&lt;/a&gt; to
install Docker in Ubuntu.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;verify-installation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; Verify your installation&lt;/h1&gt;
&lt;p&gt;Open a terminal and type the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run hello-world&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If everything is OK, you should see the output in the following figure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/courses/cloud-computing/hello-world-output.png&#34; width=&#34;80%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;interacting-with-docker&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;6&lt;/span&gt; Interacting with Docker&lt;/h1&gt;
&lt;p&gt;In this course, we’ll learn how to interact with the Docker engine
by using the &lt;strong&gt;command-line terminal&lt;/strong&gt;.
This option might seem a bit tedious
(nobody likes to remember textual commands), but it offers
a great flexibility.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is the option that we recommend&lt;/strong&gt; and for which we’ll provide
a full support throughout the course.&lt;/p&gt;
&lt;div id=&#34;graphical-interface&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;6.1&lt;/span&gt; Graphical interface&lt;/h2&gt;
&lt;p&gt;If you really want to use a graphical interface, you might want to look at
&lt;a href=&#34;https://www.portainer.io&#34; target=&#34;_blank&#34;&gt;Portainer&lt;/a&gt;, which is
itself run as a Docker container.&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Linux or MacOS users&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;Open a terminal and copy and paste the following commands:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker volume create portainer_data&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Windows users&lt;/summary&gt;
Open a terminal and copy and paste the following commands:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker volume create portainer_data&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run -d -p 8000:8000 -p 9000:9000 --name portainer --restart always -v \\.\pipe\docker_engine:\\.\pipe\docker_engine -v portainer_data:C:\data portainer/portainer&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When the container is up and running,
the interface is available at the following URL:
&lt;a href=&#34;http://localhost:9000&#34; class=&#34;uri&#34; target=&#34;_blank&#34;&gt;http://localhost:9000&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose a password and create the user &lt;em&gt;admin&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select &lt;em&gt;Local&lt;/em&gt; to manage the Docker environment installed on your computer and
click on &lt;em&gt;Connect&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the endpoint &lt;em&gt;Local&lt;/em&gt; (figure below) to access the dashboard.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/courses/cloud-computing/portainer-local-endpoint.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The menu on the left of the dashboard allows you to manage
the different components of your Docker environment (e.g., containers, images, volumes and networks).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;A user guide of Portainer is very much out of the scope of this course.&lt;/strong&gt;
However, the interface is rather intuitive and you should easily find out
how to create, run, stop and remove containers, build images and
create volumes and networks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;troubleshooting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;7&lt;/span&gt; Troubleshooting&lt;/h1&gt;
&lt;p&gt;In this section we’ll document the installation issues
that you might experience.&lt;/p&gt;
&lt;p&gt;Don’t hesitate to &lt;a href=&#34;/index.html&#34; target=&#34;_blank&#34;&gt;contact us&lt;/a&gt;
to report your installation problems.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Linux</title>
      <link>/courses/cloud-computing/linux-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/linux-introduction/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This page is still under construction&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use of shell /bin/sh&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explanation of wget&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Notion of working directory, root directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Main linux commands cd/ls redirection, pipes…&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with Docker</title>
      <link>/courses/cloud-computing/tutorial-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/tutorial-docker/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this tutorial you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to run &lt;strong&gt;containers&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to define and build &lt;strong&gt;images&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to create and use &lt;strong&gt;volumes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to define and use &lt;strong&gt;networks&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Having installed Docker on your computer.
See the &lt;a href=&#34;/courses/cloud-computing/installing-docker&#34; target=&#34;_blank&#34;&gt;installation guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Being familiar with the notions of containers, images,
volumes and networks in Docker.
See the &lt;a href=&#34;/courses/cloud-computing/docker-primer&#34; target=&#34;_blank&#34;&gt;Docker primer&lt;/a&gt;
for an introduction.&lt;/li&gt;
&lt;li&gt;Being familiar with the &lt;a href=&#34;/courses/cloud-computing/linux-introduction&#34; target=&#34;_blank&#34;&gt;basic notions of Linux&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Terminology&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You’ll use the &lt;strong&gt;terminal&lt;/strong&gt; to run Docker commands.
Referring to the
&lt;a href=&#34;/courses/cloud-computing/docker-primer#fig:docker-architecture&#34; target=&#34;_blank&#34;&gt;Docker architecture&lt;/a&gt;,
the terminal is the &lt;strong&gt;client&lt;/strong&gt; that communicates with
the Docker daemon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker runs &lt;strong&gt;containers&lt;/strong&gt; on your computer.
We’ll refer to your computer as the &lt;strong&gt;host&lt;/strong&gt;,
the containers being the &lt;strong&gt;guests&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;containerized application&lt;/strong&gt;
is an application running in a container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;running&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Running containers&lt;/h1&gt;
&lt;p&gt;The command used to run a container
is &lt;code&gt;docker run&lt;/code&gt; followed by four parameters:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run [options] image-name [command] [arg]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The four parameters are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;options&lt;/em&gt;. List of options.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;image-name&lt;/em&gt;. The fully qualified name of the image used to run the container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;command&lt;/em&gt;. The command to be executed in the container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;arg&lt;/em&gt;. The arguments taken by the command executed in the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only the parameter &lt;em&gt;image-name&lt;/em&gt; is mandatory.
The fuly qualified name of an image is specified as a sequence of four fields,
formatted as follows:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;registry_url/user/name:tag&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;registry_url&lt;/em&gt; (optional). The URL of the registry that provides the image.
If its value is not specified, the image
will be looked up for in the
&lt;a href=&#34;https://hub.docker.com/_/registry&#34; target=&#34;_blank&#34;&gt;DockerHub registry&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;user&lt;/em&gt;. The identifier of the user or organization that created the image.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;name&lt;/em&gt; (mandatory). The name of the image.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tag&lt;/em&gt; (optional). It specifies the version of the image.
If its value is not specified,
the tag &lt;em&gt;latest&lt;/em&gt; is taken, pointing to the latest version of the image.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-1&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.1  &lt;/strong&gt;&lt;/span&gt;
For each of the following images,
specify the name of the registry, the user, the name and the tag.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;registry.redhat.io/rhel8/mysql-80&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;alpine:3.11&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;alpine&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-2&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.2  &lt;/strong&gt;&lt;/span&gt;What’s the difference between the following image names?&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;alpine:latest&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;registry.hub.docker.com/library/alpine&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;alpine&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We now learn how to use the command &lt;code&gt;docker run&lt;/code&gt; and some of
its options.
In the following exercises, we’ll run containers from the image named
&lt;em&gt;alpine&lt;/em&gt; that is
&lt;a href=&#34;https://hub.docker.com/_/alpine&#34; target=&#34;_blank&#34;&gt;available on the DockerHub registry&lt;/a&gt;.
This image provides a lightweight distribution
(i.e., it doesn’t contain many features) of Linux.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-3&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.3  &lt;/strong&gt;&lt;/span&gt;You want to run the container from the latest version of
the image &lt;em&gt;alpine&lt;/em&gt;.
Which command would you write in the terminal?
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-4&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.4  &lt;/strong&gt;&lt;/span&gt;Execute the command that you proposed in the previous exercise,
observe the output in the terminal and explain the actions
taken by Docker to run the container.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Okay but &lt;strong&gt;where’s the result of running the container?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First of all, let’s see if the container is still running in the first
place.
In order to list all containers still running on the host, type the
following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container ls &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your container shouldn’t appear in the output of the command.
This is because it’s not running.
In order to see all containers, including those that are not
running, type the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container ls -a&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-5&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.5  &lt;/strong&gt;&lt;/span&gt;What information is displayed for each container?
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-6&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.6  &lt;/strong&gt;&lt;/span&gt;By looking at the command executed within the container (&lt;code&gt;/bin/sh&lt;/code&gt;),
can you tell why the container stopped without giving any output?
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’re now going to do something useful with the image &lt;em&gt;alpine&lt;/em&gt;.
But first, we start with some good practices that you should
adopt while playing with images and containers.&lt;/p&gt;
&lt;div id=&#34;good-practices&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; Good practices&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Name your containers.&lt;/strong&gt; Although Docker assigns a default name to a new container, it’s usually a good practice to give a container a name of your
choice to make it easily distinguishable. You can do it by using the option
&lt;code&gt;--name&lt;/code&gt;. Try the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --name my-alpine alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As before, the container stops immediately.
If you list all your containers by typing again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker container ls -a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you should see a container named &lt;em&gt;my-alpine&lt;/em&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Remove a container when it stops.&lt;/strong&gt; Unless you want to reuse your container later, you can ask Docker to automatically remove it
when it stops by using the option &lt;code&gt;--rm&lt;/code&gt;.
This will prevent unused containers from taking up too much disk space.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Try the following:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm --name container-to-remove alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you list all the containers you should see that there is no container
named &lt;em&gt;container-to-remove&lt;/em&gt;.&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Remove unused containers.&lt;/strong&gt; Stopped containers that have been run without
using the option &lt;code&gt;--rm&lt;/code&gt; are still stored in the host.
If you want to remove a specific
container (e.g., &lt;em&gt;my-alpine&lt;/em&gt;), use the following command:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container rm my-alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to remove all stopped containers, use the
following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container prune&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Remove unused images.&lt;/strong&gt; Images can take up a lot of disk space.
As a result, you should remember to remove those that you don’t intend to use
any longer.
The commands to remove a specific image
and prune unused ones are &lt;code&gt;docker image rm&lt;/code&gt;
and &lt;code&gt;docker image prune -a&lt;/code&gt; respectively.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;execute-a-command-within-a-container&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; Execute a command within a container&lt;/h2&gt;
&lt;p&gt;Remember that the template of &lt;code&gt;docker run&lt;/code&gt; is the following:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run [options] image-name [command] [arg]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The optional parameter &lt;em&gt;command&lt;/em&gt; refers to a command
to be executed within the container, possibly with some arguments
(parameter &lt;em&gt;arg&lt;/em&gt;).
As we saw before, when we run a container from the image &lt;em&gt;alpine&lt;/em&gt;,
a Linux terminal
&lt;code&gt;/bin/sh&lt;/code&gt; is launched.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Linux terminal &lt;code&gt;/bin/sh&lt;/code&gt; is run within the
container.
Henceforth, we’ll use the following terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Host terminal.&lt;/strong&gt; The terminal that you use to
interact with the operating system of your computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Guest terminal.&lt;/strong&gt; The terminal that is run within
the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;By using the optional parameter &lt;em&gt;command&lt;/em&gt;, we can run
a command in the guest terminal.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:command-in-guest&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.7  &lt;/strong&gt;&lt;/span&gt;
Run a container from the image &lt;em&gt;alpine&lt;/em&gt; and execute the
Linux command &lt;code&gt;ls&lt;/code&gt; that lists the content of the current directory.&lt;/p&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Where are the listed files stored?
In the host or in the container?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Exercise &lt;a href=&#34;#exr:command-in-guest&#34;&gt;1.7&lt;/a&gt; the command
&lt;code&gt;ls&lt;/code&gt; is executed in the guest terminal, but its
output is redirected to the host terminal.&lt;/p&gt;
&lt;p&gt;In other words, when we run the container, we
don’t interact directly with the guest terminal;
we just send a command and the output is redirected
to the host terminal.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now let’s see how to execute a command in the guest terminal
that also requires an argument.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-7&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.8  &lt;/strong&gt;&lt;/span&gt;By using the Linux utility &lt;code&gt;ping&lt;/code&gt;, check
whether the Web site www.centralesupelec.fr is reachable.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;interacting-with-a-container&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; Interacting with a container&lt;/h2&gt;
&lt;p&gt;An application running in a container might need to interact
with the user.
For instance, the Linux
command &lt;code&gt;rev&lt;/code&gt; reverses whatever
the user types on the keyboard.
In order to interact with a container, you should use the option
&lt;code&gt;-it&lt;/code&gt; of &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-8&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.9  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;em&gt;alpine&lt;/em&gt; to execute the
Linux command &lt;code&gt;rev&lt;/code&gt; and interact with it.
You can stop interacting with &lt;code&gt;rev&lt;/code&gt; by typing Ctrl+C at any time.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run  --name my-alpine -it alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; we didn’t use the option &lt;code&gt;--rm&lt;/code&gt; (the container will not be removed
when we stop it, we’re going to use it again).
Moreover, we didn’t specify any command to run in the guest terminal.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-9&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.10  &lt;/strong&gt;&lt;/span&gt;What do you obtain?
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;starting-and-stopping-containers.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4&lt;/span&gt; Starting and stopping containers.&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt; is a shorthand for two Docker commands, namely
&lt;code&gt;docker create&lt;/code&gt;, that creates a container from an image,
and &lt;code&gt;docker start&lt;/code&gt;, that starts the container after its creation.&lt;/p&gt;
&lt;p&gt;Suppose now that you want to download a Web page
by using Linux Alpine.
You can use the Linux command &lt;code&gt;wget&lt;/code&gt; followed by the URL of the page
that you want to download.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-10&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.11  &lt;/strong&gt;&lt;/span&gt;By using the guest terminal
in the container &lt;em&gt;my-alpine&lt;/em&gt;,
download
&lt;a href=&#34;https://www.centralesupelec.fr/fr/presentation&#34; target=&#34;_blank&#34;&gt;this Web page&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Where will the Web page be saved? The host computer or the container?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In &lt;em&gt;my-alpine&lt;/em&gt; guest terminal type &lt;code&gt;exit&lt;/code&gt;.
This closes the guest terminal and, as a result, stops the
container.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stopping the container will not erase any of the files
stored in the container. Removing the container will.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you want to start the container &lt;em&gt;my-alpine&lt;/em&gt; again, you can
use the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container start -ai my-alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will open the guest terminal of the container again;
type &lt;code&gt;ls&lt;/code&gt; to verify that
the Web page that you downloaded before is still there.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;simple-use-case&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.5&lt;/span&gt; A simple use case&lt;/h2&gt;
&lt;p&gt;Suppose that you need to download all the figures of
&lt;a href=&#34;https://www.centralesupelec.fr/fr/presentation&#34; target=&#34;_blank&#34;&gt;this Web page&lt;/a&gt;.
The Linux utility &lt;code&gt;wget&lt;/code&gt; comes in handy.
However, you don’t have Linux and you’d like to
avoid the hassle of installing it on your computer, or in a virtual machine,
just for this task.&lt;/p&gt;
&lt;p&gt;A great alternative is to run Linux in a Docker container.
Unfortunately, the Alpine distribution that we’ve been playing
with doesn’t provide
an implementation of &lt;code&gt;wget&lt;/code&gt; with all the options that we need.&lt;/p&gt;
&lt;p&gt;We turn to another Linux distribution, &lt;strong&gt;Ubuntu&lt;/strong&gt;,
for which DockerHub has
&lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34; target=&#34;_blank&#34;&gt;several images&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-11&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.12  &lt;/strong&gt;&lt;/span&gt;Run a container with Ubuntu 19.10 and open a guest terminal.
Call the container &lt;em&gt;dl-figures&lt;/em&gt;, and avoid the option
&lt;code&gt;--rm&lt;/code&gt;, we’ll use this container later.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;From now on, we’ll be interacting with the guest Ubuntu terminal.
If you type the command &lt;code&gt;wget&lt;/code&gt;,
you’ll get an error (&lt;code&gt;bash: wget: command not found&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The image &lt;em&gt;Ubuntu&lt;/em&gt; doesn’t include all the commands that you’d find
in a full-blown Ubuntu distribution;
the reason is to keep the size of the image small,
a necessary constraint given that
images are transferred over the Internet.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Luckily, there’s a way to install &lt;code&gt;wget&lt;/code&gt; in our Ubuntu distribution.
Ubuntu provides a powerful command-line package manager called
&lt;strong&gt;Advanced Package Tool&lt;/strong&gt; (APT).
First, you need to run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;apt-get update&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which fetches the available packages from a list of sources
available in file &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, you can install &lt;code&gt;wget&lt;/code&gt; by running the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;apt-get install -y wget&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to obtain all the figures from a
Web page, type the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;wget -nd -H -p -P /my-figures -A jpg,jpeg,png,gif -e robots=off -w 0.5 https://www.centralesupelec.fr/fr/presentation&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see in the current directory a new folder
named &lt;em&gt;my-figures&lt;/em&gt; containing the downloaded figures;
verify it by typing &lt;code&gt;ls my-figures&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before terminating, don’t forget to read your fortune cookie.
In the shell, run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;apt-get install -y fortune&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;/usr/games/fortune -s&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you’re done, you can simply type the command &lt;code&gt;exit&lt;/code&gt; to quit
the guest terminal and stop the container.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You might wonder how you can transfer the downloaded figures
from the container to the host computer.
We’ll see that later
when we introduce the notion of &lt;strong&gt;volumes&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-images&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Creating Images&lt;/h1&gt;
&lt;p&gt;A Docker image can be thought of as a template to create and run a container.
An image is a file that contains a &lt;strong&gt;layered filesystem&lt;/strong&gt; with each layer being &lt;strong&gt;immutable&lt;/strong&gt;;
this means that the files that belong to a layer cannot be
modified or deleted, nor can files be added to a layer.&lt;/p&gt;
&lt;p&gt;When a container is created from an image, it
will be composed of all the image read-only layers and, on top of
them, a writable layer (termed the &lt;strong&gt;container layer&lt;/strong&gt;),
where all the new files created in the container will be written.
For example, the figures that we downloaded in the container
&lt;em&gt;dl-figures&lt;/em&gt; were stored in the writable layer of that container.&lt;/p&gt;
&lt;div id=&#34;interactive-image-creation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Interactive image creation&lt;/h2&gt;
&lt;p&gt;When we run the container &lt;em&gt;dl-figures&lt;/em&gt; in Section &lt;a href=&#34;#simple-use-case&#34;&gt;1.5&lt;/a&gt;,
we modified the container to
install the command &lt;code&gt;wget&lt;/code&gt;.
You can see the modifications by typing the
following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker diff dl-figures&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output consists of a list of files tagged with the letter A, C or D, indicating
respectively that the file has been added (A), changed (C) or deleted (D).
In this list you’ll find the downloaded figures, as well as
other files that have been added or modified or deleted
when we installed &lt;code&gt;wget&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-12&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.1  &lt;/strong&gt;&lt;/span&gt;If layers, except the top one, are immutable,
how can files that belong to the lower layers be modified or deleted?
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We can create a new image from the container &lt;em&gt;dl-figures&lt;/em&gt;, one that provides
a Ubuntu distribution with the command &lt;code&gt;wget&lt;/code&gt; already installed,
with the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker commit dl-figures ubuntu-with-wget&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The command creates a new image called &lt;em&gt;ubuntu-with-wget&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-14&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.2  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;em&gt;ubuntu-with-wget&lt;/em&gt; and verify that the command
&lt;em&gt;wget&lt;/em&gt; is actually installed.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;dockerfiles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Dockerfiles&lt;/h2&gt;
&lt;p&gt;The most common way to create an image is to use a &lt;strong&gt;Dockerfile&lt;/strong&gt;, a
text file that contains all the instructions necessary to
build the image.
The advantage of the Dockerfile is that it can be interpreted
by the Docker engine, which makes the creation of images an automated
and repeatable task, rather than manual like the interactive method.&lt;/p&gt;
&lt;p&gt;Inspired by the previous example, suppose that we want to create a containerized
application to download figures from a Web page.
As a template for this application, we need to build a new
image, that we’ll call &lt;em&gt;fig-downloader&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The Dockerfile containing the instructions to build the image
&lt;em&gt;fig-downloader&lt;/em&gt; is as follows:&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM ubuntu:eoan
RUN apt-get update
RUN apt-get install -y wget
RUN mkdir -p /my-figures
WORKDIR /my-figures
ENTRYPOINT [&amp;quot;wget&amp;quot;, &amp;quot;-nd&amp;quot;, &amp;quot;-r&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;jpg,jpeg,bmp,png,gif&amp;quot;]
CMD [&amp;quot;https://www.centralesupelec.fr/fr/presentation&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the explanation:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;We use the image &lt;em&gt;ubuntu:eoan&lt;/em&gt; as the &lt;strong&gt;base image&lt;/strong&gt;.
This corresponds to the instruction &lt;code&gt;FROM ubuntu:eoan&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We install the utility &lt;code&gt;wget&lt;/code&gt; in the base image.
This corresponds to the
instructions &lt;code&gt;RUN apt-get update&lt;/code&gt; and &lt;code&gt;RUN apt-get install -y wget&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We create a directory &lt;em&gt;my-figures&lt;/em&gt; under the root directory of the image.
This corresponds to the instruction &lt;code&gt;RUN mkdir -p /my-figures&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We set the newly created directory &lt;em&gt;/my-figures&lt;/em&gt; as the
&lt;strong&gt;working directory&lt;/strong&gt; of the image. This corresponds to the
instruction &lt;code&gt;WORKDIR /my-figures&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We specify the command to be executed when a container is run from this image.
This corresponds to the instruction &lt;code&gt;ENTRYPOINT [&amp;quot;wget&amp;quot;, &amp;quot;-nd&amp;quot;, &amp;quot;-r&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;jpg,jpeg,bmp,png,gif&amp;quot;]&lt;/code&gt;.
This instruction means: execute &lt;code&gt;wget&lt;/code&gt; with the options
&lt;code&gt;-nd&lt;/code&gt;, &lt;code&gt;-r&lt;/code&gt;, &lt;code&gt;-A&lt;/code&gt;;
the last option takes a list of file
extensions (&lt;code&gt;jpg,jpeg,bmp,png,gif&lt;/code&gt;) as its argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remember that the utility &lt;code&gt;wget&lt;/code&gt; takes the URL of the Web page as
an argument. The URL will be specified when we run the container from
the image &lt;em&gt;fig-downloader&lt;/em&gt;.
Optionally, we can specify a default argument by using the
keyword CMD. The meaning of the instruction
&lt;code&gt;CMD [&amp;quot;https://www.centralesupelec.fr/fr/presentation&amp;quot;]&lt;/code&gt; is:
if we don’t give any URL when we run the container, the figures will
be downloaded from
&lt;a href=&#34;https://www.centralesupelec.fr/fr/presentation&#34; class=&#34;uri&#34; target=&#34;_blank&#34;&gt;https://www.centralesupelec.fr/fr/presentation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-15&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.3  &lt;/strong&gt;&lt;/span&gt;What is the relation between the Dockerfile lines and the image layers?
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:dockerfile-creation&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.4  &lt;/strong&gt;&lt;/span&gt;Could you identify a problem in this Dockerfile?
Modify the Dockerfile accordingly.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;building-an-image&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; Building an image&lt;/h2&gt;
&lt;p&gt;We’re now going to build an image from a Dockerfile.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Create a directory named &lt;em&gt;fig-downloader&lt;/em&gt; in your computer with
a file named &lt;em&gt;Dockerfile&lt;/em&gt; inside.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the &lt;em&gt;Dockerfile&lt;/em&gt; write the set of instructions that
you proposed in Exercise &lt;a href=&#34;#exr:dockerfile-creation&#34;&gt;2.4&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the terminal, set the working directory to &lt;em&gt;fig-downloader&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build an image called &lt;em&gt;fig-downloader&lt;/em&gt; by executing the following command:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker build -t fig-downloader .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;.&lt;/code&gt; at the end of the command means that the Docker engine will
look for a file named &lt;em&gt;Dockerfile&lt;/em&gt; in the working directory.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-16&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.5  &lt;/strong&gt;&lt;/span&gt;Once the image is built, type the command &lt;code&gt;docker image ls -a&lt;/code&gt;.
What are the images with repository and tag &lt;code&gt;&amp;lt;none&amp;gt;&lt;/code&gt;?
Why are there three of such images?
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox curiosity&#34;&gt;
&lt;p&gt;&lt;strong&gt;Good to know&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you give the Dockerfile a different name (say, &lt;em&gt;Dockerfile-fig-downloader&lt;/em&gt;),
the command to build the image will be:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker build -t fig-downloader -f Dockerfile-fig-downloader .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The option &lt;code&gt;-f&lt;/code&gt; is used to specify the name of the Dockerfile.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Let’s dive deeper into the anatomy of an image.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-17&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.6  &lt;/strong&gt;&lt;/span&gt;Run the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker history fig-downloader&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and analyze the layers of the new image.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why do some layers have an ID, while other
are marked as &lt;i&gt;missing&lt;/i&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Can you find the identifiers of the intermediate images?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:dl-1-container&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.7  &lt;/strong&gt;&lt;/span&gt;Run the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run --name dl-1 fig-downloader&lt;/code&gt;&lt;/p&gt;
What does it do? Where are the downloaded pictures?
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-18&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.8  &lt;/strong&gt;&lt;/span&gt;Run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --name dl-2 fig-downloader https://www.centralesupelec.fr/fr/nos-campus&lt;/code&gt;&lt;/pre&gt;
What does it do? Where are the downloaded pictures?
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;containerized-python-application&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4&lt;/span&gt; Containerized Python application&lt;/h2&gt;
&lt;p&gt;Download &lt;a href=&#34;/courses/cloud-computing/word-frequency.zip&#34;&gt;this archive file&lt;/a&gt;
and unzip it into your working directory.
In this archive you’ll find:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Dockerfile.&lt;/li&gt;
&lt;li&gt;A Python script &lt;em&gt;main.py&lt;/em&gt; that asks the user to enter the URL and the language of a Web page,
and prints the 10 most frequent words occurring in that page.&lt;/li&gt;
&lt;li&gt;A file &lt;em&gt;requirements.txt&lt;/em&gt; with the list of the Python packages
needed to run the given script.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The content of the Dockerfile is as follows:&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM python:3.7-slim
RUN mkdir -p /app
WORKDIR /app
COPY ./main.py ./requirements.txt /app/
RUN pip install -r requirements.txt
ENTRYPOINT [&amp;quot;python&amp;quot;, &amp;quot;main.py&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-19&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.9  &lt;/strong&gt;&lt;/span&gt;Describe what this Dockerfile does.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34; word-latex=&#34;{exercisebox}&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-20&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.10  &lt;/strong&gt;&lt;/span&gt;Build an image called &lt;em&gt;wordfreq&lt;/em&gt; from this Dockerfile.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-21&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.11  &lt;/strong&gt;&lt;/span&gt;Without changing the Dockerfile, rebuild the same image.
What do you notice?
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-22&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.12  &lt;/strong&gt;&lt;/span&gt;What happens if you modify a line in the Python script and
you rebuild the image?
Is the build cache still used?
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-23&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.13  &lt;/strong&gt;&lt;/span&gt;Considering how the build cache is used in Docker,
can you tell what’s wrong with this Dockerfile?
Modify the Dockerfile accordingly.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-24&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.14  &lt;/strong&gt;&lt;/span&gt;Modify &lt;em&gt;main.py&lt;/em&gt; and rebuild the image.
What changed?
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-volumes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Data Volumes&lt;/h1&gt;
&lt;p&gt;In Exercise &lt;a href=&#34;#exr:dl-1-container&#34;&gt;2.7&lt;/a&gt; you’be been asked to run a container named
&lt;em&gt;dl-1&lt;/em&gt; to download some figures from a Web page.
The figures were downloaded into the
directory &lt;em&gt;/my-figures&lt;/em&gt; of the container.
But we left a question unanswered.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we transfer those figures from the container to the host computer?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One way to go about that is to run the following command in the host terminal:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker cp dl-1:/my-figures .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will copy the directory &lt;em&gt;/my-figures&lt;/em&gt; from the container &lt;em&gt;dl-1&lt;/em&gt; to
the host computer working directory.
You can verify it by yourself.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-25&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.1  &lt;/strong&gt;&lt;/span&gt;Can you tell why this solution is less than ideal?
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;using-a-host-volume&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Using a host volume&lt;/h2&gt;
&lt;p&gt;A better solution is to &lt;strong&gt;mount&lt;/strong&gt; (i.e., attach)
a directory of the host computer at the container’s directory
&lt;em&gt;/my-figures&lt;/em&gt; when we run it.
Let’s see how it works.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Create a directory named &lt;em&gt;figs-volume&lt;/em&gt; in your working directory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Type and execute the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -v $(pwd)/figs-volume:/my-figures fig-downloader&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command runs a container from the image &lt;em&gt;fig-downloader&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;With the option &lt;code&gt;-v&lt;/code&gt; we specify that we want to mount the directory
&lt;em&gt;$(pwd)/figs-volume&lt;/em&gt; (&lt;em&gt;$(pwd)&lt;/em&gt; indicates the host working directory)
at the directory &lt;em&gt;figs-volume&lt;/em&gt; in the container;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The option &lt;code&gt;--rm&lt;/code&gt; indicates that we want the container to be
removed when its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; Verify that the pictures are in the folder &lt;em&gt;figs-volume&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In this example, we’ve used the directory &lt;em&gt;figs-volume&lt;/em&gt; as a
&lt;strong&gt;volume&lt;/strong&gt; (essentially, an external storage area) of the container;
when the container is destroyed, the volume remains with all its data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-volumes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; Docker volumes&lt;/h2&gt;
&lt;p&gt;In the example that we’ve just described, we’ve used a host
directory as a volume.
This is useful when we, or an application running on the host, need
to access the files produced by a container.
In all the other cases, a container should use a &lt;strong&gt;Docker volume&lt;/strong&gt;, which
is managed directly by the Docker engine.&lt;/p&gt;
&lt;p&gt;Let’s create a new Docker volume called &lt;em&gt;data-volume&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker volume create data-volume&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox curiosity&#34;&gt;
&lt;p&gt;&lt;strong&gt;Good to know (advanced notion)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where the data will be actually stored?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can inspect the new volume by typing the
following command (or, you can click on the volume in the GUI):&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker volume inspect data-volume&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;em&gt;mount path&lt;/em&gt; is indicated; that’s the folder where the data
will be actually stored.
If your computer runs Linux, that folder will be available
on the host; if your computer runs Windows or MacOS,
you’ll not find that folder on your computer.
Instead, it will be available in the hidden virtual machine
that Docker for Windows and Docker for Mac use.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do you want to see the directory?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One way to look into the hidden VM is to run
the following containerized application:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run -it --rm --privileged --pid=host justincormack/nsenter1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This application will open a guest terminal into the VM.
You can then use the commands &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;
to browse to the directory indicated as the mount path
of the new volume.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sharing-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.1&lt;/span&gt; Sharing data&lt;/h3&gt;
&lt;p&gt;A Docker volume can be used to share data between containers.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-26&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.2  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;code&gt;ubuntu:eoan&lt;/code&gt;,
specifying the options to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Remove the container once its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interact with the terminal in the container.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Mount the volume &lt;em&gt;data-volume&lt;/em&gt; at the container’s directory &lt;em&gt;/data&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-27&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.3  &lt;/strong&gt;&lt;/span&gt;Type a command in the guest Linux terminal to create a file
&lt;em&gt;test-file.txt&lt;/em&gt; in the directory &lt;em&gt;/data&lt;/em&gt;.
Verify that the file is created.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-28&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.4  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;em&gt;alpine:latest&lt;/em&gt;,
specifying the options to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Remove the container once its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interact with the terminal in the container.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Mount the volume &lt;em&gt;data-volume&lt;/em&gt; to the directory &lt;em&gt;/my-data&lt;/em&gt;
of the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-29&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.5  &lt;/strong&gt;&lt;/span&gt;Verify that you can read the file &lt;em&gt;test-file.txt&lt;/em&gt;.
Which folder would you look in?
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the guest terminals of both containers type &lt;code&gt;exit&lt;/code&gt;.
This will terminate and destroy (since we used
the option &lt;code&gt;--rm&lt;/code&gt;) the containers.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-30&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.6  &lt;/strong&gt;&lt;/span&gt;Will the file &lt;em&gt;test-file.txt&lt;/em&gt; be removed?
Why?
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;single-host-networking&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Single-Host Networking&lt;/h1&gt;
&lt;p&gt;In order to let containers communicate and, therefore, co-operate,
Docker defines a simple networking model known as
the &lt;a href=&#34;/courses/cloud-computing/docker-primer#single-host-networking&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;container network model&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-31&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.1  &lt;/strong&gt;&lt;/span&gt;Describe the output of the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker network ls&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-32&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.2  &lt;/strong&gt;&lt;/span&gt;The following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker network inspect bridge&lt;/code&gt;&lt;/p&gt;
outputs the configuration of the network &lt;strong&gt;bridge&lt;/strong&gt;.
By looking at this configuration, can you tell
what IP addresses will be given to the containers attached to this
network? What’s the IP address of the router of this network?
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-networks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1&lt;/span&gt; Creating networks&lt;/h2&gt;
&lt;p&gt;By default, any new container is attached to the network named &lt;em&gt;bridge&lt;/em&gt;.
As a result, all new containers will be able to communicate over this network.
This is not a good idea.
If a hacker can compromise any of these containers, s/he might
be able to attack the other containers as well.
As a rule of thumb, we should attach two containers to the same network &lt;strong&gt;only&lt;/strong&gt; on a
need-to-communicate basis.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-33&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.3  &lt;/strong&gt;&lt;/span&gt;What if a container doesn’t need to use the network at all?
Try to run a container disconnected from any network and
verify that you cannot ping the URL
&lt;a href=&#34;http://www.google.com&#34; target=&#34;_blank&#34;&gt;www.google.com&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In order to create a new network, you can use the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker network create network_name&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-34&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.4  &lt;/strong&gt;&lt;/span&gt;Create two networks named &lt;em&gt;buckingham&lt;/em&gt; and &lt;em&gt;rochefort&lt;/em&gt; that
use the driver &lt;em&gt;bridge&lt;/em&gt;.
By using the &lt;code&gt;docker network inspect&lt;/code&gt; command,
look at the IP addresses of the new networks and write them down.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-35&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.5  &lt;/strong&gt;&lt;/span&gt;Create three containers &lt;em&gt;athos&lt;/em&gt;, &lt;em&gt;porthos&lt;/em&gt; and &lt;em&gt;aramis&lt;/em&gt; and attach them
to the two networks &lt;em&gt;buckingham&lt;/em&gt; and &lt;em&gt;rochefort&lt;/em&gt; as displayed
&lt;a href=&#34;/courses/cloud-computing/docker-primer#fig:cnm&#34; target=&#34;_blank&#34;&gt;in this figure&lt;/a&gt;.
&lt;strong&gt;The three containers will open a Linux Alpine shell&lt;/strong&gt;.
You’ll need to launch the commands in three separate tabs of your terminal window.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What will the IP addresses of the three containers be in the two networks?
Remember that &lt;em&gt;porthos&lt;/em&gt; is attached to two networks, therefore it’ll have two
network interfaces (endpoints) and, as a result, two IP addresses.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Verify your answers by inspecting the two networks (use the
command &lt;code&gt;docker network inspect&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;communication-between-containers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2&lt;/span&gt; Communication between containers&lt;/h2&gt;
&lt;p&gt;Let’s see if and when the three containers can communicate.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-36&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.6  &lt;/strong&gt;&lt;/span&gt;Which containers are able to communicate?
Justify your answer.
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-37&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.7  &lt;/strong&gt;&lt;/span&gt;Try to ping &lt;em&gt;porthos&lt;/em&gt; from &lt;em&gt;athos&lt;/em&gt; by using its IP address.&lt;/p&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Which IP address of &lt;em&gt;porthos&lt;/em&gt; would you use?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-38&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.8  &lt;/strong&gt;&lt;/span&gt;Try to ping &lt;em&gt;porthos&lt;/em&gt; from &lt;em&gt;athos&lt;/em&gt; by using its name.
Do you succeed? Are you surprised?
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;a-containerized-chat-room&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.3&lt;/span&gt; A containerized chat room&lt;/h2&gt;
&lt;p&gt;We developed a simple chat room in Python that you can download
&lt;a href=&#34;/courses/cloud-computing/chat-room.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Participants use a &lt;em&gt;client&lt;/em&gt; program to connect to the chat room;
the chat room is managed by a &lt;em&gt;server&lt;/em&gt; application that receives the
client connections and forwards the messages between the users.
The archive contains the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;client.py&lt;/em&gt;. Implementation of the chat room client-side.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;server.py&lt;/em&gt;. Implementation of the chat room server-side.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;utils.py&lt;/em&gt;. Library with utility functions used
in both &lt;em&gt;client.py&lt;/em&gt; and &lt;em&gt;server.py&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-39&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.9  &lt;/strong&gt;&lt;/span&gt;By using Dockerfiles, create two images &lt;code&gt;chat-client&lt;/code&gt; and &lt;code&gt;chat-server&lt;/code&gt;
that will be used to run the client and the server in Docker.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll now run both containers.
Since they need to communicate, they need to be attached to the same
network (e.g., &lt;em&gt;buckingham&lt;/em&gt;).&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-40&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.10  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;em&gt;server-chat&lt;/em&gt;.
Set the options to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Automatically remove the container once its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give a name to the container (e.g., &lt;em&gt;server-chat&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The server will print messages on the screen.
In order to see them, you must use the option &lt;code&gt;-t&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, keep in mind that &lt;em&gt;server.py&lt;/em&gt; takes an argument
that is the &lt;strong&gt;port number&lt;/strong&gt; where the server will listen to incoming connections.&lt;/p&gt;
&lt;strong&gt;What is the IP address of the server?&lt;/strong&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-41&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.11  &lt;/strong&gt;&lt;/span&gt;
Run a container from the image &lt;em&gt;client-chat&lt;/em&gt;.
Set the options to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Automatically remove the container once its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give a name to the container (e.g., &lt;em&gt;client-chat&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since you’ll use the the client to write messages in the chat room,
remember to set the option &lt;code&gt;-it&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
The client takes two arguments: the host where the server is running
and the port which the server is listening to.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Once the client is started, you’ll be prompted to enter your name.
Then you can start writing messages.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can type &lt;em&gt;#quit&lt;/em&gt; at any moment to exit the chat room (client-side).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type Ctrl-C to stop the server.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Now, suppose that one of your classmates wants to join the chat room, but
s/he’s on another computer.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-42&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.12  &lt;/strong&gt;&lt;/span&gt;Do you think your classmate can connect to the containerized server running in
your machine? Justify your answer.
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What we need to do here is to expose our server to the outside world.
The server runs in a container &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; that, in turns, runs on the host machine &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt;.
The server listens to port &lt;span class=&#34;math inline&#34;&gt;\(p_c\)&lt;/span&gt; that is opened &lt;strong&gt;inside the container&lt;/strong&gt;.
We need to map port &lt;span class=&#34;math inline&#34;&gt;\(p_c\)&lt;/span&gt; to a port &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt; in the host computer.
This way, the classmate client will connect to the server by specifying
the &lt;strong&gt;IP address of the host &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt;&lt;/strong&gt; (not &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt;) and &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt; as the port number.&lt;/p&gt;
&lt;p&gt;We implement this solution step by step.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Stop both the server and the client running on your machine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Declare the port number to expose.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-43&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.13  &lt;/strong&gt;&lt;/span&gt;How would you add this declaration?
Modify the Dockerfile accordingly?
&lt;/div&gt;
&lt;/div&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Rebuild the image &lt;em&gt;server-chat&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the server container so that that the exposed port
is mapped to a random port in the host computer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-44&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.14  &lt;/strong&gt;&lt;/span&gt;Which option of the command &lt;code&gt;docker container run&lt;/code&gt; would you use?
Write the command to run the container and execute it.
&lt;/div&gt;
&lt;/div&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Verify that the exposed port &lt;span class=&#34;math inline&#34;&gt;\(p_c\)&lt;/span&gt; is correctly mapped to a port &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt;
in the host computer by running the following command.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container port chat-server&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-45&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.15  &lt;/strong&gt;&lt;/span&gt;How do you read the output of this command?
&lt;/div&gt;
&lt;/div&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Run a client from your host computer (same as before).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ask any of your classmates to connect to your server.
For this, you’ll need to tell your classmate the IP address
of your machine and the port number &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
