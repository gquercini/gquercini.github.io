<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gianluca Quercini</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Gianluca Quercini</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 10 Feb 2020 15:24:48 +0100</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=true) shape:circle]</url>
      <title>Gianluca Quercini</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Tutorials</title>
      <link>/courses/cloud-computing/tutorials/cc-tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/tutorials/cc-tutorials/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;tutorial-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tutorial 1&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Getting started with Docker&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supervisors&lt;/strong&gt;: Gianluca Quercini, Francesca Bugiotti, Marc-Antoine Weisser, Idir Ait Sadoune (CentraleSupélec)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Wednesday 6 May, 1:45 PM - 5 PM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Room&lt;/strong&gt;: Remotely on Microsoft Teams&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;: &lt;a href=&#34;/courses/cloud-computing/tutorials/tutorial-docker&#34;&gt;Click here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tutorial-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tutorial 2&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: MapReduce - Hadoop&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supervisors&lt;/strong&gt;: Gianluca Quercini, Francesca Bugiotti, Marc-Antoine Weisser, Idir Ait Sadoune (CentraleSupélec)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Thursday 14 May, 8:30 AM - 11:45 AM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Room&lt;/strong&gt;: Remotely on Microsoft Teams&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;: &lt;a href=&#34;https://centralesupelec.edunao.com/course/view.php?id=1457&#34; target=&#34;_blank&#34;&gt;Click here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>/courses/databases/tutorials/cc-tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/databases/tutorials/cc-tutorials/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;tutorial-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tutorial 1&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Data modeling&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Tuesday 15 September 2020, 10:30 AM - 12 PM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;: &lt;a href=&#34;/courses/databases/tutorials/data-modeling&#34;&gt;Click here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tutorial-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tutorial 2&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Document-based databases: MongoDB.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Tuesday 3 November 2020, 10 AM - 12 AM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;: available soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tutorial-3&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tutorial 3&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Graph databases: Neo4j.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Tuesday 10 November 2020, 10 AM - 12 AM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;: available soon.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Installing Docker</title>
      <link>/courses/cloud-computing/overview/installing-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/overview/installing-docker/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#windows&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Windows&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#docker-for-windows&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; Docker Desktop for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker-toolbox-windows&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; Docker Toolbox for Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#macos&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; MacOS&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#docker-desktop-for-mac.&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; Docker Desktop for Mac.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker-toolbox-mac&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; Docker Toolbox for Mac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker-on-linux&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#alternative-options&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Alternative options&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#docker-playground&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.1&lt;/span&gt; Docker playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker-in-an-already-prepared-virtual-machine&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2&lt;/span&gt; Docker in an already prepared virtual machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docker-in-a-ubuntu-linux-virtual-machine&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.3&lt;/span&gt; Docker in a Ubuntu Linux virtual machine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#verify-installation&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; Verify your installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#interacting-with-docker&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;6&lt;/span&gt; Interacting with Docker&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#graphical-interface&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;6.1&lt;/span&gt; Graphical interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#troubleshooting&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;7&lt;/span&gt; Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;p&gt;This document contains information on how to install Docker
on your computer.&lt;/p&gt;
&lt;p&gt;Although you can access an online Docker environment without installing anything on
your computer (see Section &lt;a href=&#34;#docker-playground&#34;&gt;4.1&lt;/a&gt;), you should consider this option
only if you really cannot install Docker.&lt;/p&gt;
&lt;p&gt;The installation procedure depends on the operating system
that your computer runs.&lt;/p&gt;
&lt;div id=&#34;windows&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Windows&lt;/h1&gt;
&lt;p&gt;The installation procedure depends on the Windows version running on your computer.&lt;/p&gt;
&lt;div id=&#34;docker-for-windows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; Docker Desktop for Windows&lt;/h2&gt;
&lt;p&gt;If your computer runs &lt;strong&gt;Windows 10 64 bits (Pro, Enterprise, or Education, build 15063 or later)&lt;/strong&gt;,
you can install &lt;strong&gt;Docker Desktop for Windows (recommended)&lt;/strong&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Show me more&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hardware prerequisites&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;64 bit processor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4GB system RAM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BIOS-level hardware virtualization support must be enabled in the BIOS settings.
For more information, see &lt;a href=&#34;https://docs.docker.com/docker-for-windows/troubleshoot/#virtualization-must-be-enabled&#34; target=&#34;_blank&#34;&gt;Virtualization&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;VirtualBox users&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Docker for Windows uses &lt;strong&gt;Hyper-V&lt;/strong&gt; as a virtual machine to run containers.
Unfortunately, Hyper-V and VirtualBox are not compatible;
when Hyper-V is enabled, &lt;strong&gt;VirtualBox will stop working&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;However:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The existing VirtualBox images &lt;strong&gt;will not be removed&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you want to use VirtualBox, &lt;a href=&#34;https://ugetfix.com/ask/how-to-disable-hyper-v-in-windows-10/&#34; target=&#34;_blank&#34;&gt;you can turn Hyper-V off&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cannot/don’t want to install Docker Desktop for for Windows&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If your computer doesn’t meet the hardware requirements, or you
don’t want to install Docker Desktop for Windows because you don’t want to
mess up your VirtualBox installation (although you shouldn’t really worry about the latter),
you have two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install Docker Toolbox for Windows (Section &lt;a href=&#34;#docker-toolbox-windows&#34;&gt;1.2&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;See the alternative options (Section &lt;a href=&#34;#alternative-options&#34;&gt;4&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Installation procedure&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Download &lt;a href=&#34;https://hub.docker.com/editions/community/docker-ce-desktop-windows/&#34; target=&#34;_blank&#34;&gt;Docker Desktop for Windows.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow the &lt;a href=&#34;https://docs.docker.com/docker-for-windows/install/#install-docker-desktop-on-windows&#34; target=&#34;_blank&#34;&gt;installation instructions.&lt;/a&gt;
You might need to restart the system to enable Hyper-V.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify your installation (see Section &lt;a href=&#34;#verify-installation&#34;&gt;5&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-toolbox-windows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; Docker Toolbox for Windows&lt;/h2&gt;
&lt;p&gt;If your computer runs &lt;strong&gt;Windows 7 or higher&lt;/strong&gt;, and
doesn’t meet the hardware requirements for Docker for Windows,
you can install &lt;strong&gt;Docker Toolbox for Windows&lt;/strong&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Show me more&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;Please refer to &lt;a href=&#34;https://docs.docker.com/toolbox/toolbox_install_windows/&#34; target=&#34;_blank&#34;&gt;these installation instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cannot install Docker Toolbox&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See the alternative options (Section &lt;a href=&#34;#alternative-options&#34;&gt;4&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;macos&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; MacOS&lt;/h1&gt;
&lt;p&gt;The installation procedure depends on the version of MacOS running on your computer.&lt;/p&gt;
&lt;div id=&#34;docker-desktop-for-mac.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Docker Desktop for Mac.&lt;/h2&gt;
&lt;p&gt;If your computer runs &lt;strong&gt;MacOS 10.13 or higher&lt;/strong&gt;, you can install
&lt;strong&gt;Docker Desktop for Mac (recommended)&lt;/strong&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Show me more&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hardware requirements&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your computer hardware must be a 2010 or a newer model.
Verify that your computer is compatible with
Docker Desktop for Mac:
&lt;ul&gt;
&lt;li&gt;Open a terminal.&lt;/li&gt;
&lt;li&gt;Run the following command: &lt;code&gt;sysctl kern.hv_support&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the output of the command is &lt;code&gt;kern.hv_support: 1&lt;/code&gt; your computer is compatible.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;At least 4GB of RAM.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;VirtualBox users&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you have a version of VirtualBox older than 4.3.30, you should consider upgrading it, as
it would not be compatible with Docker Desktop.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cannot install Docker Desktop for Mac&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If your computer doesn’t meet the hardware requirements,
you have two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install Docker Toolbox for Mac (Section &lt;a href=&#34;#docker-toolbox-mac&#34;&gt;2.2&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;See the alternative options (Section &lt;a href=&#34;#alternative-options&#34;&gt;4&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Installation instructions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Download &lt;a href=&#34;https://hub.docker.com/editions/community/docker-ce-desktop-mac/&#34; target=&#34;_blank&#34;&gt;Docker Desktop for Mac.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow the &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/#install-and-run-docker-desktop-on-mac&#34; target=&#34;_blank&#34;&gt;installation instructions.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify your installation (see Section &lt;a href=&#34;#verify-installation&#34;&gt;5&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-toolbox-mac&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Docker Toolbox for Mac&lt;/h2&gt;
&lt;p&gt;If your computer runs &lt;strong&gt;MacOs 10.8 or higher&lt;/strong&gt;, and
doesn’t meet the hardware requirements for Docker Desktop for Mac,
you can install &lt;strong&gt;Docker Toolbox for Mac&lt;/strong&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Show me more&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;Please refer to &lt;a href=&#34;https://docs.docker.com/toolbox/toolbox_install_mac/&#34; target=&#34;_blank&#34;&gt;these installation instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cannot install Docker Toolbox&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See the alternative options (Section &lt;a href=&#34;#alternative-options&#34;&gt;4&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-on-linux&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Linux&lt;/h1&gt;
&lt;p&gt;You can install Docker on the following Linux distributions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CentOS (&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/centos/&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debian (&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/debian/&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fedora (&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/fedora/&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ubuntu (&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/&#34; target=&#34;_blank&#34;&gt;installation instructions&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make sure to read the &lt;a href=&#34;https://docs.docker.com/engine/install/linux-postinstall/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;post-installation steps for Linux&lt;/strong&gt;&lt;/a&gt;
and to take the necessary steps to be able to run Docker as a non-root user.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;alternative-options&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Alternative options&lt;/h1&gt;
&lt;p&gt;If you’re unable to install Docker on your computer,
you have two options left:
using the Docker playground or installing Docker in a Linux virtual machine.&lt;/p&gt;
&lt;div id=&#34;docker-playground&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1&lt;/span&gt; Docker playground&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://labs.play-with-docker.com&#34; target=&#34;_blank&#34;&gt;Docker playground&lt;/a&gt; is
an online Docker environment that you can play with for free.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;advantage&lt;/strong&gt; is that you don’t have anything to install on your computer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;disadvantage&lt;/strong&gt; is that you might be unable to open a session
depending on the number of active sessions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to connect to the playground,
you need to &lt;a href=&#34;https://hub.docker.com/signup?next=%2F%3Fref%3Dlogin&#34; target=&#34;_blank&#34;&gt;create an account on DockerHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-in-an-already-prepared-virtual-machine&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2&lt;/span&gt; Docker in an already prepared virtual machine&lt;/h2&gt;
&lt;p&gt;We provide an Alpine Linux virtual machine with Docker already
installed (size: 743MB).
The virtual machine will give you a simple command-line interface
where you can type the Docker commands.&lt;/p&gt;
&lt;p&gt;Download &lt;a href=&#34;https://drive.google.com/file/d/1j_qAs5CygTjMya1ck2aBcqEinnWffiHo/view?usp=sharing&#34; target=&#34;_blank&#34;&gt;the virtual machine&lt;/a&gt;
and import it into VirtualBox, as shown in the following video
(Safari users: watch on YouTube for fullscreen mode;
all users: select HD quality for a better experience).&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/gAn70BgF9YQ&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt; to log into the virtual machine are both &lt;em&gt;root&lt;/em&gt;.
In the video, you’ll be directed to create a
folder in your computer called &lt;em&gt;docker_files&lt;/em&gt;.
There,
you’ll place all files that you’ll need to play with Docker.
Don’t hesitate to create subdirectories to organize your files
(e.g., &lt;em&gt;td-1&lt;/em&gt;, &lt;em&gt;final-project&lt;/em&gt;).
You’ll be able to access this folder from the virtual machine
from the folder &lt;em&gt;/mnt/docker_files&lt;/em&gt;.
This way, you can manipulate your files by using
the file system manager of your computer and you’ll just use the
terminal of the virtual machine to type the Docker commands.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-in-a-ubuntu-linux-virtual-machine&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.3&lt;/span&gt; Docker in a Ubuntu Linux virtual machine&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install VirtualBox on your computer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download the ISO image of &lt;a href=&#34;https://ubuntu.com/download/desktop&#34; target=&#34;_blank&#34;&gt;Ubuntu Desktop&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open VirtualBox and select &lt;em&gt;New&lt;/em&gt; to install a new operating system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;Linux&lt;/strong&gt; as the operating system &lt;strong&gt;type&lt;/strong&gt; and &lt;strong&gt;Ubuntu (64-bit)&lt;/strong&gt; as the version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set the &lt;strong&gt;memory size&lt;/strong&gt; (1024 MB or higher).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a &lt;strong&gt;virtual hard disk&lt;/strong&gt; with the recommended size.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select &lt;strong&gt;VDI (VirtualBox Disk Image)&lt;/strong&gt; as the hard disk type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the option &lt;strong&gt;Fixed size&lt;/strong&gt; and create the new virtual machine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Double-click on the new virtual machine and, when prompted,
select the ISO image of Ubuntu.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow the instructions to install Ubuntu.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When Ubuntu is finally installed, follow the instructions in Section &lt;a href=&#34;#docker-on-linux&#34;&gt;3&lt;/a&gt; to
install Docker in Ubuntu.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;verify-installation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; Verify your installation&lt;/h1&gt;
&lt;p&gt;Open a terminal and type the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run hello-world&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If everything is OK, you should see the output in the following figure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/courses/cloud-computing/installing-docker/hello-world-output.png&#34; width=&#34;80%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;interacting-with-docker&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;6&lt;/span&gt; Interacting with Docker&lt;/h1&gt;
&lt;p&gt;In this course, we’ll learn how to interact with the Docker engine
by using the &lt;strong&gt;command-line terminal&lt;/strong&gt;.
This option might seem a bit tedious
(nobody likes to remember textual commands), but it offers
a great flexibility.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is the option that we recommend&lt;/strong&gt; and for which we’ll provide
a full support throughout the course.&lt;/p&gt;
&lt;div id=&#34;graphical-interface&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;6.1&lt;/span&gt; Graphical interface&lt;/h2&gt;
&lt;p&gt;If you really want to use a graphical interface, you might want to look at
&lt;a href=&#34;https://www.portainer.io&#34; target=&#34;_blank&#34;&gt;Portainer&lt;/a&gt;, which is
itself run as a Docker container.&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Linux or MacOS users&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;Open a terminal and copy and paste the following commands:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker volume create portainer_data&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Windows users&lt;/summary&gt;
Open a terminal and copy and paste the following commands:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker volume create portainer_data&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run -d -p 8000:8000 -p 9000:9000 --name portainer --restart always -v \\.\pipe\docker_engine:\\.\pipe\docker_engine -v portainer_data:C:\data portainer/portainer&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When the container is up and running,
the interface is available at the following URL:
&lt;a href=&#34;http://localhost:9000&#34; class=&#34;uri&#34; target=&#34;_blank&#34;&gt;http://localhost:9000&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose a password and create the user &lt;em&gt;admin&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select &lt;em&gt;Local&lt;/em&gt; to manage the Docker environment installed on your computer and
click on &lt;em&gt;Connect&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the endpoint &lt;em&gt;Local&lt;/em&gt; (figure below) to access the dashboard.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/courses/cloud-computing/installing-docker/portainer-local-endpoint.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The menu on the left of the dashboard allows you to manage
the different components of your Docker environment (e.g., containers, images, volumes and networks).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;A user guide of Portainer is very much out of the scope of this course.&lt;/strong&gt;
However, the interface is rather intuitive and you should easily find out
how to create, run, stop and remove containers, build images and
create volumes and networks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;troubleshooting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;7&lt;/span&gt; Troubleshooting&lt;/h1&gt;
&lt;p&gt;In this section we’ll document the installation issues
that you might experience.&lt;/p&gt;
&lt;p&gt;Don’t hesitate to &lt;a href=&#34;/index.html&#34; target=&#34;_blank&#34;&gt;contact us&lt;/a&gt;
to report your installation problems.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data for You</title>
      <link>/project/data-for-you/</link>
      <pubDate>Mon, 10 Feb 2020 15:24:48 +0100</pubDate>
      <guid>/project/data-for-you/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MOMENT: Temporal Meta-Fact Generation and Propagation in Knowledge Graphs</title>
      <link>/publication/sais-2020/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/publication/sais-2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Determining the interests of social media users: two approaches</title>
      <link>/publication/seghouani-2019/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>/publication/seghouani-2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Profile Reconciliation Through Dynamic Activities Across Social Networks</title>
      <link>/publication/isaj-2019/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>/publication/isaj-2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>/privacy/</guid>
      <description>&lt;p&gt;Add your privacy policy here and set &lt;code&gt;draft: false&lt;/code&gt; to publish it. Otherwise, delete this file if you don&amp;rsquo;t need it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terms</title>
      <link>/terms/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>/terms/</guid>
      <description>&lt;p&gt;Add your terms here and set &lt;code&gt;draft: false&lt;/code&gt; to publish it. Otherwise, delete this file if you don&amp;rsquo;t need it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A frequent named entities-based approach for interpreting reputation in Twitter</title>
      <link>/publication/seghouani-2018/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/publication/seghouani-2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Élimination des liens inter-langues erronés dans Wikipédia</title>
      <link>/publication/seghouani-2018-a/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/publication/seghouani-2018-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Eliminating Incorrect Cross-Language Links in Wikipedia</title>
      <link>/publication/bennacer-2017-a/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/publication/bennacer-2017-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Frisk: A multilingual approach to find twitteR InterestS via wiKipedia</title>
      <link>/publication/jipmo-2017/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/publication/jipmo-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Interpreting reputation through frequent named entities in twitter</title>
      <link>/publication/bennacer-2017/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/publication/bennacer-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Liaison: reconciliation of individuals profiles across social networks</title>
      <link>/publication/quercini-2017/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Wikipedia-based extraction of key information from resumes</title>
      <link>/publication/ghufran-2017/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/publication/ghufran-2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Catégorisation et Désambiguı̈sation des Intérêts des Individus dans le Web Social.</title>
      <link>/publication/jipmo-2016/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>/publication/jipmo-2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A multilingual approach to discover cross-language links in Wikipedia</title>
      <link>/publication/bennacer-2015/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>/publication/bennacer-2015/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Toponym disambiguation in online social network profiles</title>
      <link>/publication/ghufran-2015/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>/publication/ghufran-2015/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Matching user profiles across social networks</title>
      <link>/publication/bennacer-2014/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>/publication/bennacer-2014/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Réconciliation des profils dans les réseaux sociaux.</title>
      <link>/publication/bennacer-2014-a/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>/publication/bennacer-2014-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Uncovering the spatial relatedness in Wikipedia</title>
      <link>/publication/quercini-2014/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2014/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Entity discovery and annotation in tables</title>
      <link>/publication/quercini-2013/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2013/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Des données tabulaires à RDF: l’extraction de données de Google Fusion Tables</title>
      <link>/publication/quercini-2012-a/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2012-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Developing Attention-Aware and Context-Aware User Interfaces on Handheld Devices</title>
      <link>/publication/ancona-2012/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Discovering Cross-language Links in Wikipedia through Semantic Relatedness.</title>
      <link>/publication/penta-2012/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/penta-2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Facetted Browsing on Extracted Fusion Tables Data for Digital Cities.</title>
      <link>/publication/quercini-2012/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Facetted search on extracted fusion tables data for digital cities</title>
      <link>/publication/setz-2012/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/setz-2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Agents and Ontologies for Understanding and Preserving the Rock Art of Mount Bego.</title>
      <link>/publication/papaleo-2011/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      <guid>/publication/papaleo-2011/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Confluent drawing algorithms using rectangular dualization</title>
      <link>/publication/quercini-2010/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2010/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Determining the spatial reader scopes of news sources using local lexicons</title>
      <link>/publication/quercini-2010-a/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      <guid>/publication/quercini-2010-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Virtual institutions for preserving and simulating the culture of Mount Bego&#39;s ancient people</title>
      <link>/publication/ancona-2010/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2010/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Integrating agents and virtual institutions for sharing cultural heritage on the Web</title>
      <link>/publication/bogdanovych-2009/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      <guid>/publication/bogdanovych-2009/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Text Entry in PDAs with WtX</title>
      <link>/publication/ancona-2009/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2009/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Wireless networks in archaeology and cultural heritage</title>
      <link>/publication/ancona-2008/</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2008/</guid>
      <description></description>
    </item>
    
    <item>
      <title>An Improved Text Entry Tool for PDAs</title>
      <link>/publication/ancona-2007-a/</link>
      <pubDate>Mon, 01 Jan 2007 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2007-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Rectangular Dualization of Biconnected Planar Graphs in Linear Time and Related Applications</title>
      <link>/publication/ancona-2007-b/</link>
      <pubDate>Mon, 01 Jan 2007 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2007-b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Rectangular Dualization of Biconnected Planar Graphs in Linear Time and Related Applications</title>
      <link>/publication/ancona-2007/</link>
      <pubDate>Mon, 01 Jan 2007 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2007/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mobile vision and cultural heritage: the agamemnon project</title>
      <link>/publication/ancona-2006-a/</link>
      <pubDate>Sun, 01 Jan 2006 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2006-a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Visualizing and managing network topologies via rectangular dualization</title>
      <link>/publication/ancona-2006/</link>
      <pubDate>Sun, 01 Jan 2006 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2006/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Comfortable textual data entry for PocketPC: the WTX system</title>
      <link>/publication/ancona-2005/</link>
      <pubDate>Sat, 01 Jan 2005 00:00:00 +0000</pubDate>
      <guid>/publication/ancona-2005/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Grading</title>
      <link>/courses/cloud-computing/exam/exam-presentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/exam/exam-presentation/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Lab assignment 1 will be graded (&lt;span class=&#34;math inline&#34;&gt;\(g_1\)&lt;/span&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A mini project will conclude the course (&lt;span class=&#34;math inline&#34;&gt;\(g_2\)&lt;/span&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The final grade will be the average of &lt;span class=&#34;math inline&#34;&gt;\(g_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(g_2\)&lt;/span&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project</title>
      <link>/courses/cloud-computing/exam/project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/exam/project/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The &lt;strong&gt;objective&lt;/strong&gt; of this project is to assess
your ability of building and sharing images in Docker.
The project consists of five steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Choose an application.&lt;/li&gt;
&lt;li&gt;Package your application into one or more Docker images.&lt;/li&gt;
&lt;li&gt;Ship your image(s) to the DockerHub registry.&lt;/li&gt;
&lt;li&gt;Write a documentation.&lt;/li&gt;
&lt;li&gt;Submit your project.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the following sections, you’ll find the details of each step.&lt;/p&gt;
&lt;p&gt;If you have questions, doubts, need of help, don’t hesitate
to contact me anytime in the MS Teams space.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;choose-an-application&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Choose an application&lt;/h1&gt;
&lt;p&gt;In this step, you’ll need to select an application &lt;strong&gt;of your choice&lt;/strong&gt;.
Examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An application that you developed in the past
in another course (does the phrase &lt;em&gt;coding weeks&lt;/em&gt; ring a bell?).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An application that you develop from scratch specifically for
this project. That’s a bit ambitious, but if you feel like challenging
yourself, why not?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An application developed by a friend of yours.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An application that you found on the internet. A good place
to look at is &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The application may be written in any programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;package-your-application&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Package your application&lt;/h1&gt;
&lt;p&gt;Your application must be &lt;strong&gt;packaged&lt;/strong&gt; as a &lt;strong&gt;Docker image&lt;/strong&gt;, or &lt;strong&gt;a set of Docker images&lt;/strong&gt;, if the application is composed of many independent services.&lt;/p&gt;
&lt;div id=&#34;recommendations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Recommendations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a directory on your computer named after
your application (e.g., &lt;em&gt;sample-app&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If your application is monolithic
(i.e., it’s not composed of many services), put everything into
this directory (including the Dockerfile).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If your application consists of many independent services, create
a subdirectory for each service, containing everything needed to run
that service (as well as the Dockerfile).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In case your application is composed of many independent services,
you might also want to create a
&lt;strong&gt;docker-compose file&lt;/strong&gt; with the instructions to run the application
(you’d greatly simplify my life!).
However, writing a docker-compose is &lt;strong&gt;not&lt;/strong&gt; mandatory.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ship-your-images.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Ship your image(s).&lt;/h1&gt;
&lt;p&gt;Upload your image(s) to the DockerHub registry.
In the following instructions I show the Docker commands to
upload an image named &lt;em&gt;test-image&lt;/em&gt; to
my DockerHub registry (my username is &lt;em&gt;quercinigia&lt;/em&gt;).
Of course, when you’ll type these Docker commands yourselves,
you’ll have to use your username and your image’s name.&lt;/p&gt;
&lt;p&gt;For your convenience, in my last lecture I
showed a full demo of the procedure, that
you can watch
in &lt;a href=&#34;https://web.microsoftstream.com/video/f7c15e3f-3393-484c-9a75-c030842ab5d6&#34; target=&#34;_blank&#34;&gt;in this video&lt;/a&gt;,
starting at minute 37.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you haven’t done so yet, create an account
on &lt;a href=&#34;https://hub.docker.com&#34; target=&#34;_blank&#34;&gt;DockerHub&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From the command-line terminal, I log into my DockerHub account.
One way to do so is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I created a file &lt;em&gt;docker_pwd.txt&lt;/em&gt; containing
my password.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the terminal, I place myself in the same directory as
the file &lt;em&gt;docker_pwd.txt&lt;/em&gt; and I type the following command:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;cat docker_pwd.txt | docker login --username quercinigia --password-stdin&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;I tag the image to upload with my DockerHub username, as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;docker image tag test_image quercinigia/test_image:1.0&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Finally, I push the image to the DockerHub registry:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;docker image push quercinigia/test_image:1.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;write-a-documentation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Write a documentation&lt;/h1&gt;
&lt;p&gt;The documentation must be concise (max 4 pages).
It must include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your name and family name.&lt;/li&gt;
&lt;li&gt;Short description of the application that you chose.&lt;/li&gt;
&lt;li&gt;The description of the Dockerfile, specifying the meaning of
each instruction.&lt;/li&gt;
&lt;li&gt;The instructions that I have to follow to pull your image(s) from
the DockerHub registry and run them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last point is particularly important as I have to verify
that everything works as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;submit-your-project&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Submit your project&lt;/h1&gt;
&lt;p&gt;You’ll submit your project on Edunao
(click on &lt;a href=&#34;https://centralesupelec.edunao.com/mod/assign/view.php?id=22011&#34; target=&#34;_blank&#34;&gt;this link&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deadline.&lt;/strong&gt; June 6, 2020, 23:59.&lt;/p&gt;
&lt;p&gt;Depending on the application that you chose,
two cases are possible:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Your application consists of &lt;strong&gt;only one Docker image&lt;/strong&gt;.
In this case, you may just upload &lt;strong&gt;the documentation in PDF&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You application consists of &lt;strong&gt;many images&lt;/strong&gt;
and you have created a &lt;strong&gt;docker-compose&lt;/strong&gt; file,
or you need to send additional files.
In this case,
you can upload an &lt;strong&gt;archive file&lt;/strong&gt;
(accepted formats include .zip .7z .bdoc .cdoc .ddoc .gtar .gz .gzip .hqx .rar .sit .tar .tgz),
containing &lt;strong&gt;the documentation in PDF&lt;/strong&gt; as well as the other files.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In any case, &lt;strong&gt;do not submit&lt;/strong&gt;
the source code of your application.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Lab assignments</title>
      <link>/courses/cloud-computing/labs/cc-labs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/labs/cc-labs/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;lab-assignment-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lab assignment 1&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: MapReduce - Spark&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supervisors&lt;/strong&gt;: Gianluca Quercini, Francesca Bugiotti, Marc-Antoine Weisser, Idir Ait Sadoune (CentraleSupélec)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Tuesday 19 May, 8:30 AM - 11:45 AM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Room&lt;/strong&gt;: Remotely on Microsoft Teams&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remark&lt;/strong&gt;: This lab assignment will be &lt;strong&gt;graded&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Link&lt;/strong&gt;: &lt;a href=&#34;https://centralesupelec.edunao.com/course/view.php?id=1457&#34; target=&#34;_blank&#34;&gt;Click here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Lectures</title>
      <link>/courses/cloud-computing/lectures/lectures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/lectures/lectures/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;lecture-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lecture 1&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Cloud Computing Introduction&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lecturer&lt;/strong&gt;: Wilfried Kirschenmann (ANEO)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Friday 24 April 2020, 1:45 PM - 5 PM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Room&lt;/strong&gt;: Remotely on Microsoft Teams&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;: Available on &lt;a href=&#34;https://centralesupelec.edunao.com/mod/resource/view.php?id=20061&#34; target=&#34;_blank&#34;&gt;Edunao&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lecture-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lecture 2&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Virtualization and Containerization&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lecturer&lt;/strong&gt;: Gianluca Quercini (CentraleSupélec)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Thursday 30 April, 8:30 AM - 11:45 AM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Room&lt;/strong&gt;: Remotely on Microsoft Teams&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;: Available on &lt;a href=&#34;https://centralesupelec.edunao.com/mod/resource/view.php?id=20402&#34; target=&#34;_blank&#34;&gt;Edunao&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lecture-3&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lecture 3&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Introduction to MapReduce&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lecturer&lt;/strong&gt;: Francesca Bugiotti (CentraleSupélec)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Thursday 7 May, 8:30 AM - 11:45 AM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Room&lt;/strong&gt;: Remotely on Microsoft Teams&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;: Available on Edunao (&lt;a href=&#34;https://centralesupelec.edunao.com/mod/resource/view.php?id=21028&#34; target=&#34;_blank&#34;&gt;Part 1&lt;/a&gt;,
&lt;a href=&#34;https://centralesupelec.edunao.com/mod/resource/view.php?id=21029&#34; target=&#34;_blank&#34;&gt;Part 2&lt;/a&gt;,
&lt;a href=&#34;https://centralesupelec.edunao.com/mod/resource/view.php?id=21030&#34; target=&#34;_blank&#34;&gt;Part 3&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lecture-4&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lecture 4&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Introduction to Hadoop and Spark&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lecturer&lt;/strong&gt;: Francesca Bugiotti (CentraleSupélec)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Friday 15 May, 1:45 PM - 5 PM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Room&lt;/strong&gt;: Remotely on Microsoft Teams&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;: Available on Edunao (&lt;a href=&#34;https://centralesupelec.edunao.com/mod/resource/view.php?id=21673&#34; target=&#34;_blank&#34;&gt;Part 1&lt;/a&gt;,
&lt;a href=&#34;https://centralesupelec.edunao.com/mod/resource/view.php?id=21680&#34; target=&#34;_blank&#34;&gt;Part 2&lt;/a&gt;,
&lt;a href=&#34;https://centralesupelec.edunao.com/mod/resource/view.php?id=21682&#34; target=&#34;_blank&#34;&gt;Part 3&lt;/a&gt;,
&lt;a href=&#34;https://centralesupelec.edunao.com/mod/resource/view.php?id=21684&#34; target=&#34;_blank&#34;&gt;Part 4&lt;/a&gt;,
&lt;a href=&#34;https://centralesupelec.edunao.com/mod/resource/view.php?id=21689&#34; target=&#34;_blank&#34;&gt;Part 5&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lecture-5&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lecture 5&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Multi-service applications&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lecturer&lt;/strong&gt;: Gianluca Quercini (CentraleSupélec)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Wednesday 20 May, 8:30 AM - 11:45 AM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Room&lt;/strong&gt;: Remotely on Microsoft Teams&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;: Available on &lt;a href=&#34;https://centralesupelec.edunao.com/mod/resource/view.php?id=21917&#34; target=&#34;_blank&#34;&gt;Edunao&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>References</title>
      <link>/courses/cloud-computing/references/cc-references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/references/cc-references/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;class-material&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Class material&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lecture slides, available &lt;a href=&#34;/courses/cloud-computing/lectures&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An &lt;a href=&#34;/courses/cloud-computing/references/docker-primer&#34;&gt;introduction to Docker&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A &lt;a href=&#34;/courses/cloud-computing/references/docker-cheat-sheet&#34;&gt;Docker cheat sheet&lt;/a&gt;, with a summary of
the most important Docker commands.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An &lt;a href=&#34;/courses/cloud-computing/references/linux-introduction&#34;&gt;introduction to Linux&lt;/a&gt;, useful to
understand how Docker works and how to interact with Docker.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;books&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Books&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Schenker, Gabriel. Learn Docker - &lt;em&gt;Fundamentals of Docker 18.x.&lt;/em&gt; Packt Publishing,. Print.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Surianarayanan, C., &amp;amp; Chelliah, P. R. (2019). &lt;em&gt;Essentials of Cloud Computing: A Holistic Perspective.&lt;/em&gt; Springer Nature.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Description</title>
      <link>/courses/databases/exam/project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/databases/exam/project/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;p&gt;Soon available.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lectures</title>
      <link>/courses/databases/lectures/lectures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/databases/lectures/lectures/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;lecture-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lecture 1&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: An introduction to database systems and data modeling.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Tuesday 15 September 2020, 9:00 AM - 12 PM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;: Available on &lt;a href=&#34;https://centralesupelec.edunao.com/mod/resource/view.php?id=20061&#34; target=&#34;_blank&#34;&gt;Edunao&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lecture-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lecture 2&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Normalization theory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Tuesday 29 September 2020, 9:00 AM - 12 PM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;: Available soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lecture-3&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lecture 3&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Relational database management systems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Tuesday 6 October 2020, 9:00 AM - 12 AM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;: Available soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lecture-4&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lecture 4&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Advanced database concepts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Tuesday 13 October 2020, 9:00 AM - 12 AM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;: Available soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lecture-5&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lecture 5&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Distributed databases and NoSQL.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Tuesday 20 October 2020, 9:00 AM - 12 AM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;: Available soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lecture-6&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lecture 6&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Document-oriented databases: MongoDB.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Tuesday 3 November 2020, 9:00 AM - 12 AM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;: Available soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lecture-7&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Lecture 7&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Graph databases: Neo4j.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date and time&lt;/strong&gt;: Tuesday 10 November 2020, 9:00 AM - 12 AM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;: Available soon.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>References</title>
      <link>/courses/databases/references/cc-references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/databases/references/cc-references/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Date, Christopher John. &lt;em&gt;An introduction to database systems&lt;/em&gt;. Pearson Education India, 2004.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hoffer, Jeffrey A., Venkataraman Ramesh, and Heikki Topi. &lt;em&gt;Modern database management&lt;/em&gt;. Pearson, 2016&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Garcia-Molina, Hector, Jeffrey D. Ullman and Jennifer Widom. &lt;em&gt;Database systems: the complete book&lt;/em&gt;. Pearson Education India, 2008.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bradshaw, Shannon, Eoin Brazil, and Kristina Chodorow. &lt;em&gt;MongoDB: The Definitive Guide: Powerful and Scalable Data Storage&lt;/em&gt;. O’Reilly Media, 2019.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Robinson, Ian, Jim Webber, and Emil Eifrem. &lt;em&gt;Graph databases&lt;/em&gt;. &amp;quot; O’Reilly Media, Inc.&amp;quot;, 2013.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker Cheat Sheet</title>
      <link>/courses/cloud-computing/references/docker-cheat-sheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/references/docker-cheat-sheet/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-run-containers&#34;&gt;Run containers&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Docker command:&lt;/strong&gt; &lt;code&gt;docker run [options] image-name [command] [arg]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Running a container from the image &lt;em&gt;alpine&lt;/em&gt;.&lt;/p&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;docker run image-name&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;docker run image-name command&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;docker run image-name command arg&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker run alpine&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker run alpine ls&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker run alpine ping 192.168.3.1&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Common options:&lt;/strong&gt;&lt;/p&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Remove the container when it exits&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Give the container a name&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Allocate a terminal for the container&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker run --rm alpine&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker run --name toto alpine&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker run -it alpine&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Mount &lt;em&gt;data-volume&lt;/em&gt; at &lt;em&gt;/data&lt;/em&gt;&lt;/strong&gt;**
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Container port –&amp;gt; random host port&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Host port 8080 –&amp;gt; container port 80&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker run -v data-volume:/data alpine&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker run --P alpine&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker run -p 8080:80 alpine&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Attach container to network&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker run --network mynet alpine&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-manage-containers&#34;&gt;Manage containers&lt;/h1&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;List all containers&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;List running containers&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Stop a container&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker container ls -a&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker container ls&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker stop my-container&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Remove a container&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove all stopped containers&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Start a container&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker container rm  my-container&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker container prune&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker start my-container&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Start a container (I/O)&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Inspect changes in a container&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Create image from container&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker start -ai my-container&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker  diff my-container&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker commit my-container new-image&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-build-images&#34;&gt;Build images&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Docker command:&lt;/strong&gt; &lt;code&gt;docker build [OPTIONS] PATH | URL&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example.&lt;/strong&gt; Building an image from a Dockerfile in the current directory:
&lt;code&gt;docker build .&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The command assumes that a file named &lt;em&gt;Dockerfile&lt;/em&gt; is in the current directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Common options:&lt;/strong&gt;&lt;/p&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Tag the image&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Name of the Dockerfile&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker build -t my-image:latest .&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker build -f my-dockerfile .&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-manage-image&#34;&gt;Manage images&lt;/h1&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;List all images&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;List images (no intermediate)&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove an image&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker image ls -a&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker image ls&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker image rm my-image&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Remove dangling images&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove unused images&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Show the history of an image&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker image prune&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker image prune -a&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker history my-image&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-dockerfile&#34;&gt;Dockerfile&lt;/h1&gt;
&lt;p&gt;In a &lt;strong&gt;Dockerfile&lt;/strong&gt; the following main keywords
are used:&lt;/p&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;FROM base-image&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;FROM scratch&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;RUN cmd&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
Specifies the base image
&lt;/td&gt;
&lt;td&gt;
No base image used
&lt;/td&gt;
&lt;td&gt;
Runs a command
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;COPY src dst&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;ADD src dst&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;WORKDIR dir&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
Copy source file to destination
&lt;/td&gt;
&lt;td&gt;
Copy source file (including URL and TAR) to destination
&lt;/td&gt;
&lt;td&gt;
Sets the working directory
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;ENTRYPOINT cmd&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;CMD params&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;EXPOSE port&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
Command to execute when container is run
&lt;/td&gt;
&lt;td&gt;
Parameters of the entrypoint command
&lt;/td&gt;
&lt;td&gt;
Exposes a container port
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-volumes&#34;&gt;Volumes&lt;/h1&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Create a volume&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove a volume&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove unused volumes&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker volume create my-volume&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker volume rm my-volume&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker volume prune&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;List volumes&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker volume ls&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;infobox cheat&#34;&gt;
&lt;h1 id=&#34;cheat-sheet-networks&#34;&gt;Networks&lt;/h1&gt;
&lt;table class=&#34;infobox-content&#34;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Create a network&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove a network&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Remove unused networks&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker network create my-network&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker network rm my-network&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker network prune&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;List all the networks&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Inspect a network&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Connect a container to a network&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;docker network ls&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker network inspect my-network&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;docker network connect my-network my-container&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Docker primer</title>
      <link>/courses/cloud-computing/references/docker-primer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/references/docker-primer/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This page is still under construction&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Introduction&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; is defined as
&lt;a href=&#34;https://docs.docker.com/engine/docker-overview/&#34; target=&#34;_blank&#34;&gt;“an open platform for developing,
shipping and running applications”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to understand the importance of Docker in software development, it is useful
to make an analogy to the transportation industry &lt;span class=&#34;citation&#34;&gt;(Schenker 2018)&lt;/span&gt;.
Before the advent of &lt;em&gt;containers&lt;/em&gt;, goods were packaged in
boxes of different types and dimensions.
As a result, loading and unloading the merchandise from
ships or trucks was a long and tedious
task, because each package needed to be handled in a different way.
Containers, on the other hand, have standard dimensions and thus the process of loading/unloading them
could be standardized as well.&lt;/p&gt;
&lt;p&gt;Similarly, before the advent of Docker,
the development and deployment of a new software application in
an enterprise was extremely complicated.
Different teams of &lt;em&gt;developers&lt;/em&gt; would produce different types of applications
that the &lt;em&gt;operations engineers&lt;/em&gt; would need to install on production servers.
The deployment procedure would depend on the type
of the application; deploying a Python application is not the same
as deploying a Java application.
Moreover, applications usually rely on external libraries that need to be installed
on the production server;
sometimes, two applications may depend on different versions of the same library
that might not be completely compatible between each other.&lt;/p&gt;
&lt;p&gt;Docker addresses this issue by providing the ability of packaging software applications
with all their dependencies into isolated environments called, not suprisingly, &lt;strong&gt;containers&lt;/strong&gt;.
The operations engineers don’t need to know the dependencies of each application, they just see
the container as a black box that can be handled in a standardized way,
regardless of the application it contains.&lt;/p&gt;
&lt;div class=&#34;infobox curiosity&#34;&gt;
&lt;p&gt;&lt;strong&gt;Did you know?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The word &lt;em&gt;docker&lt;/em&gt; refers to a worker whose task is loading and unloading goods from a mean of
transportation, such as a truck, train, ship or airplanes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-are-containers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; What are containers?&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;container&lt;/strong&gt; packages a piece of software with all
its dependencies.
In order to run the application in the container, it suffices to run
the container, with no other action.&lt;/p&gt;
&lt;div class=&#34;infobox definitionbox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;definition&#34;&gt;
&lt;p&gt;&lt;span id=&#34;def:unnamed-chunk-1&#34; class=&#34;definition&#34;&gt;&lt;strong&gt;Definition 1.1  &lt;/strong&gt;&lt;/span&gt;
A &lt;strong&gt;container&lt;/strong&gt;
is a standard unit of software
that packages up code and all its dependencies
so the application runs quickly and reliably from one
computing environment to another.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Figure &lt;a href=&#34;#fig:docker-container&#34;&gt;1.1&lt;/a&gt; shows some examples of
Docker containers.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:docker-container&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/docker-primer/container.png&#34; alt=&#34;Example of Docker containers&#34; width=&#34;100%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1.1: Example of Docker containers
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The container &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; includes the source code of a Python application, the
Python interpreter and all the Python libraries necessary to
run the application.
This container can be run on any machine where Docker is installed;
no need to install the Python interpreter and the
libraries, since they are already included in the container.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Good to know&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As we’ll explain later, a container is
created from a template called &lt;strong&gt;image&lt;/strong&gt;.
All containers created from an image
built on a specific hardware
architecture (e.g., on a x86 machine with a processor
that is compatible with Intel 8086 and its successors) can only
be run on machines with the same architecture.
In other words, we cannot
run a container on a Raspberry PI if that container has
been created from an image built on a x86 architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The container &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; in Figure &lt;a href=&#34;#fig:docker-container&#34;&gt;1.1&lt;/a&gt;
includes a PHP application
that interacts with a MySQL database; the container includes
the PHP environment necessary to run the application and
the DBMS MySQL.
Finally, the container &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; includes a binary file compiled from a
program written in C and a minimal Linux distribution, called
Linux Alpine, necessary to run the binary file.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hows-a-container-different-from-a-virtual-machine&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; How’s a container different from a virtual machine?&lt;/h2&gt;
&lt;p&gt;A virtual machine is another effective way to package
an application with all its dependencies.
Similarly to a container, a virtual machine can be ported
to any machine and easily deployed.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:vm-containers&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/docker-primer/vm-containers.png&#34; alt=&#34;Virtual machines Vs containers&#34; width=&#34;100%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1.2: Virtual machines Vs containers
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The main difference between a virtual machine and a
container (Figure &lt;a href=&#34;#fig:vm-containers&#34;&gt;1.2&lt;/a&gt;)
is that the former always includes an operating system,
while the latter is run on the operating system of the host machine;
as a result, a container doesn’t need to include an operating system
and, therefore, is much lighter than a virtual machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-an-image&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; What is an image?&lt;/h2&gt;
&lt;p&gt;An &lt;strong&gt;image&lt;/strong&gt; is a read-only template that contains
the files and the instructions necessary to create and run
containers.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:image&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/docker-primer/image.png&#34; alt=&#34;A Docker image&#34; width=&#34;50%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1.3: A Docker image
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The image in Figure &lt;a href=&#34;#fig:image&#34;&gt;1.3&lt;/a&gt; contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A file &lt;em&gt;main.py&lt;/em&gt; with the source code of a Python application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A full-blown Python interpreter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All Python libraries necessary to run the Python application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The command to execute (&lt;code&gt;python main.py&lt;/code&gt;) when a container is
run from this image.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;how-does-docker-work&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4&lt;/span&gt; How does Docker work?&lt;/h2&gt;
&lt;p&gt;Docker is based on a &lt;strong&gt;client-server architecture&lt;/strong&gt; (Figure &lt;a href=&#34;#fig:docker-architecture&#34;&gt;1.4&lt;/a&gt;).
The &lt;em&gt;client&lt;/em&gt; is any application capable of interacting
with Docker.
Docker provides a command-line interface (CLI)
allowing the user to enter commands to run
containers (&lt;code&gt;docker run&lt;/code&gt;), build images (&lt;code&gt;docker build&lt;/code&gt;)
or download images from a register (&lt;code&gt;docker pull&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:docker-architecture&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/docker-primer/docker-architecture.svg&#34; alt=&#34;[Docker architecture](https://docs.docker.com/engine/docker-overview/)&#34; width=&#34;100%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1.4: &lt;a href=&#34;https://docs.docker.com/engine/docker-overview/&#34;&gt;Docker architecture&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The client talks to the &lt;strong&gt;Docker daemon&lt;/strong&gt;,
a background process that manages Docker objects
such as containers and images.
More specifically, the Docker daemon can download images
from a special repository called a &lt;strong&gt;registry&lt;/strong&gt; and creates and runs
containers from those images.
There exist public and private Docker registries.
As of the time writing, examples of public registries include
&lt;a href=&#34;https://hub.docker.com/_/registry&#34;&gt;Docker Hub&lt;/a&gt;,
&lt;a href=&#34;https://cloud.google.com/container-registry&#34;&gt;Google&lt;/a&gt;,
&lt;a href=&#34;https://aws.amazon.com/ecr/&#34;&gt;Amazon AWS&lt;/a&gt; and
&lt;a href=&#34;https://azure.microsoft.com/en-us/services/container-registry/&#34;&gt;Microsoft Azure&lt;/a&gt;.
If not instructed otherwise,
the Docker daemon is configured to search for images in the Docker Hub registry.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;high-level-docker-architecture&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.5&lt;/span&gt; High-level Docker architecture&lt;/h2&gt;
&lt;p&gt;The high-level Docker architecture is shown in Figure &lt;a href=&#34;#fig:docker&#34;&gt;1.5&lt;/a&gt;.
At the top stands the &lt;strong&gt;Docker engine&lt;/strong&gt;, a client-server application
for building and containerizing applications.
The Docker engine includes
the Docker daemon (the server), the Docker CLI (the client) and a REST API
used by the client and the server to communicate (Fig. &lt;a href=&#34;#fig:docker-engine&#34;&gt;1.6&lt;/a&gt;).
The Docker engine manages all Docker objects, such as containers, images,
network and volumes (that we’ll discuss later) by using two tools,
namely &lt;strong&gt;containerd&lt;/strong&gt; and &lt;strong&gt;runc&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:docker&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/docker-primer/docker.png&#34; alt=&#34;High-level Docker architecture&#34; width=&#34;60%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1.5: High-level Docker architecture
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;containerd&lt;/strong&gt; is an &lt;a href=&#34;https://github.com/containerd/containerd&#34; target=&#34;_blank&#34;&gt;industry-standard &lt;strong&gt;container runtime&lt;/strong&gt;&lt;/a&gt;
that manages the complete container lifecycle, including
image transfer and storage,
container execution and supervision, low-level storage and network attachments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;runc&lt;/strong&gt; is a command-line tool invoked by &lt;strong&gt;containerd&lt;/strong&gt; to run containers
with the proper parameters.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:docker-engine&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/docker-primer/docker-engine.png&#34; alt=&#34;Docker engine&#34; width=&#34;60%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1.6: Docker engine
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Docker engine is built on top of several features of the Linux kernel.&lt;/p&gt;
&lt;p&gt;The Linux &lt;strong&gt;namespaces&lt;/strong&gt; are used to partition the system resources
(such as files, usernames, hostnames, network interfaces)
so that a process can only see the resources in one partition and
cannot interfere with the ones in other partitions.
In other words, namespaces provide the mechanism to isolate
containers from one another; when a container runs, it is not
aware that the others are even existing.&lt;/p&gt;
&lt;p&gt;While namespaces are used to partition software resources in the system, &lt;strong&gt;control groups&lt;/strong&gt; (or, &lt;strong&gt;cgroups&lt;/strong&gt;)
are used to limit the access
to the hardware resources, such as the processor or the memory.&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;layer capabilities&lt;/strong&gt; are a set of features that support
layered filesystems used to build Docker images.&lt;/p&gt;
&lt;p&gt;Although Linux must be entirely credited for setting up
the technology necessary to implement containers,
Docker had the merit of bringing this technology to
the end user.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-on-macos-and-windows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.6&lt;/span&gt; Docker on macOS and Windows&lt;/h2&gt;
&lt;p&gt;Although Docker rests
on the shoulders of Linux, it can be
used on macOS and Windows as well.&lt;/p&gt;
&lt;p&gt;On these two systems, Docker comes with two flavours: &lt;strong&gt;Docker Toolbox&lt;/strong&gt; and
&lt;strong&gt;Docker Desktop&lt;/strong&gt;.
The &lt;a href=&#34;https://docs.docker.com/toolbox/&#34; target=&#34;_blank&#34;&gt;Docker Toolbox&lt;/a&gt;
is a version that is maintained for older
macOS and Windows systems (Figure &lt;a href=&#34;#fig:docker-for-mac&#34;&gt;1.7&lt;/a&gt;).
It installs a Linux virtual machine by using VirtualBox as the hypervisor
on top of which runs the Docker engine.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:docker-for-mac&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/docker-primer/docker-for-mac.png&#34; alt=&#34;Docker for macOS&#34; width=&#34;60%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1.7: Docker for macOS
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Docker Desktop for macOS also uses a Linux virtual machine,
built with &lt;a href=&#34;https://github.com/linuxkit/linuxkit&#34; target=&#34;_blank&#34;&gt;LinuxKit&lt;/a&gt;,
but it uses Hyperkit, an hypervisor built by using a virtualization
framework provided by the operating system (Figure &lt;a href=&#34;#fig:docker-for-mac&#34;&gt;1.7&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:docker-for-windows&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/docker-primer/docker-for-windows.png&#34; alt=&#34;Docker for Windows&#34; width=&#34;90%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1.8: Docker for Windows
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Docker Toolbox on Windows has the same architecture as in macOS,
with a Linux virtual machine in VirtualBox (Figure &lt;a href=&#34;#fig:docker-for-windows&#34;&gt;1.8&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Windows Server 2016 and higher natively supports Docker; this means that the
Windows Server kernel has added the necessary functionalities to implement
the containers (namespaces, cgroupes and layer capabilities).&lt;/p&gt;
&lt;p&gt;Docker Desktop for Windows (for Windows Professional, Enterprise, or Education)
runs containers in virtual machines called &lt;em&gt;Hyper-V containers&lt;/em&gt;,
using Hyper-V, the native hypervisor provided by Windows.
An Hyper-V container includes
a minimal version of a Windows or Linux kernel, depending on whether
a Windows or Linux Docker container is run.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;running-containers&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Running containers&lt;/h1&gt;
&lt;p&gt;The command used to run a container
is &lt;code&gt;docker run&lt;/code&gt; followed by four parameters:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run [options] image-name [command] [arg]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The four parameters are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;options&lt;/em&gt;. List of options.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;image-name&lt;/em&gt;. The fully qualified name of the image used to run the container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;command&lt;/em&gt;. The command to be executed in the container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;arg&lt;/em&gt;. The arguments taken by the command executed in the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only the parameter &lt;em&gt;image-name&lt;/em&gt; is mandatory.&lt;/p&gt;
&lt;div id=&#34;fully-qualified-image-names&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Fully-qualified image names&lt;/h2&gt;
&lt;p&gt;The fully qualified name of an image is specified
as a sequence of four fields, formatted as follows:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;registry_url/user/name:tag&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;registry_url&lt;/em&gt; (optional). The URL of the registry that provides the image.
If its value is not specified, the image
will be looked up for in the
&lt;a href=&#34;https://hub.docker.com&#34; target=&#34;_blank&#34;&gt;DockerHub registry&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;user&lt;/em&gt; (optional). The identifier of the user or organization that created the image.
The default value is &lt;em&gt;library&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;name&lt;/em&gt; (mandatory). The name of the image.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tag&lt;/em&gt; (optional). It specifies the image version.
If its value is not specified,
the tag &lt;em&gt;latest&lt;/em&gt; is used, pointing to the latest image version.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An image can be associated to several tags.
For instance, the version 18.04 of the&lt;br /&gt;
&lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34; target=&#34;_blank&#34;&gt;ubuntu image&lt;/a&gt;
on the DockerHub registry is associated with the tags
&lt;em&gt;18.04&lt;/em&gt;, &lt;em&gt;bionic-20200403&lt;/em&gt; and &lt;em&gt;bionic&lt;/em&gt;.
The following names can be used to refer to that version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;registry.hub.docker.com/library/ubuntu:bionic-20200403 
registry.hub.docker.com/library/ubuntu:18.04 
ubuntu:bionic&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evidently, one would always choose the last name, as it is shorter.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-happens-when-we-run-a-container&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; What happens when we run a container?&lt;/h2&gt;
&lt;p&gt;The command &lt;code&gt;docker run&lt;/code&gt; is a &lt;em&gt;wrapper&lt;/em&gt; for (i.e., uses behind the scenes)
three Docker commands: &lt;code&gt;docker pull&lt;/code&gt;, &lt;code&gt;docker create&lt;/code&gt; and &lt;code&gt;docker start&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s see what happens when we execute the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run hello-world&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Docker daemon goes through the following steps (Figure &lt;a href=&#34;#fig:docker-run-actions&#34;&gt;2.1&lt;/a&gt;):&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Look for an image called &lt;em&gt;hello-world&lt;/em&gt; in the host computer.&lt;/li&gt;
&lt;li&gt;If the image is found, go to step 6.&lt;/li&gt;
&lt;li&gt;Otherwise, look for an image called &lt;em&gt;hello-world&lt;/em&gt; in the DockerHub registry.&lt;/li&gt;
&lt;li&gt;If the image is not found, raise an error and stop.&lt;/li&gt;
&lt;li&gt;Otherwise, &lt;em&gt;pull&lt;/em&gt; (i.e., download) the image from the Dockerhub registry
(using the command &lt;code&gt;docker pull hello-world&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Create a container (&lt;code&gt;docker create --name condescending_liskov hello-world&lt;/code&gt;) from
the image.&lt;/li&gt;
&lt;li&gt;Run the container (&lt;code&gt;docker start condescending_liskov&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:docker-run-actions&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/docker-primer/docker-run-actions.png&#34; alt=&#34;Runinng a Docker container&#34; width=&#34;90%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2.1: Runinng a Docker container
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When we run a container by using the command &lt;code&gt;docker run&lt;/code&gt;,
we can also specify a name for the container with the option &lt;code&gt;--name&lt;/code&gt;;
if we don’t, the Docker daemon will assign a random name obtained by concatenating
an adjective to the name of a famous scientist (e.g., &lt;em&gt;condescending_liskov&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;When the containerized application, that is the application running in the container, stops,
the container is stopped as well.
However, the container is not removed from the host computer.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-list-containers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; How to list containers?&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;single-host-networking&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Single-host networking&lt;/h1&gt;
&lt;div id=&#34;cnm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Container network model&lt;/h2&gt;
&lt;p&gt;In order to let containers communicate and, therefore, co-operate,
Docker defines a simple networking model known as
the &lt;strong&gt;container network model&lt;/strong&gt; (CNM), illustrated
in the following figure.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:cnm&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/docker-primer/cnm.png&#34; alt=&#34;The container network model&#34; width=&#34;100%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 3.1: The container network model
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The figure shows three containers (from left to right, Athos, Porthos and Aramis);
the CNM consists of three elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sandbox.&lt;/strong&gt; It contains
the network configuration of the container, such as IP and MAC addresses, routing tables and
DNS records.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Endpoint.&lt;/strong&gt; Connection between the sandbox and a network.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network.&lt;/strong&gt; Object that provides the function to connect two or more endpoints.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The actual implementation of the network is called a &lt;strong&gt;driver&lt;/strong&gt;.
Docker provides some built-in drivers, such as &lt;em&gt;bridge&lt;/em&gt;, &lt;em&gt;host&lt;/em&gt;, &lt;em&gt;overlay&lt;/em&gt; and &lt;em&gt;null&lt;/em&gt;;
third-party drivers can be used by installing the corresponding plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1 unnumbered&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-Schenker2018&#34;&gt;
&lt;p&gt;Schenker, Gabriel. 2018. &lt;em&gt;Learn Docker - Fundamentals of Docker 18.x&lt;/em&gt;. 1st edition. Packt Publishing,&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Linux</title>
      <link>/courses/cloud-computing/references/linux-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/references/linux-introduction/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This introduction is still under construction.
As of today, it only provides the elements necessary to
have a basic understanding to use Docker.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Introduction&lt;/h1&gt;
&lt;p&gt;Linux is a family of open source &lt;strong&gt;operating systems&lt;/strong&gt; that has
its roots in &lt;strong&gt;Unix&lt;/strong&gt;, an operating system developed in the 1970s
at the Bell Labs research center by, among others, Ken Thompson
and Dennis Ritchie.
For this reason, Linux is said to be a &lt;strong&gt;Unix-like&lt;/strong&gt; operating system.&lt;/p&gt;
&lt;p&gt;A Unix-like operating system is composed of three parts:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;kernel&lt;/strong&gt;. It’s the core of the operating system,
acting as an intermediary between the applications and the
hardware devices. Its tasks include
memory management, process scheduling and input-output management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;shell&lt;/strong&gt;. This is the command-line terminal that acts as an interface
between the user and the kernel.
The shell interprets and executes the commands typed by the user.
Many variants exist of the shell; the default shell provided by
most Linux distributions is called &lt;strong&gt;Bash&lt;/strong&gt;.
Usually, a shell provides some useful functionalities
to the user, including &lt;em&gt;filename completion&lt;/em&gt; (one can type
part of the name of a command or a file and press the Tab key to have the
shell complete it) and the history (list of all commands typed by the user, so
if the user needs to retype a command, s/he can just
use the cursor keys to retrieve it in the history).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;applications&lt;/strong&gt;. These are the user programs running on top
of the operating system (e.g., Firefox).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first Linux kernel has been released as an open source software
by Linus Torvalds on September 17, 1991.
Being open source, the source code can be read, modified
and distributed by anyone under the GNU General Public License.
This has been key to the success and the rapid adoption of Linux.
Since then, many different
Linux &lt;strong&gt;distributions&lt;/strong&gt; have been developed and made available for free;
all distributions are based on the Linux kernel, they mainly differ
in the applications and tools they provide.
Some of the most popular are Ubuntu, Debian and Fedora.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-directory-structure&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; The directory structure&lt;/h1&gt;
&lt;p&gt;In Linux all files are organized in a hierarchical file system
that can be represented as a tree (Figure &lt;a href=&#34;#fig:linux-filesystem&#34;&gt;2.1&lt;/a&gt;).
At the top of the hierarchy stands a special directory called
the &lt;strong&gt;root&lt;/strong&gt;, that is usually written as a slash (/).&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:linux-filesystem&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/linux-introduction/linux-filesystem.pdf&#34; alt=&#34;Linux directory structure&#34; width=&#34;100%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2.1: Linux directory structure
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The root directory includes many special directories, such
as &lt;em&gt;boot&lt;/em&gt; (contains configuration files necessary to
boot Linux), &lt;em&gt;lib&lt;/em&gt; (contains shared library files necessary to boot the
system),
&lt;em&gt;bin&lt;/em&gt; (contains user executable files), &lt;em&gt;dev&lt;/em&gt; (contains files that represent
hardware devices) and &lt;em&gt;etc&lt;/em&gt; (contains the local system configuration files).&lt;/p&gt;
&lt;p&gt;Each user is assigned a special directory called &lt;strong&gt;home&lt;/strong&gt;
(i.e., &lt;em&gt;laura&lt;/em&gt;, &lt;em&gt;michel&lt;/em&gt;) that is stored
under the &lt;em&gt;home&lt;/em&gt; directory;
despite its name, the directory named &lt;em&gt;root&lt;/em&gt; is not the root directory, but
the home directory of the user &lt;strong&gt;root&lt;/strong&gt;, that is the administrator of the system.
Each directory (except the root directory /)
has one &lt;strong&gt;parent&lt;/strong&gt; directory and zero or many &lt;strong&gt;children&lt;/strong&gt; directories.
For instance, the parent directory of &lt;em&gt;home&lt;/em&gt; is the root directory / and
its children directories are &lt;em&gt;laura&lt;/em&gt; and &lt;em&gt;michel&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When a user (e.g., Laura) logs in the system and opens a shell,
her &lt;strong&gt;working directory&lt;/strong&gt; (i.e., the directory where she finds herself in)
is her home directory.
From there, Laura can type any Linux command and reference any
file or directory in the file system (if she has the necessary rights).
In Linux, Laura has two ways to specify the name of a directory or a file:
absolute paths or relative paths.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;absolute path&lt;/strong&gt; to a file or directory is
the full path of that file or directory in the
tree hierarchy starting from the root.
If Laura types the command &lt;code&gt;pwd&lt;/code&gt; (i.e., &lt;strong&gt;p&lt;/strong&gt;rint &lt;strong&gt;w&lt;/strong&gt;orking &lt;strong&gt;d&lt;/strong&gt;irectory), as
in Figure &lt;a href=&#34;#fig:user-pwd&#34;&gt;2.2&lt;/a&gt;, she’ll get the absolute path &lt;em&gt;/home/laura&lt;/em&gt; of her home
directory.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:user-pwd&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/courses/cloud-computing/linux-introduction/user-pwd.png&#34; alt=&#34;Home and current directory&#34; width=&#34;60%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2.2: Home and current directory
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Referring to Figure &lt;a href=&#34;#fig:linux-filesystem&#34;&gt;2.1&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the absolute path of the file &lt;em&gt;meeting.txt&lt;/em&gt; is &lt;em&gt;/home/laura/work/meeting.txt&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;the absolute path of the file &lt;em&gt;family.jpg&lt;/em&gt; is &lt;em&gt;/home/laura/personal/family.jpg&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;the absolute path of the directory &lt;em&gt;michel&lt;/em&gt; is &lt;em&gt;/home/michel&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;relative path&lt;/strong&gt; to a file or a directory is
given with respect to the working directory.
In order to specify a relative path, Laura might need to use
the symbol “.”, that indicates the working directory,
and “..”, that indicates the parent of the working directory.
If Laura wants to reference the file &lt;em&gt;family.jpg&lt;/em&gt; and her working directory is
&lt;em&gt;/home/laura&lt;/em&gt;, she’ll type &lt;em&gt;../personal/family.jpg&lt;/em&gt;.
If Laura wants to reference the file &lt;em&gt;meeting.txt&lt;/em&gt;,
she’ll type &lt;em&gt;./meeting.txt&lt;/em&gt;, or simply &lt;em&gt;meeting.txt&lt;/em&gt;, as any path is relative to the
current directory, if Laura doesn’t specify otherwise.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-1&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.1  &lt;/strong&gt;&lt;/span&gt;
If Laura’s current directory is &lt;em&gt;/etc&lt;/em&gt;, what would&lt;br /&gt;
the relative path of the file &lt;em&gt;/home/laura/work/meeting.txt&lt;/em&gt; be?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;&lt;em&gt;../home/laura/work/meeting.txt&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;useful-linux-commands&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Useful Linux commands&lt;/h1&gt;
&lt;p&gt;Linux provides many useful commands to navigate the file system and
manipulate files and directories.&lt;/p&gt;
&lt;div id=&#34;pwd&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; pwd&lt;/h2&gt;
&lt;p&gt;pwd stands for &lt;strong&gt;p&lt;/strong&gt;rint &lt;strong&gt;w&lt;/strong&gt;ork &lt;strong&gt;d&lt;/strong&gt;irectory.
It returns the absolute path of the working directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ls&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; ls&lt;/h2&gt;
&lt;p&gt;Used to list the content of the working directory.
The command has several options, in particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ls -l&lt;/code&gt;. Show a detailed view of the content of the working directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls -a&lt;/code&gt;. Includes the hidden files in the working directory.
In Linux, all files whose name begins with “.” are hidden.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;cd&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3&lt;/span&gt; cd&lt;/h2&gt;
&lt;p&gt;cd stands for &lt;strong&gt;c&lt;/strong&gt;hange &lt;strong&gt;d&lt;/strong&gt;irectory;
the command is used to change
working directory.&lt;/p&gt;
&lt;p&gt;If Laura’s working directory is &lt;em&gt;/home/laura&lt;/em&gt;
and she wants to move to the directory &lt;em&gt;work&lt;/em&gt; she’ll type the
following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;cd work&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If she wants to return to her home directory, she’ll type:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;cd ..&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;mkdir&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.4&lt;/span&gt; mkdir&lt;/h2&gt;
&lt;p&gt;mkdir stands for “make directory”.
This command is used to create a new directory.&lt;/p&gt;
&lt;p&gt;Suppose that Laura’s working directory is &lt;em&gt;/home/laura&lt;/em&gt;;
in order to create a new directory &lt;em&gt;/home/laura/videos&lt;/em&gt;, she’ll type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir videos&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If she wants to create a new directory &lt;em&gt;/home/laura/videos/birthday&lt;/em&gt;, she’ll type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir videos/birthday&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rm&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.5&lt;/span&gt; rm&lt;/h2&gt;
&lt;p&gt;This command is used to remove a file or a directory.
Suppose Laura’s working directory is &lt;em&gt;/home/laura&lt;/em&gt;.
In order to remove the file &lt;em&gt;meeting.txt&lt;/em&gt;, she’ll type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm meeting.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If she wants to remove a directory (for example &lt;em&gt;videos&lt;/em&gt;),
she’ll type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -r videos&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will delete the directory &lt;em&gt;videos&lt;/em&gt; and all its content.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cat&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.6&lt;/span&gt; cat&lt;/h2&gt;
&lt;p&gt;This command is useful for different tasks.
One possible use is to show the content of a file.
If Laura types:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat meeting.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;she’ll get the content of the file &lt;em&gt;meeting.txt&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;echo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.7&lt;/span&gt; echo&lt;/h2&gt;
&lt;p&gt;This command writes to the screen whatever Laura gives it as a parameter.
If Laura types:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo hello world&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the command will print the string “hello world”.
Although this might not sound very useful,
the command &lt;code&gt;echo&lt;/code&gt; comes in handy when combined with
others.
For instance, if Laura types:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo hello world &amp;gt; hello.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a new file named &lt;em&gt;hello.txt&lt;/em&gt; is created in
the working directory containing the string
“hello world”.
This is a very useful way to create a new file with some content.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cp&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.8&lt;/span&gt; cp&lt;/h2&gt;
&lt;p&gt;This command is used to create a copy of a file or directory.
Suppose that Laura’s working directory is &lt;em&gt;/home/laura&lt;/em&gt;.
If she types:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp meeting.txt ./personal&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a new copy of &lt;em&gt;meeting.txt&lt;/em&gt; is created in the directory
&lt;em&gt;/home/laura/personal&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;mv&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.9&lt;/span&gt; mv&lt;/h2&gt;
&lt;p&gt;This command is used to move a file or directory.
Suppose that Laura’s current directory is &lt;em&gt;/home/laura&lt;/em&gt; that contains
two children directories named &lt;em&gt;personal&lt;/em&gt; and &lt;em&gt;videos&lt;/em&gt;.
If Laura wants to move the directory &lt;em&gt;videos&lt;/em&gt; under &lt;em&gt;personal&lt;/em&gt;, she’ll type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv videos personal&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data modeling</title>
      <link>/courses/databases/tutorials/data-modeling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/databases/tutorials/data-modeling/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this tutorial you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to run &lt;strong&gt;containers&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to define and build &lt;strong&gt;images&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to create and use &lt;strong&gt;volumes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to define and use &lt;strong&gt;networks&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Having installed Docker on your computer.
See the &lt;a href=&#34;/courses/cloud-computing/overview/installing-docker&#34; target=&#34;_blank&#34;&gt;installation guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Being familiar with the notions of containers, images,
volumes and networks in Docker.
See the &lt;a href=&#34;/courses/cloud-computing/references/docker-primer&#34; target=&#34;_blank&#34;&gt;Docker primer&lt;/a&gt;
for an introduction.&lt;/li&gt;
&lt;li&gt;Being familiar with the &lt;a href=&#34;/courses/cloud-computing/references/linux-introduction&#34; target=&#34;_blank&#34;&gt;basic notions of Linux&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Don’t hesitate to look at the &lt;a href=&#34;/courses/cloud-computing/references/docker-cheat-sheet&#34; target=&#34;_blank&#34;&gt;Docker cheat sheet&lt;/a&gt;
to verify the syntax of the Docker commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Terminology&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You’ll use the &lt;strong&gt;terminal&lt;/strong&gt; to run Docker commands.
Referring to the
&lt;a href=&#34;/courses/cloud-computing/references/docker-primer#fig:docker-architecture&#34; target=&#34;_blank&#34;&gt;Docker architecture&lt;/a&gt;,
the terminal is the &lt;strong&gt;client&lt;/strong&gt; that communicates with
the Docker daemon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker runs &lt;strong&gt;containers&lt;/strong&gt; on your computer.
We’ll refer to your computer as the &lt;strong&gt;host&lt;/strong&gt;,
the containers being the &lt;strong&gt;guests&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;containerized application&lt;/strong&gt;
is an application running in a container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;running&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Running containers&lt;/h1&gt;
&lt;p&gt;The command used to run a container
is &lt;code&gt;docker run&lt;/code&gt; followed by four parameters:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run [options] image-name [command] [arg]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The four parameters are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;options&lt;/em&gt;. List of options.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;image-name&lt;/em&gt;. The fully qualified name of the image used to run the container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;command&lt;/em&gt;. The command to be executed in the container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;arg&lt;/em&gt;. The arguments taken by the command executed in the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only the parameter &lt;em&gt;image-name&lt;/em&gt; is mandatory.
The fully qualified name of an image is specified as a sequence of four fields,
formatted as follows:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;registry_url/user/name:tag&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;registry_url&lt;/em&gt; (optional). The URL of the registry that provides the image.
If its value is not specified, the image
will be looked up for in the
&lt;a href=&#34;https://hub.docker.com&#34; target=&#34;_blank&#34;&gt;DockerHub registry&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;user&lt;/em&gt; (optional). The identifier of the user or organization that created the image.
The default value is &lt;em&gt;library&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;name&lt;/em&gt; (mandatory). The name of the image.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tag&lt;/em&gt; (optional). It specifies the image version.
If its value is not specified,
the tag &lt;em&gt;latest&lt;/em&gt; is used, pointing to the latest image version.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-1&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.1  &lt;/strong&gt;&lt;/span&gt;
For each of the following images,
specify the registry name, the user, the name and the tag.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;registry.redhat.io/rhel8/mysql-80&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;alpine:3.11&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;alpine&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Registry: &lt;em&gt;registry.redhat.io&lt;/em&gt;, user: &lt;em&gt;rhel8&lt;/em&gt;, name: &lt;em&gt;mysql-80&lt;/em&gt;,
tag: &lt;em&gt;latest&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Registry: &lt;em&gt;DockerHub&lt;/em&gt;, user: &lt;em&gt;library&lt;/em&gt;, name: &lt;em&gt;alpine&lt;/em&gt;, tag: &lt;em&gt;3.11&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Registry: &lt;em&gt;DockerHub&lt;/em&gt;, user: &lt;em&gt;library&lt;/em&gt;, name: &lt;em&gt;alpine&lt;/em&gt;, tag: &lt;em&gt;latest&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-2&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.2  &lt;/strong&gt;&lt;/span&gt;What’s the difference between the following image names?&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;alpine:latest&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;registry.hub.docker.com/library/alpine&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;alpine&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;There’s no difference. They all point to the same image, that is
the latest version of &lt;em&gt;alpine&lt;/em&gt; in the DockerHub registry.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;We now learn how to use the command &lt;code&gt;docker run&lt;/code&gt; and some of
its options.
In the following exercises, we’ll run containers from the image named
&lt;em&gt;alpine&lt;/em&gt; that is
&lt;a href=&#34;https://hub.docker.com/_/alpine&#34; target=&#34;_blank&#34;&gt;available on the DockerHub registry&lt;/a&gt;.
This image provides a lightweight distribution
(i.e., it doesn’t contain many features) of Linux.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-3&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.3  &lt;/strong&gt;&lt;/span&gt;You want to run the container from the latest version of
the image &lt;em&gt;alpine&lt;/em&gt;.
Which command would you write in the terminal?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The goal of this exercise is to start playing with the
&lt;code&gt;docker run&lt;/code&gt; command.
Since the question doesn’t say anything about the
options, nor does it mention the command to run inside the container,
we’d type:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run alpine&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-4&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.4  &lt;/strong&gt;&lt;/span&gt;Execute the command that you proposed in the previous exercise,
observe the output in the terminal and explain the actions
taken by Docker to run the container.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The output obtained from executing the command should
look like as follows:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;Unable to find image &amp;#39;alpine:latest&amp;#39; locally
latest: Pulling from library/alpine
aad63a933944: Pull complete 
Digest: sha256:b276d875eeed9c7d3f1cfa7edb06b22ed22b14219a7d67c52c56612330348239
Status: Downloaded newer image for alpine:latest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what happens under the hood:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Docker looks for an image named &lt;em&gt;alpine:latest&lt;/em&gt; in the host
computer and cannot find it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker &lt;em&gt;pulls&lt;/em&gt; (i.e., downloads) the image from the DockerHub registry.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Okay but &lt;strong&gt;where’s the result of running the container?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First of all, let’s see if the container is still running in the first
place.
In order to list all containers still running on the host, type the
following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container ls &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your container shouldn’t appear in the output,
because it’s not running.
In order to see all containers, including those that are not
running, type the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container ls -a&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-5&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.5  &lt;/strong&gt;&lt;/span&gt;What information is displayed for each container?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The identifier of the container.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The name of the image used to run the container (it should be &lt;em&gt;alpine&lt;/em&gt; for your
container).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The command executed within the container (it should be &lt;code&gt;/bin/sh&lt;/code&gt; for your container).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the container has been created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The container current status (it should be &lt;em&gt;exited (0) x seconds ago&lt;/em&gt; for your container).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The network ports used by the container (we’ll study them later).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The name of the container. If you don’t specify any when you
run the container (as is our case),
Docker generates a random name by concatenating an adjective and
a famous scientist’s name (e.g., &lt;em&gt;agitated_newton&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-6&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.6  &lt;/strong&gt;&lt;/span&gt;By looking at the command executed within the container (&lt;code&gt;/bin/sh&lt;/code&gt;),
can you tell why the container stopped without giving any output?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The command is &lt;code&gt;/bin/sh&lt;/code&gt;;
the container runs a Linux terminal.
But since we didn’t specify what to do with that terminal
(we didn’t run any Linux command, nor we tried to access the terminal),
the container stopped.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;We’re now going to do something useful with the image &lt;em&gt;alpine&lt;/em&gt;.
But first, we start with some good practices that you should
adopt while playing with images and containers.&lt;/p&gt;
&lt;div id=&#34;good-practices&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; Good practices&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Name your containers.&lt;/strong&gt; Although Docker assigns a default name to a new container,
it’s usually a good practice to give a container a name of your
choice to make it easily distinguishable. You can do it by using the option
&lt;code&gt;--name&lt;/code&gt;. Try the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --name my-alpine alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As before, the container stops immediately.
If you list all your containers by typing again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker container ls -a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you should see a container named &lt;em&gt;my-alpine&lt;/em&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Remove automatically a container if you use it once.&lt;/strong&gt;
Unless you want to reuse your container later, you can ask Docker to automatically remove it
when it stops by using the option &lt;code&gt;--rm&lt;/code&gt;.
This will prevent unused containers from taking up too much disk space.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Try the following:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm --name container-to-remove alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you list all the containers you should see that there is no container
named &lt;em&gt;container-to-remove&lt;/em&gt;.&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Remove unused containers.&lt;/strong&gt; Stopped containers that have been run without
using the option &lt;code&gt;--rm&lt;/code&gt; are still stored in the host.
If you want to remove a specific
container (e.g., &lt;em&gt;my-alpine&lt;/em&gt;), use the following command:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container rm my-alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to remove all stopped containers, use the
following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container prune&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Remove unused images.&lt;/strong&gt; Images can take up a lot of disk space.
As a result, you should remember to remove those that you don’t intend to use
any longer.
The commands to remove a specific image
and prune unused ones are &lt;code&gt;docker image rm&lt;/code&gt;
and &lt;code&gt;docker image prune -a&lt;/code&gt; respectively.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;pass-a-command-to-the-containerized-application&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; Pass a command to the containerized application&lt;/h2&gt;
&lt;p&gt;Remember that the template of &lt;code&gt;docker run&lt;/code&gt; is the following:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run [options] image-name [command] [arg]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The optional parameter &lt;em&gt;command&lt;/em&gt; refers to a command
that you can pass the containerized application, possibly with some arguments
(parameter &lt;em&gt;arg&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Let’s see an example.
As we saw before, when we run a container from the image &lt;em&gt;alpine&lt;/em&gt;,
a Linux terminal &lt;code&gt;/bin/sh&lt;/code&gt; is launched.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Linux terminal &lt;code&gt;/bin/sh&lt;/code&gt; is run within the
container.
Henceforth, we’ll use the following terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Host terminal.&lt;/strong&gt; The terminal that you use to
interact with the operating system of your computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Guest terminal.&lt;/strong&gt; The terminal that is run within
the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;By using the optional parameter &lt;em&gt;command&lt;/em&gt;, we can run
a command in the guest terminal.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:command-in-guest&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.7  &lt;/strong&gt;&lt;/span&gt;
Run a container from the image &lt;em&gt;alpine&lt;/em&gt; and execute the
Linux command &lt;code&gt;ls&lt;/code&gt; that lists the content of the current directory.&lt;/p&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Where are the listed files stored?
In the host or in the container?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm --name ls-test alpine ls&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The command &lt;code&gt;ls&lt;/code&gt; is run in the guest terminal, therefore
what we see in the output is a list of files stored in the
container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Exercise &lt;a href=&#34;#exr:command-in-guest&#34;&gt;1.7&lt;/a&gt; the command
&lt;code&gt;ls&lt;/code&gt; is executed in the guest terminal, but its
output is redirected to the host terminal.&lt;/p&gt;
&lt;p&gt;In other words, when we run the container, we
don’t interact directly with the guest terminal;
we just send a command and the output is redirected
to the host terminal.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now let’s see how to execute a command in the guest terminal
that also requires an argument.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-7&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.8  &lt;/strong&gt;&lt;/span&gt;By using the Linux utility &lt;code&gt;ping&lt;/code&gt;, check
whether the Web site www.centralesupelec.fr is reachable.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm --name ping-test alpine ping www.centralesupelec.fr&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to interrupt &lt;code&gt;ping&lt;/code&gt;
just type the key combination that you’s use to
interrupt any other command in your terminal.
(typically Ctrl-C on Windows and Cmd-C in MacOs).&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;interacting-with-a-container&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; Interacting with a container&lt;/h2&gt;
&lt;p&gt;An application running in a container might need to interact
with the user.
For instance, the Linux
command &lt;code&gt;rev&lt;/code&gt; reverses whatever
the user types on the keyboard.
In order to interact with a container, you should use the option
&lt;code&gt;-it&lt;/code&gt; of &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-8&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.9  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;em&gt;alpine&lt;/em&gt; to execute the
Linux command &lt;code&gt;rev&lt;/code&gt; and interact with it.
You can stop interacting with &lt;code&gt;rev&lt;/code&gt; by typing Ctrl+C at any time.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm --name rev -it alpine rev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After typing the command, type a word on your keyboard
(e.g., &lt;em&gt;deeps&lt;/em&gt;), press &lt;em&gt;Return&lt;/em&gt; and
you should see the same word reversed (e.g., &lt;em&gt;speed&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;The option &lt;code&gt;-t&lt;/code&gt; opens a guest terminal (so we can see its
output); the option &lt;code&gt;-i&lt;/code&gt; allows you to write directly
into the guest terminal.&lt;/p&gt;
&lt;p&gt;In order to stop using the guest terminal,
you’ll need to press Ctrl+D (both in Windows and MacOs).&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Now run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run  --name my-alpine -it alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; we didn’t use the option &lt;code&gt;--rm&lt;/code&gt; (the container will not be removed
when we stop it, we’re going to use it again).
Moreover, we didn’t specify any command to run in the guest terminal.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-9&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.10  &lt;/strong&gt;&lt;/span&gt;What do you obtain?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;When we run a container from the image &lt;em&gt;alpine&lt;/em&gt;, the command
&lt;code&gt;/bin/sh&lt;/code&gt; is executed within the container.
Since we specified the option &lt;code&gt;-it&lt;/code&gt;, what we obtain is an access to the
Linux terminal running in the container.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;starting-and-stopping-containers.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4&lt;/span&gt; Starting and stopping containers.&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt; is a shorthand for two Docker commands, namely
&lt;code&gt;docker create&lt;/code&gt;, that creates a container from an image,
and &lt;code&gt;docker start&lt;/code&gt;, that starts the container after its creation.&lt;/p&gt;
&lt;p&gt;Suppose now that you want to download a Web page
by using Linux Alpine.
You can use the Linux command &lt;code&gt;wget&lt;/code&gt; followed by the URL of the page
that you want to download.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-10&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.11  &lt;/strong&gt;&lt;/span&gt;By using the guest terminal
in the container &lt;em&gt;my-alpine&lt;/em&gt;,
download
&lt;a href=&#34;https://www.centralesupelec.fr/fr/presentation&#34; target=&#34;_blank&#34;&gt;this Web page&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Where will the Web page be saved? The host computer or the container?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Just type in &lt;em&gt;my-alpine&lt;/em&gt; guest terminal the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;wget https://www.centralesupelec.fr/fr/presentation&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The Web page will be saved in the current directory
of the container. You can verify that the file is there
by typing &lt;code&gt;ls&lt;/code&gt; in the guest terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;In &lt;em&gt;my-alpine&lt;/em&gt; guest terminal type &lt;code&gt;exit&lt;/code&gt;.
This closes the guest terminal and, as a result, stops the
container.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stopping the container will not erase any of the files
stored in the container. Removing the container will.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you want to start the container &lt;em&gt;my-alpine&lt;/em&gt; again, you can
use the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container start -ai my-alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will open the guest terminal of the container again;
type &lt;code&gt;ls&lt;/code&gt; to verify that
the Web page that you downloaded before is still there.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;simple-use-case&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.5&lt;/span&gt; A simple use case&lt;/h2&gt;
&lt;p&gt;Suppose that you need to download all the figures of
&lt;a href=&#34;https://www.centralesupelec.fr/fr/presentation&#34; target=&#34;_blank&#34;&gt;this Web page&lt;/a&gt;.
The Linux utility &lt;code&gt;wget&lt;/code&gt; comes in handy.
However, you don’t have Linux and you’d like to
avoid the hassle of installing it on your computer, or in a virtual machine,
just for this task.&lt;/p&gt;
&lt;p&gt;A great alternative is to run Linux in a Docker container.
Unfortunately, the Alpine distribution that we’ve been playing
with doesn’t provide
an implementation of &lt;code&gt;wget&lt;/code&gt; with all the options that we need.&lt;/p&gt;
&lt;p&gt;We turn to another Linux distribution, &lt;strong&gt;Ubuntu&lt;/strong&gt;,
for which DockerHub has
&lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34; target=&#34;_blank&#34;&gt;several images&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-11&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.12  &lt;/strong&gt;&lt;/span&gt;Run a container with Ubuntu 19.10 and open a guest terminal.
Call the container &lt;em&gt;dl-figures&lt;/em&gt;, and avoid the option
&lt;code&gt;--rm&lt;/code&gt;, we’ll use this container later.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --name dl-figures -it ubuntu:19.10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you look at the DockerHub registry Web page
&lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34; target=&#34;_blank&#34;&gt;describing Ubuntu&lt;/a&gt;,
you’ll see that the version 19.10 has many tags, including &lt;em&gt;19.10&lt;/em&gt;,
&lt;em&gt;eoan-20200313&lt;/em&gt;, &lt;em&gt;eoan&lt;/em&gt;, &lt;em&gt;rolling&lt;/em&gt;.
You can use any of these tags to download the image.
Another way to write the previous command is:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --name dl-figures -it ubuntu:eoan&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;From now on, we’ll be interacting with the guest Ubuntu terminal.
If you type the command &lt;code&gt;wget&lt;/code&gt;,
you’ll get an error (&lt;code&gt;bash: wget: command not found&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The image &lt;em&gt;Ubuntu&lt;/em&gt; doesn’t include all the commands that you’d find
in a full-blown Ubuntu distribution;
the reason is to keep the size of the image small,
a necessary constraint given that
images are transferred over the Internet.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Luckily, there’s a way to install &lt;code&gt;wget&lt;/code&gt; in our Ubuntu distribution.
Ubuntu provides a powerful command-line package manager called
&lt;strong&gt;Advanced Package Tool&lt;/strong&gt; (APT).
First, you need to run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;apt-get update&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which fetches the available packages from a list of sources
available in file &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, you can install &lt;code&gt;wget&lt;/code&gt; by running the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;apt-get install -y wget&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to obtain all the figures from a
Web page, type the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;wget -nd -H -p -P /my-figures -A jpg,jpeg,png,gif -e robots=off -w 0.5 https://www.centralesupelec.fr/fr/presentation&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see in the current directory a new folder
named &lt;em&gt;my-figures&lt;/em&gt; containing the downloaded figures;
verify it by typing &lt;code&gt;ls my-figures&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before terminating, don’t forget to read your fortune cookie.
In the shell, run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;apt-get install -y fortune&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;/usr/games/fortune -s&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you’re done, you can simply type the command &lt;code&gt;exit&lt;/code&gt; to quit
the guest terminal and stop the container.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You might wonder how you can transfer the downloaded figures
from the container to the host computer.
We’ll see that later
when we introduce the notion of &lt;strong&gt;volumes&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-images&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Creating Images&lt;/h1&gt;
&lt;p&gt;A Docker image can be thought of as a template to create and run a container.
An image is a file that contains a &lt;strong&gt;layered filesystem&lt;/strong&gt; with each layer being &lt;strong&gt;immutable&lt;/strong&gt;;
this means that the files that belong to a layer cannot be
modified or deleted, nor can files be added to a layer.&lt;/p&gt;
&lt;p&gt;When a container is created from an image, it
will be composed of all the image read-only layers and, on top of
them, a writable layer (termed the &lt;strong&gt;container layer&lt;/strong&gt;),
where all the new files created in the container will be written.
For example, the figures that we downloaded in the container
&lt;em&gt;dl-figures&lt;/em&gt; were stored in the writable layer of that container.&lt;/p&gt;
&lt;div id=&#34;interactive-image-creation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Interactive image creation&lt;/h2&gt;
&lt;p&gt;When we run the container &lt;em&gt;dl-figures&lt;/em&gt; in Section &lt;a href=&#34;#simple-use-case&#34;&gt;1.5&lt;/a&gt;,
we modified the container to
install the command &lt;code&gt;wget&lt;/code&gt;.
You can see the modifications by typing the
following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker diff dl-figures&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output consists of a list of files tagged with the letter A, C or D, indicating
respectively that the file has been added (A), changed (C) or deleted (D).
In this list you’ll find the downloaded figures, as well as
other files that have been added or modified or deleted
when we installed &lt;code&gt;wget&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-12&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.1  &lt;/strong&gt;&lt;/span&gt;If layers, except the top one, are immutable,
how can files that belong to the lower layers be modified or deleted?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;All files marked with A are new and therefore are
added to the writable layer of the container.&lt;/p&gt;
&lt;p&gt;As for the existing files, they live in the immutable layers
of the image, and therefore cannot be touched directly.
Instead, they are copied from the bottom layers to the writable layer where
they are modified.
This strategy is called &lt;strong&gt;copy-on-write&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The structure of layers generates a &lt;strong&gt;layered filesystem&lt;/strong&gt; in the image;
if different copies of the same file exist in different layers,
the copy in the uppermost layer
overwrites the others.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;We can create a new image from the container &lt;em&gt;dl-figures&lt;/em&gt;, one that provides
a Ubuntu distribution with the command &lt;code&gt;wget&lt;/code&gt; already installed,
with the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker commit dl-figures ubuntu-with-wget&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The command creates a new image called &lt;em&gt;ubuntu-with-wget&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-14&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.2  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;em&gt;ubuntu-with-wget&lt;/em&gt; and verify that the command
&lt;em&gt;wget&lt;/em&gt; is actually installed.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Just type the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it ubuntu-with-wget&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the guest terminal type &lt;code&gt;wget&lt;/code&gt;: you should see the
following output:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;wget: missing URL
Usage: wget [OPTION]... [URL]...

Try `wget --help` for more options.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;dockerfiles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Dockerfiles&lt;/h2&gt;
&lt;p&gt;The interactive creation of an image is a manual, and therefore inefficient, process.
The most common way to create an image is to use a &lt;strong&gt;Dockerfile&lt;/strong&gt;, a
text file that contains all the instructions necessary to
build the image.
The advantage of the Dockerfile is that it can be interpreted
by the Docker engine, which makes the creation of images an automated
and repeatable task.&lt;/p&gt;
&lt;p&gt;Inspired by the previous example, suppose that we want to create a containerized
application to download figures from a Web page.
As a template for this application, we need to build a new
image, that we’ll call &lt;em&gt;fig-downloader&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The Dockerfile containing the instructions to build the image
&lt;em&gt;fig-downloader&lt;/em&gt; is as follows:&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM ubuntu:eoan
RUN apt-get update
RUN apt-get install -y wget
RUN mkdir -p /my-figures
WORKDIR /my-figures
ENTRYPOINT [&amp;quot;wget&amp;quot;, &amp;quot;-nd&amp;quot;, &amp;quot;-r&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;jpg,jpeg,bmp,png,gif&amp;quot;]
CMD [&amp;quot;https://www.centralesupelec.fr/fr/presentation&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the explanation:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;We use the image &lt;em&gt;ubuntu:eoan&lt;/em&gt; as the &lt;strong&gt;base image&lt;/strong&gt;.
This corresponds to the instruction &lt;code&gt;FROM ubuntu:eoan&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We install the utility &lt;code&gt;wget&lt;/code&gt; in the base image.
This corresponds to the
instructions &lt;code&gt;RUN apt-get update&lt;/code&gt; and &lt;code&gt;RUN apt-get install -y wget&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We create a directory &lt;em&gt;my-figures&lt;/em&gt; under the root directory of the image.
This corresponds to the instruction &lt;code&gt;RUN mkdir -p /my-figures&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We set the newly created directory &lt;em&gt;/my-figures&lt;/em&gt; as the
&lt;strong&gt;working directory&lt;/strong&gt; of the image. This corresponds to the
instruction &lt;code&gt;WORKDIR /my-figures&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We specify the command to be executed when a container is run from this image.
This corresponds to the instruction &lt;code&gt;ENTRYPOINT [&amp;quot;wget&amp;quot;, &amp;quot;-nd&amp;quot;, &amp;quot;-r&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;jpg,jpeg,bmp,png,gif&amp;quot;]&lt;/code&gt;.
This instruction means: execute &lt;code&gt;wget&lt;/code&gt; with the options
&lt;code&gt;-nd&lt;/code&gt;, &lt;code&gt;-r&lt;/code&gt;, &lt;code&gt;-A&lt;/code&gt;;
the last option takes a list of file
extensions (&lt;code&gt;jpg,jpeg,bmp,png,gif&lt;/code&gt;) as its argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remember that the utility &lt;code&gt;wget&lt;/code&gt; takes the URL of the Web page as
an argument. The URL will be specified when we run the container from
the image &lt;em&gt;fig-downloader&lt;/em&gt;.
Optionally, we can specify a default argument by using the
keyword CMD. The meaning of the instruction
&lt;code&gt;CMD [&amp;quot;https://www.centralesupelec.fr/fr/presentation&amp;quot;]&lt;/code&gt; is:
if we don’t give any URL when we run the container, the figures will
be downloaded from
&lt;a href=&#34;https://www.centralesupelec.fr/fr/presentation&#34; class=&#34;uri&#34; target=&#34;_blank&#34;&gt;https://www.centralesupelec.fr/fr/presentation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-15&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.3  &lt;/strong&gt;&lt;/span&gt;What’s the relation between the Dockerfile lines and the image layers?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Each line corresponds to a new layer.
The first line corresponds to the bottom layer;
the last line to the top layer.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:dockerfile-creation&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.4  &lt;/strong&gt;&lt;/span&gt;Could you identify a problem in this Dockerfile?
Modify the Dockerfile accordingly.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;When creating an image, we should keep the number of layers relatively
small; in fact, the more the layers, the bigger the image will be.
Here we create three separate layers with three RUN commands; we can
simply merge the three layers.
The resulting Dockerfile will be:&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM ubuntu:eoan
RUN apt-get update &amp;amp;&amp;amp; \
    apt-get install -y wget &amp;amp;&amp;amp; \
    mkdir -p /my-figures
WORKDIR /my-figures
ENTRYPOINT [&amp;quot;wget&amp;quot;, &amp;quot;-nd&amp;quot;, &amp;quot;-r&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;jpg,jpeg,bmp,png,gif&amp;quot;]
CMD [&amp;quot;https://www.centralesupelec.fr/fr/presentation&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;building-an-image&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; Building an image&lt;/h2&gt;
&lt;p&gt;We’re now going to build an image from a Dockerfile.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Create a directory named &lt;em&gt;fig-downloader&lt;/em&gt; in your computer with
a file named &lt;em&gt;Dockerfile&lt;/em&gt; inside.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the &lt;em&gt;Dockerfile&lt;/em&gt; write the set of instructions that
you proposed in Exercise &lt;a href=&#34;#exr:dockerfile-creation&#34;&gt;2.4&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the terminal, set the working directory to &lt;em&gt;fig-downloader&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build an image called &lt;em&gt;fig-downloader&lt;/em&gt; by executing the following command:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker build -t fig-downloader .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;.&lt;/code&gt; at the end of the command means that the Docker engine will
look for a file named &lt;em&gt;Dockerfile&lt;/em&gt; in the working directory.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-16&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.5  &lt;/strong&gt;&lt;/span&gt;Once the image is built, type the command &lt;code&gt;docker image ls -a&lt;/code&gt;.
What are the images with repository and tag &lt;code&gt;&amp;lt;none&amp;gt;&lt;/code&gt;?
Why are there three of such images?
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;These are the &lt;strong&gt;intermediate images&lt;/strong&gt;.
Once a layer is compiled, an intermediate image is created that
contains that layer and all the layers underneath.
In other words, the intermediate image
corresponding to the layer &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; contains all files
up to the layer &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;, including layers 1 through &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The intermediate layers are used by the &lt;strong&gt;build cache&lt;/strong&gt;,
of which we’ll see an example later.&lt;/p&gt;
&lt;p&gt;Although there are five layers in the new image, there are only
three intermediate images because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the base image is &lt;em&gt;ubuntu:eoan&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;the image corresponding to the top layer is the final image &lt;em&gt;fig-downloader&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox curiosity&#34;&gt;
&lt;p&gt;&lt;strong&gt;Good to know&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you give the Dockerfile a different name (say, &lt;em&gt;Dockerfile-fig-downloader&lt;/em&gt;),
the command to build the image will be:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker build -t fig-downloader -f Dockerfile-fig-downloader .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The option &lt;code&gt;-f&lt;/code&gt; is used to specify the name of the Dockerfile.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Let’s dive deeper into the anatomy of an image.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-17&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.6  &lt;/strong&gt;&lt;/span&gt;Run the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker history fig-downloader&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and analyze the layers of the new image.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why do some layers have an ID, while others
are marked as &lt;i&gt;missing&lt;/i&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Can you find the identifiers of the intermediate images?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The layers with an ID correspond to the layers of
the new image, including the top layer and the base image.
The layers marked as &lt;em&gt;missing&lt;/em&gt; are those that compose the
base image. Those layers are not stored in&lt;br /&gt;
your computer,
simply because they belong to an image
that hasn’t been built on your computer
and you downloaded from the DockerHub registry.&lt;/p&gt;
&lt;p&gt;By looking at the output of &lt;code&gt;docker image ls -a&lt;/code&gt; and the output of this command,
we see that the layers between the base image and the top layer have the
same identifiers as the intermediate images.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:dl-1-container&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.7  &lt;/strong&gt;&lt;/span&gt;Run the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run --name dl-1 fig-downloader&lt;/code&gt;&lt;/p&gt;
What does it do? Where are the downloaded pictures?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We downloaded the figures
of the page &lt;a href=&#34;https://www.centralesupelec.fr/fr/presentation&#34; class=&#34;uri&#34; target=&#34;_blank&#34;&gt;https://www.centralesupelec.fr/fr/presentation&lt;/a&gt;.
The downloaded pictures are in the folder &lt;em&gt;/my-figures&lt;/em&gt;
of the container &lt;em&gt;dl-1&lt;/em&gt;.
For now, don’t worry about accessing them.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-18&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.8  &lt;/strong&gt;&lt;/span&gt;Run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --name dl-2 fig-downloader https://www.centralesupelec.fr/fr/nos-campus&lt;/code&gt;&lt;/pre&gt;
What does it do? Where are the downloaded pictures?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We downloaded the figures
of the page &lt;a href=&#34;https://www.centralesupelec.fr/fr/nos-campus&#34; class=&#34;uri&#34; target=&#34;_blank&#34;&gt;https://www.centralesupelec.fr/fr/nos-campus&lt;/a&gt;.
We basically overwrote the URL specified by the CMD keyword with a new
one.
The downloaded pictures are in the folder &lt;em&gt;/my-figures&lt;/em&gt;
of the container &lt;em&gt;dl-2&lt;/em&gt;.
For now, don’t worry about accessing these figures.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;containerized-python-application&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4&lt;/span&gt; Containerized Python application&lt;/h2&gt;
&lt;p&gt;Download &lt;a href=&#34;/courses/cloud-computing/tutorial-docker/word-frequency.zip&#34;&gt;this archive file&lt;/a&gt;
and unzip it into your working directory.
In this archive you’ll find:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Dockerfile.&lt;/li&gt;
&lt;li&gt;A Python script &lt;em&gt;main.py&lt;/em&gt; that asks the user to enter the URL and the language of a Web page,
and prints the 10 most frequent words occurring in that page.&lt;/li&gt;
&lt;li&gt;A file &lt;em&gt;requirements.txt&lt;/em&gt; with the list of the Python packages
needed to run the given script.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The content of the Dockerfile is as follows:&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM python:3.7-slim
RUN mkdir -p /app
WORKDIR /app
COPY ./main.py ./requirements.txt /app/
RUN pip install -r requirements.txt
ENTRYPOINT [&amp;quot;python&amp;quot;, &amp;quot;main.py&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-19&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.9  &lt;/strong&gt;&lt;/span&gt;Describe what this Dockerfile does.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Takes &lt;em&gt;python:3.7-slim&lt;/em&gt; as the base image.&lt;/li&gt;
&lt;li&gt;Creates a new folder &lt;em&gt;app&lt;/em&gt; in the image under the root directory.&lt;/li&gt;
&lt;li&gt;Changes the working directory to &lt;em&gt;/app&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Copies the files &lt;em&gt;main.py&lt;/em&gt; and &lt;em&gt;requirements.txt&lt;/em&gt; from the local
computer to the directory &lt;em&gt;/app&lt;/em&gt; in the image.&lt;/li&gt;
&lt;li&gt;Runs the command &lt;code&gt;pip install&lt;/code&gt; to install the Python libraries
specified in the file &lt;em&gt;requirements.txt&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Executes the command &lt;code&gt;python main.py&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34; word-latex=&#34;{exercisebox}&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-20&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.10  &lt;/strong&gt;&lt;/span&gt;Build an image called &lt;em&gt;wordfreq&lt;/em&gt; from this Dockerfile.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker build -t wordfreq .&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-21&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.11  &lt;/strong&gt;&lt;/span&gt;Without changing the Dockerfile, rebuild the same image.
What do you notice?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The build is very fast.
Since we didn’t change the Dockerfile, the image
is rebuilt by using the image layers created
previously.
This is clearly indicated by the phrase &lt;strong&gt;using cache&lt;/strong&gt; written
at each layer.
Using the already stored layers is called &lt;strong&gt;build cache&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-22&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.12  &lt;/strong&gt;&lt;/span&gt;What happens if you modify a line in the Python script and
you rebuild the image?
Is the build cache still used?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Add any instruction at the end of &lt;em&gt;main.py&lt;/em&gt;, such as:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;I added this line&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then rebuild the image.
The three bottom layers are not affected by the modification, therefore
they benefit from the build cache.
Layer 4 is the first affected by the modification.
This layer, and those above, need therefore to be
rebuilt.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-23&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.13  &lt;/strong&gt;&lt;/span&gt;Considering how the build cache is used in Docker,
can you tell what’s wrong with this Dockerfile?
Modify the Dockerfile accordingly and rebuild the image.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Each time we modify &lt;em&gt;main.py&lt;/em&gt; and we rebuild the image,
the layer 4 and 5 are recreated, meaning that all the Python packages
are downloaded and installed.
Depending on the size and number of the packages, this might
take some while.
A better way to structure the Dockerfile is to install the
packages before copying the Python script to the image.
Here is how we should modify the Dockerfile:&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM python:3.7-slim
RUN mkdir -p /app
WORKDIR /app
COPY ./requirements.txt /app/
RUN pip install -r requirements.txt
COPY ./main.py /app/
ENTRYPOINT [&amp;quot;python&amp;quot;, &amp;quot;main.py&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-24&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.14  &lt;/strong&gt;&lt;/span&gt;Modify &lt;em&gt;main.py&lt;/em&gt; by adding a new line of code and rebuild the image.
What changed?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The Python packages are not reinstalled, as a result rebuilding the image&lt;br /&gt;
takes much less time than before.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-volumes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Data Volumes&lt;/h1&gt;
&lt;p&gt;In Exercise &lt;a href=&#34;#exr:dl-1-container&#34;&gt;2.7&lt;/a&gt; you’ve been asked to run a container named
&lt;em&gt;dl-1&lt;/em&gt; to download some figures from a Web page.
The figures were downloaded into the
directory &lt;em&gt;/my-figures&lt;/em&gt; of the container.
But we left a question unanswered.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we transfer those figures from the container to the host computer?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One way to go about that is to run the following command in the host terminal:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker cp dl-1:/my-figures .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will copy the directory &lt;em&gt;/my-figures&lt;/em&gt; from the container &lt;em&gt;dl-1&lt;/em&gt; to
the host computer working directory.
You can verify it by yourself.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-25&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.1  &lt;/strong&gt;&lt;/span&gt;Can you tell why this solution is less than ideal?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;After running the container we need to do an additional action to copy
the figures from the container to the host computer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The container is created and run only to download some figures.
We’d like to remove it automatically (with the option &lt;code&gt;--rm&lt;/code&gt;) when its
execution is over. However, if we do so, the pictures will be lost before
we can copy them to the host computer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div id=&#34;using-a-host-volume&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Using a host volume&lt;/h2&gt;
&lt;p&gt;A better solution is to &lt;strong&gt;mount&lt;/strong&gt; (i.e., attach)
a directory of the host computer at the container’s directory
&lt;em&gt;/my-figures&lt;/em&gt; when we run it.
Let’s see how it works.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Create a directory named &lt;em&gt;figs-volume&lt;/em&gt; in your working directory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Type and execute the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -v $(pwd)/figs-volume:/my-figures fig-downloader&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command runs a container from the image &lt;em&gt;fig-downloader&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;With the option &lt;code&gt;-v&lt;/code&gt; we specify that we want to mount the directory
&lt;em&gt;$(pwd)/figs-volume&lt;/em&gt; (&lt;em&gt;$(pwd)&lt;/em&gt; indicates the host working directory)
at the directory &lt;em&gt;figs-volume&lt;/em&gt; in the container;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The option &lt;code&gt;--rm&lt;/code&gt; indicates that we want the container to be
removed when its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; Verify that the pictures are in the folder &lt;em&gt;figs-volume&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In this example, we’ve used the directory &lt;em&gt;figs-volume&lt;/em&gt; as a
&lt;strong&gt;volume&lt;/strong&gt; (essentially, an external storage area) of the container;
when the container is destroyed, the volume remains with all its data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-volumes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; Docker volumes&lt;/h2&gt;
&lt;p&gt;In the example that we’ve just described, we’ve used a host
directory as a volume.
This is useful when we, or an application running on the host, need
to access the files produced by a container.
In all the other cases, a container should use a &lt;strong&gt;Docker volume&lt;/strong&gt;, which
is managed directly by the Docker engine.&lt;/p&gt;
&lt;p&gt;Let’s create a new Docker volume called &lt;em&gt;data-volume&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker volume create data-volume&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox curiosity&#34;&gt;
&lt;p&gt;&lt;strong&gt;Good to know (advanced notion)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where the data will be actually stored?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can inspect the new volume by typing the
following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker volume inspect data-volume&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;em&gt;mount point&lt;/em&gt; is indicated; that’s the folder where the data
will be actually stored.
If your computer runs Linux, that folder will be available
on the host; if your computer runs Windows or MacOS,
you’ll not find that folder on your computer.
Instead, it will be available in the virtual machine
that Docker use on MacOS and Windows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do you want to see the directory? (Instructions for MacOS)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One way to look into the hidden VM is to run
the following containerized application:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run -it --rm --privileged --pid=host justincormack/nsenter1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This application will open a guest terminal into the VM.
You can then use the commands &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;
to browse to the directory indicated as the mount path
of the new volume.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sharing-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.1&lt;/span&gt; Sharing data&lt;/h3&gt;
&lt;p&gt;A Docker volume can be used to share data between containers.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-26&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.2  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;code&gt;ubuntu:eoan&lt;/code&gt;,
specifying the options to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Remove the container once its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interact with the guest Linux terminal in the container.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Mount the volume &lt;em&gt;data-volume&lt;/em&gt; at the container’s directory &lt;em&gt;/data&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it -v data-volume:/data ubuntu:eoan &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-27&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.3  &lt;/strong&gt;&lt;/span&gt;Type a command in the guest Linux terminal to create a file
&lt;em&gt;test-file.txt&lt;/em&gt; in the directory &lt;em&gt;/data&lt;/em&gt;.
Verify that the file is created.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;echo &amp;quot;This is a new file&amp;quot; &amp;gt; /data/test-file.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;creates a file &lt;em&gt;test-file.txt&lt;/em&gt; with the line of text
“This is a new file”.&lt;/p&gt;
&lt;p&gt;In order to verify that the file is created, we can
type the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;ls /data/test-file.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see the content of the file, we can type:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;cat /data/test-file.txt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-28&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.4  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;em&gt;alpine:latest&lt;/em&gt;,
specifying the options to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Remove the container once its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interact with the guest Linux terminal in the container.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Mount the volume &lt;em&gt;data-volume&lt;/em&gt; to the directory &lt;em&gt;/my-data&lt;/em&gt;
of the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container run --rm -it -v data-volume:/my-data alpine&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-29&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.5  &lt;/strong&gt;&lt;/span&gt;Verify that you can read the file &lt;em&gt;test-file.txt&lt;/em&gt;.
Which folder would you look in?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We need to look in the folder &lt;em&gt;/my-data&lt;/em&gt; because this is where
we mounted &lt;em&gt;data-volume&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;cat /my-data/test-file.txt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;In the guest terminals of both containers type &lt;code&gt;exit&lt;/code&gt;.
This will terminate and destroy (since we used
the option &lt;code&gt;--rm&lt;/code&gt;) the containers.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-30&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.6  &lt;/strong&gt;&lt;/span&gt;Will the file &lt;em&gt;test-file.txt&lt;/em&gt; be removed?
Why?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;No. The file that we created before has been saved in the volume
&lt;em&gt;data-volume&lt;/em&gt;. Volumes are a way to persist data beyond the life span
of a container.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;single-host-networking&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Single-Host Networking&lt;/h1&gt;
&lt;p&gt;In order to let containers communicate and, therefore, co-operate,
Docker defines a simple networking model known as
the &lt;a href=&#34;/courses/cloud-computing/references/docker-primer#single-host-networking&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;container network model&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-31&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.1  &lt;/strong&gt;&lt;/span&gt;Describe the output of the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker network ls&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The command lists all the networks created by Docker on
your computer.
For each network, the values of four attributes are shown:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The identifier.&lt;/li&gt;
&lt;li&gt;The name.&lt;/li&gt;
&lt;li&gt;The driver used by the network.&lt;/li&gt;
&lt;li&gt;The scope of the network (local or global).
A local scope means that the network connects containers
running on the same host, as opposed to a global scope that
means that containers on different hosts can communicate.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending on the containers that you used
in the past, you might see different networks.
However, three networks are worth noting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The network named &lt;strong&gt;bridge&lt;/strong&gt;, that uses the driver &lt;strong&gt;bridge&lt;/strong&gt; and a local scope.
By default, any new container is attached to this network.&lt;/li&gt;
&lt;li&gt;The network named &lt;strong&gt;host&lt;/strong&gt;, that uses the driver &lt;strong&gt;host&lt;/strong&gt; and a local scope.
It’s used when we want a container to directly use the network interface of the host.
It’s important to remember that this network should only be used when analyzing the
host’s network traffic. In the other cases, using this network exposes
the container to all sorts of security risks.&lt;/li&gt;
&lt;li&gt;The network named &lt;strong&gt;none&lt;/strong&gt;, that uses the driver &lt;strong&gt;null&lt;/strong&gt; and a local scope.
Attaching a container to this network means that the container
isn’t connected to any network, and therefore it’s completely isolated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-32&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.2  &lt;/strong&gt;&lt;/span&gt;The following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker network inspect bridge&lt;/code&gt;&lt;/p&gt;
outputs the configuration of the network &lt;strong&gt;bridge&lt;/strong&gt;.
By looking at this configuration, can you tell
what IP addresses will be given to the containers attached to this
network? What’s the IP address of the router of this network?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The information is specified in the field named &lt;strong&gt;IPAM&lt;/strong&gt;, more specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Subnet&lt;/strong&gt; indicates the range of IP addresses used by the network.
The value of this field should be 172.17.0.0/16;
the addresses range from 172.17.0.1 to 172.17.255.255.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Gateway&lt;/strong&gt; indicates the IP address of the router of the network.
The value should be 172.17.0.1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div id=&#34;creating-networks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1&lt;/span&gt; Creating networks&lt;/h2&gt;
&lt;p&gt;By default, any new container is attached to the network named &lt;em&gt;bridge&lt;/em&gt;.
As a result, all new containers will be able to communicate over this network.
This is not a good idea.
If a hacker can compromise any of these containers, s/he might
be able to attack the other containers as well.
As a rule of thumb, we should attach two containers to the same network &lt;strong&gt;only&lt;/strong&gt; on a
need-to-communicate basis.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-33&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.3  &lt;/strong&gt;&lt;/span&gt;What if a container doesn’t need to use the network at all?
Try to run a container from the image &lt;em&gt;alpine&lt;/em&gt;
disconnected from all networks and
verify that you cannot ping the URL
&lt;a href=&#34;http://www.google.com&#34; target=&#34;_blank&#34;&gt;www.google.com&lt;/a&gt;.&lt;/p&gt;
Look at the &lt;a href=&#34;/courses/cloud-computing/references/docker-cheat-sheet&#34; target=&#34;_blank&#34;&gt;Docker cheat sheet&lt;/a&gt;
to learn how to attach a container to a network.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We should attach the container to the network &lt;strong&gt;none&lt;/strong&gt;.
As an example, we run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --network none alpine /bin/sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we try to ping www.google.com as follows:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;ping www.google.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should obtain the following message:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;bad address &amp;#39;www.google.com&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Type the command &lt;code&gt;exit&lt;/code&gt; to quit the container.&lt;/p&gt;
&lt;p&gt;Instead, if we run Linux Alpine without specifying the network
(meaning that the container will be attached to the network &lt;em&gt;bridge&lt;/em&gt;):&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it  alpine /bin/sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we try to ping www.google.com, we should get an answer.
In some cases, the command ping would just hang and show no
output; this is usually fixed by restarting Docker.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;In order to create a new network, you can use the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker network create network_name&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-34&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.4  &lt;/strong&gt;&lt;/span&gt;Create two networks named &lt;em&gt;buckingham&lt;/em&gt; and &lt;em&gt;rochefort&lt;/em&gt; that
use the driver &lt;em&gt;bridge&lt;/em&gt;.
By using the &lt;code&gt;docker network inspect&lt;/code&gt; command,
look at the IP addresses of the new networks and write them down.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Just run the following commands:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker network create buckingham
docker network create rochefort&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IP addresses for the network &lt;em&gt;buckingham&lt;/em&gt; are
172.18.0.0/16 (addresses from 172.18.0.1 to 172.18.255.255);
The IP addresses for the network &lt;em&gt;rochefort&lt;/em&gt; are:
172.19.0.0/16 (assuming that you create &lt;em&gt;buckingham&lt;/em&gt;
before &lt;em&gt;rochefort&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;The IP addresses may be different on your machines.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-35&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.5  &lt;/strong&gt;&lt;/span&gt;Create three containers &lt;em&gt;athos&lt;/em&gt;, &lt;em&gt;porthos&lt;/em&gt; and &lt;em&gt;aramis&lt;/em&gt; and attach them
to the two networks &lt;em&gt;buckingham&lt;/em&gt; and &lt;em&gt;rochefort&lt;/em&gt; as displayed
&lt;a href=&#34;/courses/cloud-computing/references/docker-primer#fig:cnm&#34; target=&#34;_blank&#34;&gt;in this figure&lt;/a&gt;.
&lt;strong&gt;The three containers will open a Linux Alpine shell&lt;/strong&gt;.
You’ll need to launch the commands in three separate tabs of your terminal window.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What will the IP addresses of the three containers be in the two networks?
Remember that &lt;em&gt;porthos&lt;/em&gt; is attached to two networks, therefore it’ll have two
network interfaces (endpoints) and, as a result, two IP addresses.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Verify your answers by inspecting the two networks (use the
command &lt;code&gt;docker network inspect&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Here are the commands to run &lt;em&gt;athos&lt;/em&gt; and &lt;em&gt;aramis&lt;/em&gt; while connecting
them to &lt;em&gt;buckingham&lt;/em&gt; and &lt;em&gt;rochefort&lt;/em&gt; respectively.&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name athos --network buckingham  alpine /bin/sh
docker run --rm -it --name aramis --network rochefort   alpine /bin/sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the command to run &lt;em&gt;porthos&lt;/em&gt; and attach it to
&lt;em&gt;buckingham&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name porthos --network buckingham   alpine /bin/sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following command attaches &lt;em&gt;porthos&lt;/em&gt; to the second network &lt;em&gt;rochefort&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker network connect rochefort porthos&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As for the IP addresses, each network has IP addresses
in the range 172.x.0.0/16, where x is 18 in the
network &lt;em&gt;buckingham&lt;/em&gt; and 19 in the network &lt;em&gt;rochefort&lt;/em&gt;.
The address 172.x.0.1 is reserved for the router.
Therefore, the containers will be assigned
IP addresses from 172.x.0.2.
In this solution, we created &lt;em&gt;athos&lt;/em&gt;, &lt;em&gt;aramis&lt;/em&gt; and &lt;em&gt;portos&lt;/em&gt;
in this order.
Therefore, the IP addresses will be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In network &lt;em&gt;buckingham&lt;/em&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;athos&lt;/em&gt;: 172.18.0.2&lt;/li&gt;
&lt;li&gt;&lt;em&gt;porthos&lt;/em&gt;: 172.18.0.3&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;In network &lt;em&gt;rochefort&lt;/em&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;aramis&lt;/em&gt;: 172.19.0.2&lt;/li&gt;
&lt;li&gt;&lt;em&gt;porthos&lt;/em&gt;: 172.19.0.3&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can actually verify this configuration by inspecting
the two networks with the following commands:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker network inspect buckingham
docker network inspect rochefort&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IP addresses might be different on your machines.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;communication-between-containers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2&lt;/span&gt; Communication between containers&lt;/h2&gt;
&lt;p&gt;Let’s see if and when the three containers can communicate.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-36&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.6  &lt;/strong&gt;&lt;/span&gt;Which containers are able to communicate?
Justify your answer.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The only containers that cannot communicate are &lt;em&gt;athos&lt;/em&gt; and &lt;em&gt;aramis&lt;/em&gt;,
because they’re not connected to the same network.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-37&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.7  &lt;/strong&gt;&lt;/span&gt;Try to ping &lt;em&gt;porthos&lt;/em&gt; from &lt;em&gt;athos&lt;/em&gt; by using its IP address.&lt;/p&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Which IP address of &lt;em&gt;porthos&lt;/em&gt; would you use?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We need to use the IP address assigned to the endpoint linking
&lt;em&gt;porthos&lt;/em&gt; to the network &lt;em&gt;buckingham&lt;/em&gt;, to which &lt;em&gt;athos&lt;/em&gt; is connected.
In our case, this is 172.18.0.3.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-38&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.8  &lt;/strong&gt;&lt;/span&gt;Try to ping &lt;em&gt;porthos&lt;/em&gt; from &lt;em&gt;athos&lt;/em&gt; by using its name.
Do you succeed? Are you surprised?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We succeed. Indeed, the network &lt;em&gt;buckingham&lt;/em&gt; provides a DNS server, that
can translate names into IP addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;You can now exit the three containers.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;a-containerized-chat-room&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.3&lt;/span&gt; A containerized chat room&lt;/h2&gt;
&lt;p&gt;We developed a simple chat room in Python that you can download
&lt;a href=&#34;/courses/cloud-computing/tutorial-docker/chat-room.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Participants use a &lt;em&gt;client&lt;/em&gt; program to connect to the chat room;
the chat room is managed by a &lt;em&gt;server&lt;/em&gt; application that receives the
client connections and forwards the messages between the users.
The archive contains the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;client.py&lt;/em&gt;. Implementation of the chat room client.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;server.py&lt;/em&gt;. Implementation of the chat room server.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;utils.py&lt;/em&gt;. Library with utility functions used
in both &lt;em&gt;client.py&lt;/em&gt; and &lt;em&gt;server.py&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-39&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.9  &lt;/strong&gt;&lt;/span&gt;By using Dockerfiles, create two images &lt;code&gt;chat-client&lt;/code&gt; and &lt;code&gt;chat-server&lt;/code&gt;
that will be used to run the client and the server in Docker.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The Dockerfile for the client (let’s call it &lt;em&gt;Dockerfile-client&lt;/em&gt;)
is as follows.&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM python:3.7-slim
RUN mkdir -p /app
WORKDIR /app
COPY ./client.py ./utils.py /app/
ENTRYPOINT [&amp;quot;python&amp;quot;, &amp;quot;client.py&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We build the image with the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker build -t chat-client -f Dockerfile-client .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Dockerfile for the server (let’s call it &lt;em&gt;Dockerfile-server&lt;/em&gt;)
is as follows.&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM python:3.7-slim
RUN mkdir -p /app
WORKDIR /app
COPY ./server.py ./utils.py /app/
ENTRYPOINT [&amp;quot;python&amp;quot;, &amp;quot;server.py&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We build the image with the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker build -t chat-server -f Dockerfile-server .&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox curiosity&#34;&gt;
&lt;p&gt;&lt;strong&gt;Good to know&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first three layers in both images are identical.
Therefore, when building the second image &lt;em&gt;chat-server&lt;/em&gt;
the Docker engine reuses the cached layers
created for the first image.
This is indicated in the output of the
&lt;code&gt;docker build&lt;/code&gt; command with the phrase &lt;em&gt;using cache&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;We’ll now run both containers.
Since they need to communicate, they need to be attached to the same
network (e.g., &lt;em&gt;buckingham&lt;/em&gt;).&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-40&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.10  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;em&gt;server-chat&lt;/em&gt;.
Set the options to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Automatically remove the container once its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the container a name (e.g., &lt;em&gt;server-chat&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The server will print messages on the screen.
In order to see them, you must use the option &lt;code&gt;-t&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, keep in mind that &lt;em&gt;server.py&lt;/em&gt; takes an argument
that is the &lt;strong&gt;port number&lt;/strong&gt; where the server will listen to incoming connections.
Choose a random port number in the interval [49152-65535].&lt;/p&gt;
&lt;strong&gt;What is the IP address of the server?&lt;/strong&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We execute the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container run --rm -t --name chat-server --network buckingham chat-server 64903&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case, the IP address is 172.18.0.2 and port number is 64903&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-41&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.11  &lt;/strong&gt;&lt;/span&gt;
Run a container from the image &lt;em&gt;client-chat&lt;/em&gt;.
Set the options to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Automatically remove the container once its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the container a name (e.g., &lt;em&gt;client-chat&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since you’ll use the client to write messages in the chat room,
remember to set the option &lt;code&gt;-it&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
The client takes two arguments: the host where the server is running
and the port which the server is listening to.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name chat-client --network buckingham chat-client 172.18.0.2 64903&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of the server host IP address, we can use the
server container name (the network &lt;em&gt;buckingham&lt;/em&gt; has a DNS server).&lt;/p&gt;
&lt;p&gt;As a result, we can run the client as follows:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name chat-client --network buckingham chat-client chat-server 64903&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Once the client is started, you’ll be prompted to enter your name.
Then you can start writing messages.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can type &lt;em&gt;#quit&lt;/em&gt; at any moment to exit the chat room (client-side).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type Ctrl-C to stop the server.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Now, suppose that one of your classmates wants to join the chat room, but
s/he’s on another computer.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-42&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.12  &lt;/strong&gt;&lt;/span&gt;Do you think your classmate can connect to the containerized server running in
your machine? Justify your answer.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;No, s/he can’t.
The two containers can communicate only if they’re connected to the same
network.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;What we need to do here is to expose our server to the outside world.
The server runs in a container &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; that, in turns, runs on the host machine &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt;.
The server listens to port &lt;span class=&#34;math inline&#34;&gt;\(p_c\)&lt;/span&gt; that is opened &lt;strong&gt;inside the container&lt;/strong&gt;.
We need to map port &lt;span class=&#34;math inline&#34;&gt;\(p_c\)&lt;/span&gt; to a port &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt; in the host computer.
This way, the classmate client will connect to the server by specifying
the &lt;strong&gt;IP address of the host &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt;&lt;/strong&gt; (not &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt;) and &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt; as the port number.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-43&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.13  &lt;/strong&gt;&lt;/span&gt;Stop both the server and the client.&lt;/p&gt;
Run the server by specifying the option to map port
&lt;span class=&#34;math inline&#34;&gt;\(p_c\)&lt;/span&gt; (e.g., 64903) to port &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt; (e.g., 8080).
As before, attach the server to the network &lt;em&gt;buckingham&lt;/em&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We need to use the option &lt;code&gt;-p&lt;/code&gt;. The command to run the container is:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name chat-server --network buckingham -p 8080:64903 chat-server 64903&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assuming that the name of the server container is
&lt;em&gt;chat-server&lt;/em&gt;, run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container port chat-server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output should look like as follows:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;64903/tcp -&amp;gt; 0.0.0.0:8080&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that the port 64903 (&lt;span class=&#34;math inline&#34;&gt;\(p_c\)&lt;/span&gt;) in the container is mapped to the port
8080 (&lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt;) of the host computer.
When a remote client wants to connect to the server, it’ll use port 8080.
The IP address 0.0.0.0 means that a client can connect to the server
by using any of its IP addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If you’re on the same local network as one of your classmate&lt;/strong&gt;,
do Exercise &lt;a href=&#34;#exr:remote-chat-server&#34;&gt;4.14&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If none of your classmates is on your local network&lt;/strong&gt;, do
Exercise &lt;a href=&#34;#exr:local-chat-server&#34;&gt;4.15&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:remote-chat-server&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.14  &lt;/strong&gt;&lt;/span&gt;Ask your classmate to connect to your server.
For this, you’ll need to tell your classmate the IP address
of your machine and the port number &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Assuming that the IP address of your machine is 192.168.1.8,
the command will be the following:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name chat-client chat-client 192.168.1.8 8080&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:local-chat-server&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.15  &lt;/strong&gt;&lt;/span&gt;Since none of your classmates is on your local
network (COVID-19 be damned!), you’ll need to simulate
a distant connection to the server running on your machine.&lt;/p&gt;
&lt;p&gt;Simply run an instance of the client
without attaching it to the network &lt;em&gt;buckingham&lt;/em&gt;.
The IP address of the server will be the IP address of your machine;
the port will be &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Assuming that the IP address of your machine is 192.168.1.8,
the command will be the following:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name chat-client chat-client 192.168.1.8 8080&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with Docker</title>
      <link>/courses/cloud-computing/tutorials/tutorial-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/courses/cloud-computing/tutorials/tutorial-docker/</guid>
      <description>


&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/course.css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/styles/cloud-computing.css&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this tutorial you’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to run &lt;strong&gt;containers&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to define and build &lt;strong&gt;images&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to create and use &lt;strong&gt;volumes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to define and use &lt;strong&gt;networks&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Having installed Docker on your computer.
See the &lt;a href=&#34;/courses/cloud-computing/overview/installing-docker&#34; target=&#34;_blank&#34;&gt;installation guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Being familiar with the notions of containers, images,
volumes and networks in Docker.
See the &lt;a href=&#34;/courses/cloud-computing/references/docker-primer&#34; target=&#34;_blank&#34;&gt;Docker primer&lt;/a&gt;
for an introduction.&lt;/li&gt;
&lt;li&gt;Being familiar with the &lt;a href=&#34;/courses/cloud-computing/references/linux-introduction&#34; target=&#34;_blank&#34;&gt;basic notions of Linux&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Don’t hesitate to look at the &lt;a href=&#34;/courses/cloud-computing/references/docker-cheat-sheet&#34; target=&#34;_blank&#34;&gt;Docker cheat sheet&lt;/a&gt;
to verify the syntax of the Docker commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Terminology&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You’ll use the &lt;strong&gt;terminal&lt;/strong&gt; to run Docker commands.
Referring to the
&lt;a href=&#34;/courses/cloud-computing/references/docker-primer#fig:docker-architecture&#34; target=&#34;_blank&#34;&gt;Docker architecture&lt;/a&gt;,
the terminal is the &lt;strong&gt;client&lt;/strong&gt; that communicates with
the Docker daemon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker runs &lt;strong&gt;containers&lt;/strong&gt; on your computer.
We’ll refer to your computer as the &lt;strong&gt;host&lt;/strong&gt;,
the containers being the &lt;strong&gt;guests&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;containerized application&lt;/strong&gt;
is an application running in a container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;running&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Running containers&lt;/h1&gt;
&lt;p&gt;The command used to run a container
is &lt;code&gt;docker run&lt;/code&gt; followed by four parameters:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run [options] image-name [command] [arg]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The four parameters are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;options&lt;/em&gt;. List of options.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;image-name&lt;/em&gt;. The fully qualified name of the image used to run the container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;command&lt;/em&gt;. The command to be executed in the container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;arg&lt;/em&gt;. The arguments taken by the command executed in the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only the parameter &lt;em&gt;image-name&lt;/em&gt; is mandatory.
The fully qualified name of an image is specified as a sequence of four fields,
formatted as follows:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;registry_url/user/name:tag&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;registry_url&lt;/em&gt; (optional). The URL of the registry that provides the image.
If its value is not specified, the image
will be looked up for in the
&lt;a href=&#34;https://hub.docker.com&#34; target=&#34;_blank&#34;&gt;DockerHub registry&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;user&lt;/em&gt; (optional). The identifier of the user or organization that created the image.
The default value is &lt;em&gt;library&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;name&lt;/em&gt; (mandatory). The name of the image.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tag&lt;/em&gt; (optional). It specifies the image version.
If its value is not specified,
the tag &lt;em&gt;latest&lt;/em&gt; is used, pointing to the latest image version.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-1&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.1  &lt;/strong&gt;&lt;/span&gt;
For each of the following images,
specify the registry name, the user, the name and the tag.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;registry.redhat.io/rhel8/mysql-80&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;alpine:3.11&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;alpine&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Registry: &lt;em&gt;registry.redhat.io&lt;/em&gt;, user: &lt;em&gt;rhel8&lt;/em&gt;, name: &lt;em&gt;mysql-80&lt;/em&gt;,
tag: &lt;em&gt;latest&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Registry: &lt;em&gt;DockerHub&lt;/em&gt;, user: &lt;em&gt;library&lt;/em&gt;, name: &lt;em&gt;alpine&lt;/em&gt;, tag: &lt;em&gt;3.11&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Registry: &lt;em&gt;DockerHub&lt;/em&gt;, user: &lt;em&gt;library&lt;/em&gt;, name: &lt;em&gt;alpine&lt;/em&gt;, tag: &lt;em&gt;latest&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-2&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.2  &lt;/strong&gt;&lt;/span&gt;What’s the difference between the following image names?&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;alpine:latest&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;registry.hub.docker.com/library/alpine&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;alpine&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;There’s no difference. They all point to the same image, that is
the latest version of &lt;em&gt;alpine&lt;/em&gt; in the DockerHub registry.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;We now learn how to use the command &lt;code&gt;docker run&lt;/code&gt; and some of
its options.
In the following exercises, we’ll run containers from the image named
&lt;em&gt;alpine&lt;/em&gt; that is
&lt;a href=&#34;https://hub.docker.com/_/alpine&#34; target=&#34;_blank&#34;&gt;available on the DockerHub registry&lt;/a&gt;.
This image provides a lightweight distribution
(i.e., it doesn’t contain many features) of Linux.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-3&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.3  &lt;/strong&gt;&lt;/span&gt;You want to run the container from the latest version of
the image &lt;em&gt;alpine&lt;/em&gt;.
Which command would you write in the terminal?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The goal of this exercise is to start playing with the
&lt;code&gt;docker run&lt;/code&gt; command.
Since the question doesn’t say anything about the
options, nor does it mention the command to run inside the container,
we’d type:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run alpine&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-4&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.4  &lt;/strong&gt;&lt;/span&gt;Execute the command that you proposed in the previous exercise,
observe the output in the terminal and explain the actions
taken by Docker to run the container.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The output obtained from executing the command should
look like as follows:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;Unable to find image &amp;#39;alpine:latest&amp;#39; locally
latest: Pulling from library/alpine
aad63a933944: Pull complete 
Digest: sha256:b276d875eeed9c7d3f1cfa7edb06b22ed22b14219a7d67c52c56612330348239
Status: Downloaded newer image for alpine:latest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what happens under the hood:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Docker looks for an image named &lt;em&gt;alpine:latest&lt;/em&gt; in the host
computer and cannot find it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker &lt;em&gt;pulls&lt;/em&gt; (i.e., downloads) the image from the DockerHub registry.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Okay but &lt;strong&gt;where’s the result of running the container?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First of all, let’s see if the container is still running in the first
place.
In order to list all containers still running on the host, type the
following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container ls &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your container shouldn’t appear in the output,
because it’s not running.
In order to see all containers, including those that are not
running, type the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container ls -a&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-5&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.5  &lt;/strong&gt;&lt;/span&gt;What information is displayed for each container?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The identifier of the container.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The name of the image used to run the container (it should be &lt;em&gt;alpine&lt;/em&gt; for your
container).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The command executed within the container (it should be &lt;code&gt;/bin/sh&lt;/code&gt; for your container).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the container has been created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The container current status (it should be &lt;em&gt;exited (0) x seconds ago&lt;/em&gt; for your container).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The network ports used by the container (we’ll study them later).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The name of the container. If you don’t specify any when you
run the container (as is our case),
Docker generates a random name by concatenating an adjective and
a famous scientist’s name (e.g., &lt;em&gt;agitated_newton&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-6&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.6  &lt;/strong&gt;&lt;/span&gt;By looking at the command executed within the container (&lt;code&gt;/bin/sh&lt;/code&gt;),
can you tell why the container stopped without giving any output?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The command is &lt;code&gt;/bin/sh&lt;/code&gt;;
the container runs a Linux terminal.
But since we didn’t specify what to do with that terminal
(we didn’t run any Linux command, nor we tried to access the terminal),
the container stopped.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;We’re now going to do something useful with the image &lt;em&gt;alpine&lt;/em&gt;.
But first, we start with some good practices that you should
adopt while playing with images and containers.&lt;/p&gt;
&lt;div id=&#34;good-practices&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; Good practices&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Name your containers.&lt;/strong&gt; Although Docker assigns a default name to a new container,
it’s usually a good practice to give a container a name of your
choice to make it easily distinguishable. You can do it by using the option
&lt;code&gt;--name&lt;/code&gt;. Try the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --name my-alpine alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As before, the container stops immediately.
If you list all your containers by typing again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker container ls -a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you should see a container named &lt;em&gt;my-alpine&lt;/em&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Remove automatically a container if you use it once.&lt;/strong&gt;
Unless you want to reuse your container later, you can ask Docker to automatically remove it
when it stops by using the option &lt;code&gt;--rm&lt;/code&gt;.
This will prevent unused containers from taking up too much disk space.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Try the following:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm --name container-to-remove alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you list all the containers you should see that there is no container
named &lt;em&gt;container-to-remove&lt;/em&gt;.&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Remove unused containers.&lt;/strong&gt; Stopped containers that have been run without
using the option &lt;code&gt;--rm&lt;/code&gt; are still stored in the host.
If you want to remove a specific
container (e.g., &lt;em&gt;my-alpine&lt;/em&gt;), use the following command:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container rm my-alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to remove all stopped containers, use the
following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container prune&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;Remove unused images.&lt;/strong&gt; Images can take up a lot of disk space.
As a result, you should remember to remove those that you don’t intend to use
any longer.
The commands to remove a specific image
and prune unused ones are &lt;code&gt;docker image rm&lt;/code&gt;
and &lt;code&gt;docker image prune -a&lt;/code&gt; respectively.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;pass-a-command-to-the-containerized-application&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; Pass a command to the containerized application&lt;/h2&gt;
&lt;p&gt;Remember that the template of &lt;code&gt;docker run&lt;/code&gt; is the following:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run [options] image-name [command] [arg]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The optional parameter &lt;em&gt;command&lt;/em&gt; refers to a command
that you can pass the containerized application, possibly with some arguments
(parameter &lt;em&gt;arg&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Let’s see an example.
As we saw before, when we run a container from the image &lt;em&gt;alpine&lt;/em&gt;,
a Linux terminal &lt;code&gt;/bin/sh&lt;/code&gt; is launched.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Linux terminal &lt;code&gt;/bin/sh&lt;/code&gt; is run within the
container.
Henceforth, we’ll use the following terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Host terminal.&lt;/strong&gt; The terminal that you use to
interact with the operating system of your computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Guest terminal.&lt;/strong&gt; The terminal that is run within
the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;By using the optional parameter &lt;em&gt;command&lt;/em&gt;, we can run
a command in the guest terminal.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:command-in-guest&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.7  &lt;/strong&gt;&lt;/span&gt;
Run a container from the image &lt;em&gt;alpine&lt;/em&gt; and execute the
Linux command &lt;code&gt;ls&lt;/code&gt; that lists the content of the current directory.&lt;/p&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Where are the listed files stored?
In the host or in the container?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm --name ls-test alpine ls&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The command &lt;code&gt;ls&lt;/code&gt; is run in the guest terminal, therefore
what we see in the output is a list of files stored in the
container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Exercise &lt;a href=&#34;#exr:command-in-guest&#34;&gt;1.7&lt;/a&gt; the command
&lt;code&gt;ls&lt;/code&gt; is executed in the guest terminal, but its
output is redirected to the host terminal.&lt;/p&gt;
&lt;p&gt;In other words, when we run the container, we
don’t interact directly with the guest terminal;
we just send a command and the output is redirected
to the host terminal.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now let’s see how to execute a command in the guest terminal
that also requires an argument.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-7&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.8  &lt;/strong&gt;&lt;/span&gt;By using the Linux utility &lt;code&gt;ping&lt;/code&gt;, check
whether the Web site www.centralesupelec.fr is reachable.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm --name ping-test alpine ping www.centralesupelec.fr&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to interrupt &lt;code&gt;ping&lt;/code&gt;
just type the key combination that you’s use to
interrupt any other command in your terminal.
(typically Ctrl-C on Windows and Cmd-C in MacOs).&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;interacting-with-a-container&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; Interacting with a container&lt;/h2&gt;
&lt;p&gt;An application running in a container might need to interact
with the user.
For instance, the Linux
command &lt;code&gt;rev&lt;/code&gt; reverses whatever
the user types on the keyboard.
In order to interact with a container, you should use the option
&lt;code&gt;-it&lt;/code&gt; of &lt;code&gt;docker run&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-8&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.9  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;em&gt;alpine&lt;/em&gt; to execute the
Linux command &lt;code&gt;rev&lt;/code&gt; and interact with it.
You can stop interacting with &lt;code&gt;rev&lt;/code&gt; by typing Ctrl+C at any time.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm --name rev -it alpine rev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After typing the command, type a word on your keyboard
(e.g., &lt;em&gt;deeps&lt;/em&gt;), press &lt;em&gt;Return&lt;/em&gt; and
you should see the same word reversed (e.g., &lt;em&gt;speed&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;The option &lt;code&gt;-t&lt;/code&gt; opens a guest terminal (so we can see its
output); the option &lt;code&gt;-i&lt;/code&gt; allows you to write directly
into the guest terminal.&lt;/p&gt;
&lt;p&gt;In order to stop using the guest terminal,
you’ll need to press Ctrl+D (both in Windows and MacOs).&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Now run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run  --name my-alpine -it alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; we didn’t use the option &lt;code&gt;--rm&lt;/code&gt; (the container will not be removed
when we stop it, we’re going to use it again).
Moreover, we didn’t specify any command to run in the guest terminal.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-9&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.10  &lt;/strong&gt;&lt;/span&gt;What do you obtain?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;When we run a container from the image &lt;em&gt;alpine&lt;/em&gt;, the command
&lt;code&gt;/bin/sh&lt;/code&gt; is executed within the container.
Since we specified the option &lt;code&gt;-it&lt;/code&gt;, what we obtain is an access to the
Linux terminal running in the container.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;starting-and-stopping-containers.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4&lt;/span&gt; Starting and stopping containers.&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt; is a shorthand for two Docker commands, namely
&lt;code&gt;docker create&lt;/code&gt;, that creates a container from an image,
and &lt;code&gt;docker start&lt;/code&gt;, that starts the container after its creation.&lt;/p&gt;
&lt;p&gt;Suppose now that you want to download a Web page
by using Linux Alpine.
You can use the Linux command &lt;code&gt;wget&lt;/code&gt; followed by the URL of the page
that you want to download.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-10&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.11  &lt;/strong&gt;&lt;/span&gt;By using the guest terminal
in the container &lt;em&gt;my-alpine&lt;/em&gt;,
download
&lt;a href=&#34;https://www.centralesupelec.fr/fr/presentation&#34; target=&#34;_blank&#34;&gt;this Web page&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Where will the Web page be saved? The host computer or the container?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Just type in &lt;em&gt;my-alpine&lt;/em&gt; guest terminal the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;wget https://www.centralesupelec.fr/fr/presentation&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The Web page will be saved in the current directory
of the container. You can verify that the file is there
by typing &lt;code&gt;ls&lt;/code&gt; in the guest terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;In &lt;em&gt;my-alpine&lt;/em&gt; guest terminal type &lt;code&gt;exit&lt;/code&gt;.
This closes the guest terminal and, as a result, stops the
container.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stopping the container will not erase any of the files
stored in the container. Removing the container will.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you want to start the container &lt;em&gt;my-alpine&lt;/em&gt; again, you can
use the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container start -ai my-alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will open the guest terminal of the container again;
type &lt;code&gt;ls&lt;/code&gt; to verify that
the Web page that you downloaded before is still there.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;simple-use-case&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.5&lt;/span&gt; A simple use case&lt;/h2&gt;
&lt;p&gt;Suppose that you need to download all the figures of
&lt;a href=&#34;https://www.centralesupelec.fr/fr/presentation&#34; target=&#34;_blank&#34;&gt;this Web page&lt;/a&gt;.
The Linux utility &lt;code&gt;wget&lt;/code&gt; comes in handy.
However, you don’t have Linux and you’d like to
avoid the hassle of installing it on your computer, or in a virtual machine,
just for this task.&lt;/p&gt;
&lt;p&gt;A great alternative is to run Linux in a Docker container.
Unfortunately, the Alpine distribution that we’ve been playing
with doesn’t provide
an implementation of &lt;code&gt;wget&lt;/code&gt; with all the options that we need.&lt;/p&gt;
&lt;p&gt;We turn to another Linux distribution, &lt;strong&gt;Ubuntu&lt;/strong&gt;,
for which DockerHub has
&lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34; target=&#34;_blank&#34;&gt;several images&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-11&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 1.12  &lt;/strong&gt;&lt;/span&gt;Run a container with Ubuntu 19.10 and open a guest terminal.
Call the container &lt;em&gt;dl-figures&lt;/em&gt;, and avoid the option
&lt;code&gt;--rm&lt;/code&gt;, we’ll use this container later.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --name dl-figures -it ubuntu:19.10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you look at the DockerHub registry Web page
&lt;a href=&#34;https://hub.docker.com/_/ubuntu/&#34; target=&#34;_blank&#34;&gt;describing Ubuntu&lt;/a&gt;,
you’ll see that the version 19.10 has many tags, including &lt;em&gt;19.10&lt;/em&gt;,
&lt;em&gt;eoan-20200313&lt;/em&gt;, &lt;em&gt;eoan&lt;/em&gt;, &lt;em&gt;rolling&lt;/em&gt;.
You can use any of these tags to download the image.
Another way to write the previous command is:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --name dl-figures -it ubuntu:eoan&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;From now on, we’ll be interacting with the guest Ubuntu terminal.
If you type the command &lt;code&gt;wget&lt;/code&gt;,
you’ll get an error (&lt;code&gt;bash: wget: command not found&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The image &lt;em&gt;Ubuntu&lt;/em&gt; doesn’t include all the commands that you’d find
in a full-blown Ubuntu distribution;
the reason is to keep the size of the image small,
a necessary constraint given that
images are transferred over the Internet.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Luckily, there’s a way to install &lt;code&gt;wget&lt;/code&gt; in our Ubuntu distribution.
Ubuntu provides a powerful command-line package manager called
&lt;strong&gt;Advanced Package Tool&lt;/strong&gt; (APT).
First, you need to run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;apt-get update&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which fetches the available packages from a list of sources
available in file &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, you can install &lt;code&gt;wget&lt;/code&gt; by running the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;apt-get install -y wget&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to obtain all the figures from a
Web page, type the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;wget -nd -H -p -P /my-figures -A jpg,jpeg,png,gif -e robots=off -w 0.5 https://www.centralesupelec.fr/fr/presentation&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see in the current directory a new folder
named &lt;em&gt;my-figures&lt;/em&gt; containing the downloaded figures;
verify it by typing &lt;code&gt;ls my-figures&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before terminating, don’t forget to read your fortune cookie.
In the shell, run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;apt-get install -y fortune&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;/usr/games/fortune -s&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you’re done, you can simply type the command &lt;code&gt;exit&lt;/code&gt; to quit
the guest terminal and stop the container.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You might wonder how you can transfer the downloaded figures
from the container to the host computer.
We’ll see that later
when we introduce the notion of &lt;strong&gt;volumes&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-images&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Creating Images&lt;/h1&gt;
&lt;p&gt;A Docker image can be thought of as a template to create and run a container.
An image is a file that contains a &lt;strong&gt;layered filesystem&lt;/strong&gt; with each layer being &lt;strong&gt;immutable&lt;/strong&gt;;
this means that the files that belong to a layer cannot be
modified or deleted, nor can files be added to a layer.&lt;/p&gt;
&lt;p&gt;When a container is created from an image, it
will be composed of all the image read-only layers and, on top of
them, a writable layer (termed the &lt;strong&gt;container layer&lt;/strong&gt;),
where all the new files created in the container will be written.
For example, the figures that we downloaded in the container
&lt;em&gt;dl-figures&lt;/em&gt; were stored in the writable layer of that container.&lt;/p&gt;
&lt;div id=&#34;interactive-image-creation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Interactive image creation&lt;/h2&gt;
&lt;p&gt;When we run the container &lt;em&gt;dl-figures&lt;/em&gt; in Section &lt;a href=&#34;#simple-use-case&#34;&gt;1.5&lt;/a&gt;,
we modified the container to
install the command &lt;code&gt;wget&lt;/code&gt;.
You can see the modifications by typing the
following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker diff dl-figures&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output consists of a list of files tagged with the letter A, C or D, indicating
respectively that the file has been added (A), changed (C) or deleted (D).
In this list you’ll find the downloaded figures, as well as
other files that have been added or modified or deleted
when we installed &lt;code&gt;wget&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-12&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.1  &lt;/strong&gt;&lt;/span&gt;If layers, except the top one, are immutable,
how can files that belong to the lower layers be modified or deleted?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;All files marked with A are new and therefore are
added to the writable layer of the container.&lt;/p&gt;
&lt;p&gt;As for the existing files, they live in the immutable layers
of the image, and therefore cannot be touched directly.
Instead, they are copied from the bottom layers to the writable layer where
they are modified.
This strategy is called &lt;strong&gt;copy-on-write&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The structure of layers generates a &lt;strong&gt;layered filesystem&lt;/strong&gt; in the image;
if different copies of the same file exist in different layers,
the copy in the uppermost layer
overwrites the others.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;We can create a new image from the container &lt;em&gt;dl-figures&lt;/em&gt;, one that provides
a Ubuntu distribution with the command &lt;code&gt;wget&lt;/code&gt; already installed,
with the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker commit dl-figures ubuntu-with-wget&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The command creates a new image called &lt;em&gt;ubuntu-with-wget&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-14&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.2  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;em&gt;ubuntu-with-wget&lt;/em&gt; and verify that the command
&lt;em&gt;wget&lt;/em&gt; is actually installed.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Just type the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it ubuntu-with-wget&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the guest terminal type &lt;code&gt;wget&lt;/code&gt;: you should see the
following output:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;wget: missing URL
Usage: wget [OPTION]... [URL]...

Try `wget --help` for more options.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;dockerfiles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Dockerfiles&lt;/h2&gt;
&lt;p&gt;The interactive creation of an image is a manual, and therefore inefficient, process.
The most common way to create an image is to use a &lt;strong&gt;Dockerfile&lt;/strong&gt;, a
text file that contains all the instructions necessary to
build the image.
The advantage of the Dockerfile is that it can be interpreted
by the Docker engine, which makes the creation of images an automated
and repeatable task.&lt;/p&gt;
&lt;p&gt;Inspired by the previous example, suppose that we want to create a containerized
application to download figures from a Web page.
As a template for this application, we need to build a new
image, that we’ll call &lt;em&gt;fig-downloader&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The Dockerfile containing the instructions to build the image
&lt;em&gt;fig-downloader&lt;/em&gt; is as follows:&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM ubuntu:eoan
RUN apt-get update
RUN apt-get install -y wget
RUN mkdir -p /my-figures
WORKDIR /my-figures
ENTRYPOINT [&amp;quot;wget&amp;quot;, &amp;quot;-nd&amp;quot;, &amp;quot;-r&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;jpg,jpeg,bmp,png,gif&amp;quot;]
CMD [&amp;quot;https://www.centralesupelec.fr/fr/presentation&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the explanation:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;We use the image &lt;em&gt;ubuntu:eoan&lt;/em&gt; as the &lt;strong&gt;base image&lt;/strong&gt;.
This corresponds to the instruction &lt;code&gt;FROM ubuntu:eoan&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We install the utility &lt;code&gt;wget&lt;/code&gt; in the base image.
This corresponds to the
instructions &lt;code&gt;RUN apt-get update&lt;/code&gt; and &lt;code&gt;RUN apt-get install -y wget&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We create a directory &lt;em&gt;my-figures&lt;/em&gt; under the root directory of the image.
This corresponds to the instruction &lt;code&gt;RUN mkdir -p /my-figures&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We set the newly created directory &lt;em&gt;/my-figures&lt;/em&gt; as the
&lt;strong&gt;working directory&lt;/strong&gt; of the image. This corresponds to the
instruction &lt;code&gt;WORKDIR /my-figures&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We specify the command to be executed when a container is run from this image.
This corresponds to the instruction &lt;code&gt;ENTRYPOINT [&amp;quot;wget&amp;quot;, &amp;quot;-nd&amp;quot;, &amp;quot;-r&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;jpg,jpeg,bmp,png,gif&amp;quot;]&lt;/code&gt;.
This instruction means: execute &lt;code&gt;wget&lt;/code&gt; with the options
&lt;code&gt;-nd&lt;/code&gt;, &lt;code&gt;-r&lt;/code&gt;, &lt;code&gt;-A&lt;/code&gt;;
the last option takes a list of file
extensions (&lt;code&gt;jpg,jpeg,bmp,png,gif&lt;/code&gt;) as its argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remember that the utility &lt;code&gt;wget&lt;/code&gt; takes the URL of the Web page as
an argument. The URL will be specified when we run the container from
the image &lt;em&gt;fig-downloader&lt;/em&gt;.
Optionally, we can specify a default argument by using the
keyword CMD. The meaning of the instruction
&lt;code&gt;CMD [&amp;quot;https://www.centralesupelec.fr/fr/presentation&amp;quot;]&lt;/code&gt; is:
if we don’t give any URL when we run the container, the figures will
be downloaded from
&lt;a href=&#34;https://www.centralesupelec.fr/fr/presentation&#34; class=&#34;uri&#34; target=&#34;_blank&#34;&gt;https://www.centralesupelec.fr/fr/presentation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-15&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.3  &lt;/strong&gt;&lt;/span&gt;What’s the relation between the Dockerfile lines and the image layers?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Each line corresponds to a new layer.
The first line corresponds to the bottom layer;
the last line to the top layer.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:dockerfile-creation&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.4  &lt;/strong&gt;&lt;/span&gt;Could you identify a problem in this Dockerfile?
Modify the Dockerfile accordingly.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;When creating an image, we should keep the number of layers relatively
small; in fact, the more the layers, the bigger the image will be.
Here we create three separate layers with three RUN commands; we can
simply merge the three layers.
The resulting Dockerfile will be:&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM ubuntu:eoan
RUN apt-get update &amp;amp;&amp;amp; \
    apt-get install -y wget &amp;amp;&amp;amp; \
    mkdir -p /my-figures
WORKDIR /my-figures
ENTRYPOINT [&amp;quot;wget&amp;quot;, &amp;quot;-nd&amp;quot;, &amp;quot;-r&amp;quot;, &amp;quot;-A&amp;quot;, &amp;quot;jpg,jpeg,bmp,png,gif&amp;quot;]
CMD [&amp;quot;https://www.centralesupelec.fr/fr/presentation&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;building-an-image&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; Building an image&lt;/h2&gt;
&lt;p&gt;We’re now going to build an image from a Dockerfile.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Create a directory named &lt;em&gt;fig-downloader&lt;/em&gt; in your computer with
a file named &lt;em&gt;Dockerfile&lt;/em&gt; inside.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the &lt;em&gt;Dockerfile&lt;/em&gt; write the set of instructions that
you proposed in Exercise &lt;a href=&#34;#exr:dockerfile-creation&#34;&gt;2.4&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the terminal, set the working directory to &lt;em&gt;fig-downloader&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build an image called &lt;em&gt;fig-downloader&lt;/em&gt; by executing the following command:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker build -t fig-downloader .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;.&lt;/code&gt; at the end of the command means that the Docker engine will
look for a file named &lt;em&gt;Dockerfile&lt;/em&gt; in the working directory.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-16&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.5  &lt;/strong&gt;&lt;/span&gt;Once the image is built, type the command &lt;code&gt;docker image ls -a&lt;/code&gt;.
What are the images with repository and tag &lt;code&gt;&amp;lt;none&amp;gt;&lt;/code&gt;?
Why are there three of such images?
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;These are the &lt;strong&gt;intermediate images&lt;/strong&gt;.
Once a layer is compiled, an intermediate image is created that
contains that layer and all the layers underneath.
In other words, the intermediate image
corresponding to the layer &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; contains all files
up to the layer &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;, including layers 1 through &lt;span class=&#34;math inline&#34;&gt;\(i-1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The intermediate layers are used by the &lt;strong&gt;build cache&lt;/strong&gt;,
of which we’ll see an example later.&lt;/p&gt;
&lt;p&gt;Although there are five layers in the new image, there are only
three intermediate images because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the base image is &lt;em&gt;ubuntu:eoan&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;the image corresponding to the top layer is the final image &lt;em&gt;fig-downloader&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox curiosity&#34;&gt;
&lt;p&gt;&lt;strong&gt;Good to know&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you give the Dockerfile a different name (say, &lt;em&gt;Dockerfile-fig-downloader&lt;/em&gt;),
the command to build the image will be:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker build -t fig-downloader -f Dockerfile-fig-downloader .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The option &lt;code&gt;-f&lt;/code&gt; is used to specify the name of the Dockerfile.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Let’s dive deeper into the anatomy of an image.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-17&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.6  &lt;/strong&gt;&lt;/span&gt;Run the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker history fig-downloader&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and analyze the layers of the new image.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why do some layers have an ID, while others
are marked as &lt;i&gt;missing&lt;/i&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Can you find the identifiers of the intermediate images?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The layers with an ID correspond to the layers of
the new image, including the top layer and the base image.
The layers marked as &lt;em&gt;missing&lt;/em&gt; are those that compose the
base image. Those layers are not stored in&lt;br /&gt;
your computer,
simply because they belong to an image
that hasn’t been built on your computer
and you downloaded from the DockerHub registry.&lt;/p&gt;
&lt;p&gt;By looking at the output of &lt;code&gt;docker image ls -a&lt;/code&gt; and the output of this command,
we see that the layers between the base image and the top layer have the
same identifiers as the intermediate images.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:dl-1-container&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.7  &lt;/strong&gt;&lt;/span&gt;Run the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run --name dl-1 fig-downloader&lt;/code&gt;&lt;/p&gt;
What does it do? Where are the downloaded pictures?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We downloaded the figures
of the page &lt;a href=&#34;https://www.centralesupelec.fr/fr/presentation&#34; class=&#34;uri&#34; target=&#34;_blank&#34;&gt;https://www.centralesupelec.fr/fr/presentation&lt;/a&gt;.
The downloaded pictures are in the folder &lt;em&gt;/my-figures&lt;/em&gt;
of the container &lt;em&gt;dl-1&lt;/em&gt;.
For now, don’t worry about accessing them.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-18&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.8  &lt;/strong&gt;&lt;/span&gt;Run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --name dl-2 fig-downloader https://www.centralesupelec.fr/fr/nos-campus&lt;/code&gt;&lt;/pre&gt;
What does it do? Where are the downloaded pictures?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We downloaded the figures
of the page &lt;a href=&#34;https://www.centralesupelec.fr/fr/nos-campus&#34; class=&#34;uri&#34; target=&#34;_blank&#34;&gt;https://www.centralesupelec.fr/fr/nos-campus&lt;/a&gt;.
We basically overwrote the URL specified by the CMD keyword with a new
one.
The downloaded pictures are in the folder &lt;em&gt;/my-figures&lt;/em&gt;
of the container &lt;em&gt;dl-2&lt;/em&gt;.
For now, don’t worry about accessing these figures.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;containerized-python-application&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4&lt;/span&gt; Containerized Python application&lt;/h2&gt;
&lt;p&gt;Download &lt;a href=&#34;/courses/cloud-computing/tutorial-docker/word-frequency.zip&#34;&gt;this archive file&lt;/a&gt;
and unzip it into your working directory.
In this archive you’ll find:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Dockerfile.&lt;/li&gt;
&lt;li&gt;A Python script &lt;em&gt;main.py&lt;/em&gt; that asks the user to enter the URL and the language of a Web page,
and prints the 10 most frequent words occurring in that page.&lt;/li&gt;
&lt;li&gt;A file &lt;em&gt;requirements.txt&lt;/em&gt; with the list of the Python packages
needed to run the given script.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The content of the Dockerfile is as follows:&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM python:3.7-slim
RUN mkdir -p /app
WORKDIR /app
COPY ./main.py ./requirements.txt /app/
RUN pip install -r requirements.txt
ENTRYPOINT [&amp;quot;python&amp;quot;, &amp;quot;main.py&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-19&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.9  &lt;/strong&gt;&lt;/span&gt;Describe what this Dockerfile does.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Takes &lt;em&gt;python:3.7-slim&lt;/em&gt; as the base image.&lt;/li&gt;
&lt;li&gt;Creates a new folder &lt;em&gt;app&lt;/em&gt; in the image under the root directory.&lt;/li&gt;
&lt;li&gt;Changes the working directory to &lt;em&gt;/app&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Copies the files &lt;em&gt;main.py&lt;/em&gt; and &lt;em&gt;requirements.txt&lt;/em&gt; from the local
computer to the directory &lt;em&gt;/app&lt;/em&gt; in the image.&lt;/li&gt;
&lt;li&gt;Runs the command &lt;code&gt;pip install&lt;/code&gt; to install the Python libraries
specified in the file &lt;em&gt;requirements.txt&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Executes the command &lt;code&gt;python main.py&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34; word-latex=&#34;{exercisebox}&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-20&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.10  &lt;/strong&gt;&lt;/span&gt;Build an image called &lt;em&gt;wordfreq&lt;/em&gt; from this Dockerfile.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker build -t wordfreq .&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-21&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.11  &lt;/strong&gt;&lt;/span&gt;Without changing the Dockerfile, rebuild the same image.
What do you notice?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The build is very fast.
Since we didn’t change the Dockerfile, the image
is rebuilt by using the image layers created
previously.
This is clearly indicated by the phrase &lt;strong&gt;using cache&lt;/strong&gt; written
at each layer.
Using the already stored layers is called &lt;strong&gt;build cache&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-22&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.12  &lt;/strong&gt;&lt;/span&gt;What happens if you modify a line in the Python script and
you rebuild the image?
Is the build cache still used?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Add any instruction at the end of &lt;em&gt;main.py&lt;/em&gt;, such as:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;I added this line&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then rebuild the image.
The three bottom layers are not affected by the modification, therefore
they benefit from the build cache.
Layer 4 is the first affected by the modification.
This layer, and those above, need therefore to be
rebuilt.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-23&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.13  &lt;/strong&gt;&lt;/span&gt;Considering how the build cache is used in Docker,
can you tell what’s wrong with this Dockerfile?
Modify the Dockerfile accordingly and rebuild the image.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Each time we modify &lt;em&gt;main.py&lt;/em&gt; and we rebuild the image,
the layer 4 and 5 are recreated, meaning that all the Python packages
are downloaded and installed.
Depending on the size and number of the packages, this might
take some while.
A better way to structure the Dockerfile is to install the
packages before copying the Python script to the image.
Here is how we should modify the Dockerfile:&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM python:3.7-slim
RUN mkdir -p /app
WORKDIR /app
COPY ./requirements.txt /app/
RUN pip install -r requirements.txt
COPY ./main.py /app/
ENTRYPOINT [&amp;quot;python&amp;quot;, &amp;quot;main.py&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-24&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 2.14  &lt;/strong&gt;&lt;/span&gt;Modify &lt;em&gt;main.py&lt;/em&gt; by adding a new line of code and rebuild the image.
What changed?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The Python packages are not reinstalled, as a result rebuilding the image&lt;br /&gt;
takes much less time than before.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-volumes&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Data Volumes&lt;/h1&gt;
&lt;p&gt;In Exercise &lt;a href=&#34;#exr:dl-1-container&#34;&gt;2.7&lt;/a&gt; you’ve been asked to run a container named
&lt;em&gt;dl-1&lt;/em&gt; to download some figures from a Web page.
The figures were downloaded into the
directory &lt;em&gt;/my-figures&lt;/em&gt; of the container.
But we left a question unanswered.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do we transfer those figures from the container to the host computer?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One way to go about that is to run the following command in the host terminal:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker cp dl-1:/my-figures .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will copy the directory &lt;em&gt;/my-figures&lt;/em&gt; from the container &lt;em&gt;dl-1&lt;/em&gt; to
the host computer working directory.
You can verify it by yourself.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-25&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.1  &lt;/strong&gt;&lt;/span&gt;Can you tell why this solution is less than ideal?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;After running the container we need to do an additional action to copy
the figures from the container to the host computer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The container is created and run only to download some figures.
We’d like to remove it automatically (with the option &lt;code&gt;--rm&lt;/code&gt;) when its
execution is over. However, if we do so, the pictures will be lost before
we can copy them to the host computer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div id=&#34;using-a-host-volume&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Using a host volume&lt;/h2&gt;
&lt;p&gt;A better solution is to &lt;strong&gt;mount&lt;/strong&gt; (i.e., attach)
a directory of the host computer at the container’s directory
&lt;em&gt;/my-figures&lt;/em&gt; when we run it.
Let’s see how it works.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Create a directory named &lt;em&gt;figs-volume&lt;/em&gt; in your working directory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Type and execute the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -v $(pwd)/figs-volume:/my-figures fig-downloader&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command runs a container from the image &lt;em&gt;fig-downloader&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;With the option &lt;code&gt;-v&lt;/code&gt; we specify that we want to mount the directory
&lt;em&gt;$(pwd)/figs-volume&lt;/em&gt; (&lt;em&gt;$(pwd)&lt;/em&gt; indicates the host working directory)
at the directory &lt;em&gt;figs-volume&lt;/em&gt; in the container;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The option &lt;code&gt;--rm&lt;/code&gt; indicates that we want the container to be
removed when its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; Verify that the pictures are in the folder &lt;em&gt;figs-volume&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In this example, we’ve used the directory &lt;em&gt;figs-volume&lt;/em&gt; as a
&lt;strong&gt;volume&lt;/strong&gt; (essentially, an external storage area) of the container;
when the container is destroyed, the volume remains with all its data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;docker-volumes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; Docker volumes&lt;/h2&gt;
&lt;p&gt;In the example that we’ve just described, we’ve used a host
directory as a volume.
This is useful when we, or an application running on the host, need
to access the files produced by a container.
In all the other cases, a container should use a &lt;strong&gt;Docker volume&lt;/strong&gt;, which
is managed directly by the Docker engine.&lt;/p&gt;
&lt;p&gt;Let’s create a new Docker volume called &lt;em&gt;data-volume&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker volume create data-volume&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox curiosity&#34;&gt;
&lt;p&gt;&lt;strong&gt;Good to know (advanced notion)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where the data will be actually stored?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can inspect the new volume by typing the
following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker volume inspect data-volume&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;em&gt;mount point&lt;/em&gt; is indicated; that’s the folder where the data
will be actually stored.
If your computer runs Linux, that folder will be available
on the host; if your computer runs Windows or MacOS,
you’ll not find that folder on your computer.
Instead, it will be available in the virtual machine
that Docker use on MacOS and Windows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do you want to see the directory? (Instructions for MacOS)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One way to look into the hidden VM is to run
the following containerized application:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run -it --rm --privileged --pid=host justincormack/nsenter1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This application will open a guest terminal into the VM.
You can then use the commands &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;
to browse to the directory indicated as the mount path
of the new volume.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sharing-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.1&lt;/span&gt; Sharing data&lt;/h3&gt;
&lt;p&gt;A Docker volume can be used to share data between containers.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-26&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.2  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;code&gt;ubuntu:eoan&lt;/code&gt;,
specifying the options to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Remove the container once its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interact with the guest Linux terminal in the container.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Mount the volume &lt;em&gt;data-volume&lt;/em&gt; at the container’s directory &lt;em&gt;/data&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it -v data-volume:/data ubuntu:eoan &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-27&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.3  &lt;/strong&gt;&lt;/span&gt;Type a command in the guest Linux terminal to create a file
&lt;em&gt;test-file.txt&lt;/em&gt; in the directory &lt;em&gt;/data&lt;/em&gt;.
Verify that the file is created.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;echo &amp;quot;This is a new file&amp;quot; &amp;gt; /data/test-file.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;creates a file &lt;em&gt;test-file.txt&lt;/em&gt; with the line of text
“This is a new file”.&lt;/p&gt;
&lt;p&gt;In order to verify that the file is created, we can
type the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;ls /data/test-file.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see the content of the file, we can type:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;cat /data/test-file.txt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-28&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.4  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;em&gt;alpine:latest&lt;/em&gt;,
specifying the options to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Remove the container once its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interact with the guest Linux terminal in the container.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Mount the volume &lt;em&gt;data-volume&lt;/em&gt; to the directory &lt;em&gt;/my-data&lt;/em&gt;
of the container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container run --rm -it -v data-volume:/my-data alpine&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-29&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.5  &lt;/strong&gt;&lt;/span&gt;Verify that you can read the file &lt;em&gt;test-file.txt&lt;/em&gt;.
Which folder would you look in?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We need to look in the folder &lt;em&gt;/my-data&lt;/em&gt; because this is where
we mounted &lt;em&gt;data-volume&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;cat /my-data/test-file.txt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;In the guest terminals of both containers type &lt;code&gt;exit&lt;/code&gt;.
This will terminate and destroy (since we used
the option &lt;code&gt;--rm&lt;/code&gt;) the containers.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-30&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 3.6  &lt;/strong&gt;&lt;/span&gt;Will the file &lt;em&gt;test-file.txt&lt;/em&gt; be removed?
Why?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;No. The file that we created before has been saved in the volume
&lt;em&gt;data-volume&lt;/em&gt;. Volumes are a way to persist data beyond the life span
of a container.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;single-host-networking&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Single-Host Networking&lt;/h1&gt;
&lt;p&gt;In order to let containers communicate and, therefore, co-operate,
Docker defines a simple networking model known as
the &lt;a href=&#34;/courses/cloud-computing/references/docker-primer#single-host-networking&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;container network model&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-31&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.1  &lt;/strong&gt;&lt;/span&gt;Describe the output of the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker network ls&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The command lists all the networks created by Docker on
your computer.
For each network, the values of four attributes are shown:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The identifier.&lt;/li&gt;
&lt;li&gt;The name.&lt;/li&gt;
&lt;li&gt;The driver used by the network.&lt;/li&gt;
&lt;li&gt;The scope of the network (local or global).
A local scope means that the network connects containers
running on the same host, as opposed to a global scope that
means that containers on different hosts can communicate.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending on the containers that you used
in the past, you might see different networks.
However, three networks are worth noting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The network named &lt;strong&gt;bridge&lt;/strong&gt;, that uses the driver &lt;strong&gt;bridge&lt;/strong&gt; and a local scope.
By default, any new container is attached to this network.&lt;/li&gt;
&lt;li&gt;The network named &lt;strong&gt;host&lt;/strong&gt;, that uses the driver &lt;strong&gt;host&lt;/strong&gt; and a local scope.
It’s used when we want a container to directly use the network interface of the host.
It’s important to remember that this network should only be used when analyzing the
host’s network traffic. In the other cases, using this network exposes
the container to all sorts of security risks.&lt;/li&gt;
&lt;li&gt;The network named &lt;strong&gt;none&lt;/strong&gt;, that uses the driver &lt;strong&gt;null&lt;/strong&gt; and a local scope.
Attaching a container to this network means that the container
isn’t connected to any network, and therefore it’s completely isolated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-32&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.2  &lt;/strong&gt;&lt;/span&gt;The following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker network inspect bridge&lt;/code&gt;&lt;/p&gt;
outputs the configuration of the network &lt;strong&gt;bridge&lt;/strong&gt;.
By looking at this configuration, can you tell
what IP addresses will be given to the containers attached to this
network? What’s the IP address of the router of this network?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The information is specified in the field named &lt;strong&gt;IPAM&lt;/strong&gt;, more specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Subnet&lt;/strong&gt; indicates the range of IP addresses used by the network.
The value of this field should be 172.17.0.0/16;
the addresses range from 172.17.0.1 to 172.17.255.255.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Gateway&lt;/strong&gt; indicates the IP address of the router of the network.
The value should be 172.17.0.1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div id=&#34;creating-networks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1&lt;/span&gt; Creating networks&lt;/h2&gt;
&lt;p&gt;By default, any new container is attached to the network named &lt;em&gt;bridge&lt;/em&gt;.
As a result, all new containers will be able to communicate over this network.
This is not a good idea.
If a hacker can compromise any of these containers, s/he might
be able to attack the other containers as well.
As a rule of thumb, we should attach two containers to the same network &lt;strong&gt;only&lt;/strong&gt; on a
need-to-communicate basis.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-33&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.3  &lt;/strong&gt;&lt;/span&gt;What if a container doesn’t need to use the network at all?
Try to run a container from the image &lt;em&gt;alpine&lt;/em&gt;
disconnected from all networks and
verify that you cannot ping the URL
&lt;a href=&#34;http://www.google.com&#34; target=&#34;_blank&#34;&gt;www.google.com&lt;/a&gt;.&lt;/p&gt;
Look at the &lt;a href=&#34;/courses/cloud-computing/references/docker-cheat-sheet&#34; target=&#34;_blank&#34;&gt;Docker cheat sheet&lt;/a&gt;
to learn how to attach a container to a network.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We should attach the container to the network &lt;strong&gt;none&lt;/strong&gt;.
As an example, we run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --network none alpine /bin/sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we try to ping www.google.com as follows:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;ping www.google.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We should obtain the following message:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;bad address &amp;#39;www.google.com&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Type the command &lt;code&gt;exit&lt;/code&gt; to quit the container.&lt;/p&gt;
&lt;p&gt;Instead, if we run Linux Alpine without specifying the network
(meaning that the container will be attached to the network &lt;em&gt;bridge&lt;/em&gt;):&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it  alpine /bin/sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we try to ping www.google.com, we should get an answer.
In some cases, the command ping would just hang and show no
output; this is usually fixed by restarting Docker.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;In order to create a new network, you can use the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker network create network_name&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-34&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.4  &lt;/strong&gt;&lt;/span&gt;Create two networks named &lt;em&gt;buckingham&lt;/em&gt; and &lt;em&gt;rochefort&lt;/em&gt; that
use the driver &lt;em&gt;bridge&lt;/em&gt;.
By using the &lt;code&gt;docker network inspect&lt;/code&gt; command,
look at the IP addresses of the new networks and write them down.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Just run the following commands:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker network create buckingham
docker network create rochefort&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IP addresses for the network &lt;em&gt;buckingham&lt;/em&gt; are
172.18.0.0/16 (addresses from 172.18.0.1 to 172.18.255.255);
The IP addresses for the network &lt;em&gt;rochefort&lt;/em&gt; are:
172.19.0.0/16 (assuming that you create &lt;em&gt;buckingham&lt;/em&gt;
before &lt;em&gt;rochefort&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;The IP addresses may be different on your machines.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-35&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.5  &lt;/strong&gt;&lt;/span&gt;Create three containers &lt;em&gt;athos&lt;/em&gt;, &lt;em&gt;porthos&lt;/em&gt; and &lt;em&gt;aramis&lt;/em&gt; and attach them
to the two networks &lt;em&gt;buckingham&lt;/em&gt; and &lt;em&gt;rochefort&lt;/em&gt; as displayed
&lt;a href=&#34;/courses/cloud-computing/references/docker-primer#fig:cnm&#34; target=&#34;_blank&#34;&gt;in this figure&lt;/a&gt;.
&lt;strong&gt;The three containers will open a Linux Alpine shell&lt;/strong&gt;.
You’ll need to launch the commands in three separate tabs of your terminal window.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What will the IP addresses of the three containers be in the two networks?
Remember that &lt;em&gt;porthos&lt;/em&gt; is attached to two networks, therefore it’ll have two
network interfaces (endpoints) and, as a result, two IP addresses.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Verify your answers by inspecting the two networks (use the
command &lt;code&gt;docker network inspect&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Here are the commands to run &lt;em&gt;athos&lt;/em&gt; and &lt;em&gt;aramis&lt;/em&gt; while connecting
them to &lt;em&gt;buckingham&lt;/em&gt; and &lt;em&gt;rochefort&lt;/em&gt; respectively.&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name athos --network buckingham  alpine /bin/sh
docker run --rm -it --name aramis --network rochefort   alpine /bin/sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the command to run &lt;em&gt;porthos&lt;/em&gt; and attach it to
&lt;em&gt;buckingham&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name porthos --network buckingham   alpine /bin/sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following command attaches &lt;em&gt;porthos&lt;/em&gt; to the second network &lt;em&gt;rochefort&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker network connect rochefort porthos&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As for the IP addresses, each network has IP addresses
in the range 172.x.0.0/16, where x is 18 in the
network &lt;em&gt;buckingham&lt;/em&gt; and 19 in the network &lt;em&gt;rochefort&lt;/em&gt;.
The address 172.x.0.1 is reserved for the router.
Therefore, the containers will be assigned
IP addresses from 172.x.0.2.
In this solution, we created &lt;em&gt;athos&lt;/em&gt;, &lt;em&gt;aramis&lt;/em&gt; and &lt;em&gt;portos&lt;/em&gt;
in this order.
Therefore, the IP addresses will be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In network &lt;em&gt;buckingham&lt;/em&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;athos&lt;/em&gt;: 172.18.0.2&lt;/li&gt;
&lt;li&gt;&lt;em&gt;porthos&lt;/em&gt;: 172.18.0.3&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;In network &lt;em&gt;rochefort&lt;/em&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;aramis&lt;/em&gt;: 172.19.0.2&lt;/li&gt;
&lt;li&gt;&lt;em&gt;porthos&lt;/em&gt;: 172.19.0.3&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can actually verify this configuration by inspecting
the two networks with the following commands:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker network inspect buckingham
docker network inspect rochefort&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IP addresses might be different on your machines.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;communication-between-containers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2&lt;/span&gt; Communication between containers&lt;/h2&gt;
&lt;p&gt;Let’s see if and when the three containers can communicate.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-36&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.6  &lt;/strong&gt;&lt;/span&gt;Which containers are able to communicate?
Justify your answer.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The only containers that cannot communicate are &lt;em&gt;athos&lt;/em&gt; and &lt;em&gt;aramis&lt;/em&gt;,
because they’re not connected to the same network.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-37&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.7  &lt;/strong&gt;&lt;/span&gt;Try to ping &lt;em&gt;porthos&lt;/em&gt; from &lt;em&gt;athos&lt;/em&gt; by using its IP address.&lt;/p&gt;
&lt;div class=&#34;last-child&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Which IP address of &lt;em&gt;porthos&lt;/em&gt; would you use?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We need to use the IP address assigned to the endpoint linking
&lt;em&gt;porthos&lt;/em&gt; to the network &lt;em&gt;buckingham&lt;/em&gt;, to which &lt;em&gt;athos&lt;/em&gt; is connected.
In our case, this is 172.18.0.3.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-38&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.8  &lt;/strong&gt;&lt;/span&gt;Try to ping &lt;em&gt;porthos&lt;/em&gt; from &lt;em&gt;athos&lt;/em&gt; by using its name.
Do you succeed? Are you surprised?
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We succeed. Indeed, the network &lt;em&gt;buckingham&lt;/em&gt; provides a DNS server, that
can translate names into IP addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;You can now exit the three containers.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;a-containerized-chat-room&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.3&lt;/span&gt; A containerized chat room&lt;/h2&gt;
&lt;p&gt;We developed a simple chat room in Python that you can download
&lt;a href=&#34;/courses/cloud-computing/tutorial-docker/chat-room.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Participants use a &lt;em&gt;client&lt;/em&gt; program to connect to the chat room;
the chat room is managed by a &lt;em&gt;server&lt;/em&gt; application that receives the
client connections and forwards the messages between the users.
The archive contains the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;client.py&lt;/em&gt;. Implementation of the chat room client.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;server.py&lt;/em&gt;. Implementation of the chat room server.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;utils.py&lt;/em&gt;. Library with utility functions used
in both &lt;em&gt;client.py&lt;/em&gt; and &lt;em&gt;server.py&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-39&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.9  &lt;/strong&gt;&lt;/span&gt;By using Dockerfiles, create two images &lt;code&gt;chat-client&lt;/code&gt; and &lt;code&gt;chat-server&lt;/code&gt;
that will be used to run the client and the server in Docker.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;The Dockerfile for the client (let’s call it &lt;em&gt;Dockerfile-client&lt;/em&gt;)
is as follows.&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM python:3.7-slim
RUN mkdir -p /app
WORKDIR /app
COPY ./client.py ./utils.py /app/
ENTRYPOINT [&amp;quot;python&amp;quot;, &amp;quot;client.py&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We build the image with the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker build -t chat-client -f Dockerfile-client .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Dockerfile for the server (let’s call it &lt;em&gt;Dockerfile-server&lt;/em&gt;)
is as follows.&lt;/p&gt;
&lt;pre class=&#34;dockerfile&#34;&gt;&lt;code&gt;FROM python:3.7-slim
RUN mkdir -p /app
WORKDIR /app
COPY ./server.py ./utils.py /app/
ENTRYPOINT [&amp;quot;python&amp;quot;, &amp;quot;server.py&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We build the image with the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker build -t chat-server -f Dockerfile-server .&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;infobox curiosity&#34;&gt;
&lt;p&gt;&lt;strong&gt;Good to know&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first three layers in both images are identical.
Therefore, when building the second image &lt;em&gt;chat-server&lt;/em&gt;
the Docker engine reuses the cached layers
created for the first image.
This is indicated in the output of the
&lt;code&gt;docker build&lt;/code&gt; command with the phrase &lt;em&gt;using cache&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;We’ll now run both containers.
Since they need to communicate, they need to be attached to the same
network (e.g., &lt;em&gt;buckingham&lt;/em&gt;).&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-40&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.10  &lt;/strong&gt;&lt;/span&gt;Run a container from the image &lt;em&gt;server-chat&lt;/em&gt;.
Set the options to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Automatically remove the container once its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the container a name (e.g., &lt;em&gt;server-chat&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The server will print messages on the screen.
In order to see them, you must use the option &lt;code&gt;-t&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, keep in mind that &lt;em&gt;server.py&lt;/em&gt; takes an argument
that is the &lt;strong&gt;port number&lt;/strong&gt; where the server will listen to incoming connections.
Choose a random port number in the interval [49152-65535].&lt;/p&gt;
&lt;strong&gt;What is the IP address of the server?&lt;/strong&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We execute the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container run --rm -t --name chat-server --network buckingham chat-server 64903&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case, the IP address is 172.18.0.2 and port number is 64903&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-41&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.11  &lt;/strong&gt;&lt;/span&gt;
Run a container from the image &lt;em&gt;client-chat&lt;/em&gt;.
Set the options to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Automatically remove the container once its execution is over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the container a name (e.g., &lt;em&gt;client-chat&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since you’ll use the client to write messages in the chat room,
remember to set the option &lt;code&gt;-it&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
The client takes two arguments: the host where the server is running
and the port which the server is listening to.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name chat-client --network buckingham chat-client 172.18.0.2 64903&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of the server host IP address, we can use the
server container name (the network &lt;em&gt;buckingham&lt;/em&gt; has a DNS server).&lt;/p&gt;
&lt;p&gt;As a result, we can run the client as follows:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name chat-client --network buckingham chat-client chat-server 64903&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;Once the client is started, you’ll be prompted to enter your name.
Then you can start writing messages.&lt;/p&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can type &lt;em&gt;#quit&lt;/em&gt; at any moment to exit the chat room (client-side).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type Ctrl-C to stop the server.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Now, suppose that one of your classmates wants to join the chat room, but
s/he’s on another computer.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:unnamed-chunk-42&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.12  &lt;/strong&gt;&lt;/span&gt;Do you think your classmate can connect to the containerized server running in
your machine? Justify your answer.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;No, s/he can’t.
The two containers can communicate only if they’re connected to the same
network.&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;What we need to do here is to expose our server to the outside world.
The server runs in a container &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt; that, in turns, runs on the host machine &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt;.
The server listens to port &lt;span class=&#34;math inline&#34;&gt;\(p_c\)&lt;/span&gt; that is opened &lt;strong&gt;inside the container&lt;/strong&gt;.
We need to map port &lt;span class=&#34;math inline&#34;&gt;\(p_c\)&lt;/span&gt; to a port &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt; in the host computer.
This way, the classmate client will connect to the server by specifying
the &lt;strong&gt;IP address of the host &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt;&lt;/strong&gt; (not &lt;span class=&#34;math inline&#34;&gt;\(c\)&lt;/span&gt;) and &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt; as the port number.&lt;/p&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:unnamed-chunk-43&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.13  &lt;/strong&gt;&lt;/span&gt;Stop both the server and the client.&lt;/p&gt;
Run the server by specifying the option to map port
&lt;span class=&#34;math inline&#34;&gt;\(p_c\)&lt;/span&gt; (e.g., 64903) to port &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt; (e.g., 8080).
As before, attach the server to the network &lt;em&gt;buckingham&lt;/em&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;We need to use the option &lt;code&gt;-p&lt;/code&gt;. The command to run the container is:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name chat-server --network buckingham -p 8080:64903 chat-server 64903&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox warning&#34;&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assuming that the name of the server container is
&lt;em&gt;chat-server&lt;/em&gt;, run the following command:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker container port chat-server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output should look like as follows:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;64903/tcp -&amp;gt; 0.0.0.0:8080&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that the port 64903 (&lt;span class=&#34;math inline&#34;&gt;\(p_c\)&lt;/span&gt;) in the container is mapped to the port
8080 (&lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt;) of the host computer.
When a remote client wants to connect to the server, it’ll use port 8080.
The IP address 0.0.0.0 means that a client can connect to the server
by using any of its IP addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If you’re on the same local network as one of your classmate&lt;/strong&gt;,
do Exercise &lt;a href=&#34;#exr:remote-chat-server&#34;&gt;4.14&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If none of your classmates is on your local network&lt;/strong&gt;, do
Exercise &lt;a href=&#34;#exr:local-chat-server&#34;&gt;4.15&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;span id=&#34;exr:remote-chat-server&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.14  &lt;/strong&gt;&lt;/span&gt;Ask your classmate to connect to your server.
For this, you’ll need to tell your classmate the IP address
of your machine and the port number &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Assuming that the IP address of your machine is 192.168.1.8,
the command will be the following:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name chat-client chat-client 192.168.1.8 8080&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&#34;infobox exercisebox&#34;&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;exercise&#34;&gt;
&lt;p&gt;&lt;span id=&#34;exr:local-chat-server&#34; class=&#34;exercise&#34;&gt;&lt;strong&gt;Exercise 4.15  &lt;/strong&gt;&lt;/span&gt;Since none of your classmates is on your local
network (COVID-19 be damned!), you’ll need to simulate
a distant connection to the server running on your machine.&lt;/p&gt;
&lt;p&gt;Simply run an instance of the client
without attaching it to the network &lt;em&gt;buckingham&lt;/em&gt;.
The IP address of the server will be the IP address of your machine;
the port will be &lt;span class=&#34;math inline&#34;&gt;\(p_h\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt;Solution&lt;/summary&gt;&lt;/p&gt;
&lt;div class=&#34;infobox exosolution&#34;&gt;
&lt;p&gt;Assuming that the IP address of your machine is 192.168.1.8,
the command will be the following:&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;docker run --rm -it --name chat-client chat-client 192.168.1.8 8080&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
