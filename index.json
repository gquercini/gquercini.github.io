[{"authors":["admin"],"categories":null,"content":"Assistant professor at CentraleSupélec's computer science department.\nMember of the LaHDAK team at the Laboratoire Interdisciplinaire des Sciences du Numérique (LISN) (from the merge of LRI and LIMSI).\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Assistant professor at CentraleSupélec's computer science department.\nMember of the LaHDAK team at the Laboratoire Interdisciplinaire des Sciences du Numérique (LISN) (from the merge of LRI and LIMSI).","tags":null,"title":"Gianluca Quercini","type":"authors"},{"authors":null,"categories":null,"content":" Overview This course aims to introduce the main technologies to deal with the many challenges posed by Big Data.\nBig Data is a term used to describe a collection of data that is huge in volume and yet grows exponentially over time. In short, this data is so voluminous and complex that none of the traditional data management tools are capable of storing or processing it efficiently.\nIn the first part, this course introduces the existing technologies that make it possible to efficiently process large volumes of data, namely Hadoop MapReduce and Apache Spark.\nIn the second part, we will study the solutions that allow to store and query these volumes of data; we will focus on a variety of NoSQL databases (using MongoDB as a case study).\n Prerequisites  Basic understanding of how computer systems work: processor, memory, disk operations and functions of the operating system.\n Good knowledge of relational database management systems.\n   Teaching staff  Gianluca Quercini   Course summary 1. Introduction and MapReduce programming.\n Basic notions and motivations of Big Data. Overview of Hadoop. Introduction to MapReduce.  2. Hadoop and its ecosystem: HDFS.\n In-depth description of the Hadoop Distributed File System (HDFS).  3. Introduction to Apache Spark.\n Apache Spark, its architecture and functionalities. Resilient Distributed Datasets: transformations and actions.  4. SparkSQL\n4. Spark streaming\n6. Distributed databases and NoSQL.\n Data distribution (replication, sharding, the CAP theorem).\n Overview of NoSQL databases.\n  7. Document oriented databases: MongoDB.\n Presentation of MongoDB.   ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"cdc33fae1808ae750f7ab3a0b643dad8","permalink":"/courses/bdia_old/overview/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia_old/overview/","section":"courses","summary":"Presentation of the course Big data algorithms, techniques and platforms","tags":null,"title":"Big data algorithms, techniques and platforms","type":"docs"},{"authors":null,"categories":null,"content":" Overview Nowadays, the marketing strategies of most companies are based on the analysis of massive and heterogeneous data that need a considerable amount of computational power. Instead of purchasing new hardware and software infrastructures, companies often resort to the computational and storage power offered by cloud computing platforms over the Internet.\nThe objective of this course is to present the fundamental principles of distributed computing that are at the heart of cloud computing. The course will cover the principles of virtualization and containerization and the methods and tools used for distributed processing (MapReduce and Spark).\n Prerequisites The main prerequisite is the course Information systems and programming:\n Python programming.\n Basic networking notions.\n Basic data management notions.\n  Previous experience with working the command-line terminal and Linux is desired but not essential.\nA beginner introduction to Linux is available here.\n Teaching staff Instructors  Gianluca Quercini\n Francesca Bugiotti\n   Teaching assistants  Arpad Rimmel\n Idir Ait Sadoune\n Marc-Antoine Weisser\n    Required software  Sign up for a free Student subscription on Microsoft Azure\n Docker and Kubernetes. See the installation guide.\n   Course summary Introduction  Context and motivation. Definition of Cloud Computing. Cloud deployment models (public, private, hybrid). Service models (SaaS, PaaS, IaaS). Introduction to public cloud platforms. Getting started with Microsoft Azure.  Virtualization and containerization  Virtualization: definition and implementation. Containerization (Docker). Orchestrators (Docker Swarm and Kubernetes).  Cloud programming and software environments  Parallel computing, programming paradigms. MapReduce - Apache Spark. Arrow - Spark + Argo    Exam Two lab assignments are graded. The final grade will be the average of the two grades.\n ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"e76a719efd772c3d82d45e1d0c32b856","permalink":"/courses/cloud-computing/overview/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/cloud-computing/overview/","section":"courses","summary":"Presentation of the course Distributed and Cloud Computing","tags":null,"title":"Cloud Computing","type":"docs"},{"authors":null,"categories":null,"content":" Overview This course aims to introduce the main technologies to deal with the many challenges posed by Big Data.\nBig Data is a term used to describe a collection of data that is huge in volume and yet grows exponentially over time. In short, this data is so voluminous and complex that none of the traditional data management tools are capable of storing or processing it efficiently.\nIn the first part, this course introduces the existing technologies that make it possible to efficiently process large volumes of data, namely Hadoop MapReduce and Apache Spark.\nIn the second part, we will study the solutions that allow to store and query these volumes of data; we will focus on a variety of NoSQL databases (using MongoDB as a case study).\n Prerequisites  Basic understanding of how computer systems work: processor, memory, disk operations and functions of the operating system.\n Good knowledge of relational database management systems.\n   Teaching staff  Gianluca Quercini   Course summary 1. Introduction and MapReduce programming.\n Basic notions and motivations of Big Data. Overview of Hadoop. Introduction to MapReduce.  2. Hadoop and its ecosystem: HDFS.\n In-depth description of the Hadoop Distributed File System (HDFS).  3. Introduction to Apache Spark.\n Apache Spark, its architecture and functionalities. Resilient Distributed Datasets: transformations and actions.  4. Spark Structured APIs and Structured Streaming\n SparkSQL, Spark streaming.  5. Distributed databases and NoSQL.\n Data distribution (replication, sharding, the CAP theorem).\n Overview of NoSQL databases.\n  6. Document oriented databases: MongoDB.\n Presentation of MongoDB.   ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"143a84392a4b8526c86e86f4828e51f0","permalink":"/courses/big-data-marseille/overview/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/big-data-marseille/overview/","section":"courses","summary":"Presentation of the course Big data algorithms, techniques and platforms","tags":null,"title":"Big data","type":"docs"},{"authors":null,"categories":null,"content":" Tutorial 1 Title: MapReduce programming\nLink: Click here\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"eb94b968125a21115c8a8a36c9e0846a","permalink":"/courses/bdia_old/tutorials/cc-tutorials/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia_old/tutorials/cc-tutorials/","section":"courses","summary":"Presentation of the tutorials of the course.","tags":null,"title":"Tutorials and lab assignments","type":"docs"},{"authors":null,"categories":null,"content":" Tutorial 1 Title: Getting started with Docker\nSupervisors: Francesca Bugiotti, Gianluca Quercini, Arpad Rimmel, Idir Ait Sadoune, Marc-Antoine Weisser\nDate and time: Thursday 22 April, 8:30 AM - 11:45 AM\nRoom: Remotely on Microsoft Teams\nLink: Click here\n Tutorial 2 Title: Introduction to Kubernetes\nSupervisors: Francesca Bugiotti, Gianluca Quercini, Arpad Rimmel, Idir Ait Sadoune, Marc-Antoine Weisser\nDate and time: Thursday 6 May, 8:30 AM - 11:45 AM\nRoom: Remotely on Microsoft Teams\nLink: Click here\n Tutorial 3 Title: Introduction to Kubernetes\nSupervisors: Francesca Bugiotti, Gianluca Quercini, Arpad Rimmel, Idir Ait Sadoune, Marc-Antoine Weisser\nDate and time: Friday 21 May, 1:45 AM - 5 PM\nRoom: Remotely on Microsoft Teams\nLink: Available soon\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"d41cadecab8bb09746ea9ea01e2a42d0","permalink":"/courses/cloud-computing/tutorials/cc-tutorials/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/cloud-computing/tutorials/cc-tutorials/","section":"courses","summary":"Presentation of the tutorials of the course.","tags":null,"title":"Tutorials","type":"docs"},{"authors":null,"categories":null,"content":" Tutorial 1 Title: MapReduce programming\nDate and time: Monday 3 May 2021\nLink: Click here\n Tutorial 2 Title: Introduction to Spark RDD programming\nDate and time: Wednesday 5 May 2021\nLink: Click here\n Tutorial 3 Title: Introduction to DataFrames and SparkSQL\nDate and time: Monday 10 May 2021\nLinks:\n DataFrames\n DataFrames + SQL\n   Lab assignment 1 Title: Apache Spark programming\nDate and time: Wednesday 12 May 2021\nLink: Click here\n Tutorial 4 Title: Apache Structured Streaming\nDate and time: Wednesday 12 May 2021\nLink: Click here\n Lab assignment 2 Title: MongoDB\nDate and time: Wednesday 19 May 2021\nLink: Click here\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f85579f8755ff2ff8b6533862868e6d2","permalink":"/courses/big-data-marseille/tutorials/cc-tutorials/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/big-data-marseille/tutorials/cc-tutorials/","section":"courses","summary":"Presentation of the tutorials of the course.","tags":null,"title":"Tutorials and lab assignments","type":"docs"},{"authors":null,"categories":null,"content":"  1 Windows 1.1 Docker Desktop for Windows 1.2 Docker Toolbox for Windows  2 MacOS 2.1 Docker Desktop for Mac. 2.2 Docker Toolbox for Mac  3 Linux 4 Alternative options 4.1 Docker playground 4.2 Docker in an already prepared virtual machine  5 Verify your installation 6 Interacting with Docker 6.1 Graphical interface  7 Troubleshooting   This document contains information on how to install Docker on your computer.\nAlthough you can access an online Docker environment without installing anything on your computer (see Section 4.1), you should consider this option only if you really cannot install Docker.\nThe installation procedure depends on the operating system that your computer runs.\n1 Windows The installation procedure depends on the Windows version running on your computer.\n1.1 Docker Desktop for Windows If your computer runs Windows 10 64 bits (Pro, Enterprise, or Education, build 15063 or later), you can install Docker Desktop for Windows (recommended).\n Show me more\nHardware prerequisites\n 64 bit processor.\n 4GB system RAM.\n BIOS-level hardware virtualization support must be enabled in the BIOS settings. For more information, see Virtualization.\n  VirtualBox users\nDocker for Windows uses Hyper-V as a virtual machine to run containers. Unfortunately, Hyper-V and VirtualBox are not compatible; when Hyper-V is enabled, VirtualBox will stop working.\nHowever:\n The existing VirtualBox images will not be removed.\n When you want to use VirtualBox, you can turn Hyper-V off.\n  Cannot/don’t want to install Docker Desktop for for Windows\nIf your computer doesn’t meet the hardware requirements, or you don’t want to install Docker Desktop for Windows because you don’t want to mess up your VirtualBox installation (although you shouldn’t really worry about the latter), you have two options:\n Install Docker Toolbox for Windows (Section 1.2).\n See the alternative options (Section 4).\n  Installation procedure\n Download Docker Desktop for Windows.\n Follow the installation instructions. You might need to restart the system to enable Hyper-V.\n Verify your installation (see Section 5).\n    1.2 Docker Toolbox for Windows If your computer runs Windows 7 or higher, and doesn’t meet the hardware requirements for Docker for Windows, you can install Docker Toolbox for Windows.\n Show me more\nPlease refer to these installation instructions.\nCannot install Docker Toolbox\n See the alternative options (Section 4).     2 MacOS The installation procedure depends on the version of MacOS running on your computer.\n2.1 Docker Desktop for Mac. If your computer runs MacOS 10.13 or higher, you can install Docker Desktop for Mac (recommended).\n Show me more\nHardware requirements\n Your computer hardware must be a 2010 or a newer model. Verify that your computer is compatible with Docker Desktop for Mac:  Open a terminal. Run the following command: sysctl kern.hv_support. If the output of the command is kern.hv_support: 1 your computer is compatible.  At least 4GB of RAM.  VirtualBox users\nIf you have a version of VirtualBox older than 4.3.30, you should consider upgrading it, as it would not be compatible with Docker Desktop.\nCannot install Docker Desktop for Mac\nIf your computer doesn’t meet the hardware requirements, you have two options:\n Install Docker Toolbox for Mac (Section 2.2).\n See the alternative options (Section 4).\n  Installation instructions\n Download Docker Desktop for Mac.\n Follow the installation instructions.\n Verify your installation (see Section 5).\n    2.2 Docker Toolbox for Mac If your computer runs MacOs 10.8 or higher, and doesn’t meet the hardware requirements for Docker Desktop for Mac, you can install Docker Toolbox for Mac.\n Show me more\nPlease refer to these installation instructions.\nCannot install Docker Toolbox\n See the alternative options (Section 4).     3 Linux You can install Docker on the following Linux distributions:\n CentOS (installation instructions).\n Debian (installation instructions).\n Fedora (installation instructions).\n Ubuntu (installation instructions).\n  Make sure to read the post-installation steps for Linux and to take the necessary steps to be able to run Docker as a non-root user.\n 4 Alternative options If you’re unable to install Docker on your computer, you have two options left: using the Docker playground or installing Docker in a Linux virtual machine.\n4.1 Docker playground The Docker playground is an online Docker environment that you can play with for free.\n The advantage is that you don’t have anything to install on your computer.\n The disadvantage is that you might be unable to open a session depending on the number of active sessions.\n  In order to connect to the playground, you need to create an account on DockerHub.\n 4.2 Docker in an already prepared virtual machine \nThe **username** and **password** to log into the virtual machine are both *root*. In the video, you'll be directed to create a folder in your computer called *docker_files*. There, you'll place all files that you'll need to play with Docker. Don't hesitate to create subdirectories to organize your files (e.g., *td-1*, *final-project*). You'll be able to access this folder from the virtual machine from the folder */mnt/docker_files*. This way, you can manipulate your files by using the file system manager of your computer and you'll just use the terminal of the virtual machine to type the Docker commands.-- We provide an Ubuntu Linux virtual machine (5GB) with Docker and Kubernetes already installed. Download the virtual machine. You’ll need your CentraleSupélec credentials to access the file. Follow the installation procedure that is detailed in this video.\n  5 Verify your installation Open a terminal and type the following command:\ndocker run hello-world If everything is OK, you should see the output in the following figure.\n 6 Interacting with Docker In this course, we’ll learn how to interact with the Docker engine by using the command-line terminal. This option might seem a bit tedious (nobody likes to remember textual commands), but it offers a great flexibility.\nThis is the option that we recommend and for which we’ll provide a full support throughout the course.\n6.1 Graphical interface If you really want to use a graphical interface, you might want to look at Portainer, which is itself run as a Docker container.\n Linux or MacOS users\nOpen a terminal and copy and paste the following commands:\ndocker volume create portainer_data docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer   Windows users Open a terminal and copy and paste the following commands:\ndocker volume create portainer_data docker run -d -p 8000:8000 -p 9000:9000 --name portainer --restart always -v \\\\.\\pipe\\docker_engine:\\\\.\\pipe\\docker_engine -v portainer_data:C:\\data portainer/portainer   When the container is up and running, the interface is available at the following URL: http://localhost:9000.\n Choose a password and create the user admin.\n Select Local to manage the Docker environment installed on your computer and click on Connect.\n Click on the endpoint Local (figure below) to access the dashboard.\n   The menu on the left of the dashboard allows you to manage the different components of your Docker environment (e.g., containers, images, volumes and networks).  A user guide of Portainer is very much out of the scope of this course. However, the interface is rather intuitive and you should easily find out how to create, run, stop and remove containers, build images and create volumes and networks.\n  7 Troubleshooting In this section we’ll document the installation issues that you might experience.\nDon’t hesitate to contact us to report your installation problems.\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1009f24f18a9853858a69a79adeb4f0c","permalink":"/courses/cloud-computing/overview/installing-docker/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/cloud-computing/overview/installing-docker/","section":"courses","summary":"Docker installation instructions","tags":null,"title":"Installing Docker","type":"docs"},{"authors":[],"categories":[],"content":"","date":1581344688,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581344688,"objectID":"4e459ff727a9e6a0c795e8d8f3d69232","permalink":"/project/data-for-you/","publishdate":"2020-02-10T15:24:48+01:00","relpermalink":"/project/data-for-you/","section":"project","summary":"","tags":[],"title":"Data for You","type":"project"},{"authors":["Armita Khajeh Nassiri","Nathalie Pernelle","Fatiha Saı̈s","Gianluca Quercini"],"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"77dcf9b15a66ddb64a7a8426a803dd21","permalink":"/publication/nassiri-2020/","publishdate":"2020-11-05T15:51:37.231059Z","relpermalink":"/publication/nassiri-2020/","section":"publication","summary":"","tags":null,"title":"Generating Referring Expressions from RDF Knowledge Graphs for Data Linking","type":"publication"},{"authors":["Fatiha Saïs","Joana E. Gonzales Malaverri","Gianluca Quercini"],"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"24e4602ce4c2a42bac26f3019386ecbf","permalink":"/publication/sais-2020/","publishdate":"2020-04-08T14:26:24.211279Z","relpermalink":"/publication/sais-2020/","section":"publication","summary":"","tags":null,"title":"MOMENT: Temporal Meta-Fact Generation and Propagation in Knowledge Graphs","type":"publication"},{"authors":["Nacéra Bennacer Seghouani","Coriane Nana Jipmo","Gianluca Quercini"],"categories":null,"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546300800,"objectID":"3685ef29403450add392048ea8b1e19d","permalink":"/publication/seghouani-2019/","publishdate":"2020-02-10T15:32:10.718712Z","relpermalink":"/publication/seghouani-2019/","section":"publication","summary":"","tags":null,"title":"Determining the interests of social media users: two approaches","type":"publication"},{"authors":["Suela Isaj","Nacéra Bennacer Seghouani","Gianluca Quercini"],"categories":null,"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546300800,"objectID":"f0a2e1e20345b7ff2748dd0ff24c29fd","permalink":"/publication/isaj-2019/","publishdate":"2020-02-10T15:37:10.960652Z","relpermalink":"/publication/isaj-2019/","section":"publication","summary":"","tags":null,"title":"Profile Reconciliation Through Dynamic Activities Across Social Networks","type":"publication"},{"authors":["Nacéra Bennacer Seghouani","Francesca Bugiotti","Moditha Hewasinghage","Suela Isaj","Gianluca Quercini"],"categories":null,"content":"","date":1514764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514764800,"objectID":"ed97c59bbeebf6f67506ea911cd4d01b","permalink":"/publication/seghouani-2018/","publishdate":"2020-02-10T15:32:10.719498Z","relpermalink":"/publication/seghouani-2018/","section":"publication","summary":"","tags":null,"title":"A frequent named entities-based approach for interpreting reputation in Twitter","type":"publication"},{"authors":["Nacéra Bennacer Seghouani","Francesca Bugiotti","Jorge Galicia","Mariana Patricio","Gianluca Quercini"],"categories":null,"content":"","date":1514764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1514764800,"objectID":"9cdf7741acd87116627b5dd0bc25a27c","permalink":"/publication/seghouani-2018-a/","publishdate":"2020-02-10T15:33:43.343039Z","relpermalink":"/publication/seghouani-2018-a/","section":"publication","summary":"","tags":null,"title":"Élimination des liens inter-langues erronés dans Wikipédia","type":"publication"},{"authors":["Nacéra Bennacer","Francesca Bugiotti","Jorge Galicia","Mariana Patricio","Gianluca Quercini"],"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"edcf86d1dd80092db4864af2aa551e98","permalink":"/publication/bennacer-2017-a/","publishdate":"2020-02-10T15:32:10.723551Z","relpermalink":"/publication/bennacer-2017-a/","section":"publication","summary":"","tags":null,"title":"Eliminating Incorrect Cross-Language Links in Wikipedia","type":"publication"},{"authors":["Coriane Nana Jipmo","Gianluca Quercini","Nacéra Bennacer"],"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"048dafc42b622ff1cee4c115e5409243","permalink":"/publication/jipmo-2017/","publishdate":"2020-02-10T15:32:10.722099Z","relpermalink":"/publication/jipmo-2017/","section":"publication","summary":"","tags":null,"title":"Frisk: A multilingual approach to find twitteR InterestS via wiKipedia","type":"publication"},{"authors":["Nacéra Bennacer","Francesca Bugiotti","Moditha Hewasinghage","Suela Isaj","Gianluca Quercini"],"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"1e3d10b83c3c7b1807d422d7d251cca3","permalink":"/publication/bennacer-2017/","publishdate":"2020-02-10T15:32:10.7231Z","relpermalink":"/publication/bennacer-2017/","section":"publication","summary":"","tags":null,"title":"Interpreting reputation through frequent named entities in twitter","type":"publication"},{"authors":["Gianluca Quercini","Nacéra Bennacer","Mohammad Ghufran","Coriane Nana Jipmo"],"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"c02251b35ab73929914bbe9b772e5248","permalink":"/publication/quercini-2017/","publishdate":"2020-02-10T15:32:10.720054Z","relpermalink":"/publication/quercini-2017/","section":"publication","summary":"","tags":null,"title":"Liaison: reconciliation of individuals profiles across social networks","type":"publication"},{"authors":["Mohammad Ghufran","Nacéra Bennacer","Gianluca Quercini"],"categories":null,"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483228800,"objectID":"c1928a9ee227111e1b27ba31fdbb6a86","permalink":"/publication/ghufran-2017/","publishdate":"2020-02-10T15:32:10.722652Z","relpermalink":"/publication/ghufran-2017/","section":"publication","summary":"","tags":null,"title":"Wikipedia-based extraction of key information from resumes","type":"publication"},{"authors":["Coriane Nana Jipmo","Gianluca Quercini","Nacéra Bennacer"],"categories":null,"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451606400,"objectID":"49508dab832a1726fe7da77e8604a7f8","permalink":"/publication/jipmo-2016/","publishdate":"2020-02-10T15:32:10.724083Z","relpermalink":"/publication/jipmo-2016/","section":"publication","summary":"","tags":null,"title":"Catégorisation et Désambiguı̈sation des Intérêts des Individus dans le Web Social.","type":"publication"},{"authors":["Nacéra Bennacer","Mia Johnson Vioulès","Maximiliano Ariel López","Gianluca Quercini"],"categories":null,"content":"","date":1420070400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1420070400,"objectID":"ce3927111f9fc9f8ef041600fa6e6126","permalink":"/publication/bennacer-2015/","publishdate":"2020-02-10T15:32:10.725565Z","relpermalink":"/publication/bennacer-2015/","section":"publication","summary":"","tags":null,"title":"A multilingual approach to discover cross-language links in Wikipedia","type":"publication"},{"authors":["Mohammad Ghufran","Gianluca Quercini","Nacéra Bennacer"],"categories":null,"content":"","date":1420070400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1420070400,"objectID":"482b66b1b2e201edf7dfa2685afa010a","permalink":"/publication/ghufran-2015/","publishdate":"2020-02-10T15:32:10.724645Z","relpermalink":"/publication/ghufran-2015/","section":"publication","summary":"","tags":null,"title":"Toponym disambiguation in online social network profiles","type":"publication"},{"authors":["Nacéra Bennacer","Coriane Nana Jipmo","Antonio Penta","Gianluca Quercini"],"categories":null,"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1388534400,"objectID":"2bce9aaaae3b0248796b29334c06054f","permalink":"/publication/bennacer-2014/","publishdate":"2020-02-10T15:32:10.726341Z","relpermalink":"/publication/bennacer-2014/","section":"publication","summary":"","tags":null,"title":"Matching user profiles across social networks","type":"publication"},{"authors":["Nacéra Bennacer","Coriane Nana Jipmo","Antonio Penta","Gianluca Quercini"],"categories":null,"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1388534400,"objectID":"ff35f567785c6703d81172b874c7531b","permalink":"/publication/bennacer-2014-a/","publishdate":"2020-02-10T15:32:10.727368Z","relpermalink":"/publication/bennacer-2014-a/","section":"publication","summary":"","tags":null,"title":"Réconciliation des profils dans les réseaux sociaux.","type":"publication"},{"authors":["Gianluca Quercini","Hanan Samet"],"categories":null,"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1388534400,"objectID":"41c8a22b08bd7e057a05ad86a744cac5","permalink":"/publication/quercini-2014/","publishdate":"2020-02-10T15:32:10.728416Z","relpermalink":"/publication/quercini-2014/","section":"publication","summary":"","tags":null,"title":"Uncovering the spatial relatedness in Wikipedia","type":"publication"},{"authors":["Gianluca Quercini","Chantal Reynaud"],"categories":null,"content":"","date":1356998400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1356998400,"objectID":"9086beba183fe687c8f4c462cd3153ca","permalink":"/publication/quercini-2013/","publishdate":"2020-02-10T15:32:10.72918Z","relpermalink":"/publication/quercini-2013/","section":"publication","summary":"","tags":null,"title":"Entity discovery and annotation in tables","type":"publication"},{"authors":["Gianluca Quercini","Chantal Reynaud"],"categories":null,"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1325376000,"objectID":"cc5f1500c80ecfe28e62ab5e9b608e81","permalink":"/publication/quercini-2012-a/","publishdate":"2020-02-10T15:32:10.737022Z","relpermalink":"/publication/quercini-2012-a/","section":"publication","summary":"","tags":null,"title":"Des données tabulaires à RDF: l’extraction de données de Google Fusion Tables","type":"publication"},{"authors":["Massimo Ancona","Betty Bronzini","Davide Conte","Gianluca Quercini"],"categories":null,"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1325376000,"objectID":"62840715b27d999325c6799de42c8994","permalink":"/publication/ancona-2012/","publishdate":"2020-02-10T15:32:10.717657Z","relpermalink":"/publication/ancona-2012/","section":"publication","summary":"","tags":null,"title":"Developing Attention-Aware and Context-Aware User Interfaces on Handheld Devices","type":"publication"},{"authors":["Antonio Penta","Gianluca Quercini","Chantal Reynaud","Nigel Shadbolt"],"categories":null,"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1325376000,"objectID":"fa3cbdff0934af7e1ad34c9d906d46b4","permalink":"/publication/penta-2012/","publishdate":"2020-02-10T15:32:10.72995Z","relpermalink":"/publication/penta-2012/","section":"publication","summary":"","tags":null,"title":"Discovering Cross-language Links in Wikipedia through Semantic Relatedness.","type":"publication"},{"authors":["Gianluca Quercini","Jochen Setz","Daniel Sonntag","Chantal Reynaud"],"categories":null,"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1325376000,"objectID":"1eb03ccdfc068b0af2eee6b98febab4f","permalink":"/publication/quercini-2012/","publishdate":"2020-02-10T15:32:10.736267Z","relpermalink":"/publication/quercini-2012/","section":"publication","summary":"","tags":null,"title":"Facetted Browsing on Extracted Fusion Tables Data for Digital Cities.","type":"publication"},{"authors":["Jochen Setz","Gianluca Quercini","Daniel Sonntag","Chantal Reynaud"],"categories":null,"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1325376000,"objectID":"152a779726400c4afb268da398df2025","permalink":"/publication/setz-2012/","publishdate":"2020-02-10T15:32:10.730492Z","relpermalink":"/publication/setz-2012/","section":"publication","summary":"","tags":null,"title":"Facetted search on extracted fusion tables data for digital cities","type":"publication"},{"authors":["Laura Papaleo","Gianluca Quercini","Viviana Mascardi","Massimo Ancona","A Traverso","Henry de Lumley"],"categories":null,"content":"","date":1293840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1293840000,"objectID":"2951f449fe1a9a559bd320ee66d7a4df","permalink":"/publication/papaleo-2011/","publishdate":"2020-02-10T15:32:10.7311Z","relpermalink":"/publication/papaleo-2011/","section":"publication","summary":"","tags":null,"title":"Agents and Ontologies for Understanding and Preserving the Rock Art of Mount Bego.","type":"publication"},{"authors":["Gianluca Quercini","Massimo Ancona"],"categories":null,"content":"","date":1262304000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1262304000,"objectID":"712870e00c1980526965a476c61c6a9f","permalink":"/publication/quercini-2010/","publishdate":"2020-02-10T15:32:10.731853Z","relpermalink":"/publication/quercini-2010/","section":"publication","summary":"","tags":null,"title":"Confluent drawing algorithms using rectangular dualization","type":"publication"},{"authors":["Gianluca Quercini","Hanan Samet","Jagan Sankaranarayanan","Michael D Lieberman"],"categories":null,"content":"","date":1262304000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1262304000,"objectID":"c8ae118f82887db05d951390d2ae7695","permalink":"/publication/quercini-2010-a/","publishdate":"2020-02-10T15:33:43.347923Z","relpermalink":"/publication/quercini-2010-a/","section":"publication","summary":"","tags":null,"title":"Determining the spatial reader scopes of news sources using local lexicons","type":"publication"},{"authors":["Massimo Ancona","Viviana Mascardi","Gianluca Quercini","Anton Bogdanovych","H De Lumley","Laura Papaleo","Simeon Simoff","Antonella Traverso"],"categories":null,"content":"","date":1262304000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1262304000,"objectID":"6456e6f4265092c5466fcdd21d7bb4eb","permalink":"/publication/ancona-2010/","publishdate":"2020-02-10T15:32:10.73288Z","relpermalink":"/publication/ancona-2010/","section":"publication","summary":"","tags":null,"title":"Virtual institutions for preserving and simulating the culture of Mount Bego's ancient people","type":"publication"},{"authors":["Anton Bogdanovych","Laura Papaleo","Massimo Ancona","Viviana Mascardi","Gianluca Quercini","Simeon Simoff","Alex Cohen","Antonella Traverso"],"categories":null,"content":"","date":1230768000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1230768000,"objectID":"c71e7154cbc2dfbe25039ed19758c530","permalink":"/publication/bogdanovych-2009/","publishdate":"2020-02-10T15:32:10.737689Z","relpermalink":"/publication/bogdanovych-2009/","section":"publication","summary":"","tags":null,"title":"Integrating agents and virtual institutions for sharing cultural heritage on the Web","type":"publication"},{"authors":["Massimo Ancona","Gianluca Quercini"],"categories":null,"content":"","date":1230768000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1230768000,"objectID":"e93eb6b5f5c5cf19230762a04c9abc05","permalink":"/publication/ancona-2009/","publishdate":"2020-02-10T15:32:10.720588Z","relpermalink":"/publication/ancona-2009/","section":"publication","summary":"","tags":null,"title":"Text Entry in PDAs with WtX","type":"publication"},{"authors":["Massimo Ancona","Davide Conte","Donatella Pian","Sonia Pini","Gianluca Quercini","Antonella Traverso"],"categories":null,"content":"","date":1199145600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1199145600,"objectID":"e650a879a57f2a6c286aa2d365cb9a7d","permalink":"/publication/ancona-2008/","publishdate":"2020-02-10T15:32:10.721064Z","relpermalink":"/publication/ancona-2008/","section":"publication","summary":"","tags":null,"title":"Wireless networks in archaeology and cultural heritage","type":"publication"},{"authors":["Massimo Ancona","Gianluca Quercini","Luca Dominici"],"categories":null,"content":"","date":1167609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1167609600,"objectID":"5da2e1599d08bf6b66c9260251f7f87d","permalink":"/publication/ancona-2007-a/","publishdate":"2020-02-10T15:32:10.734718Z","relpermalink":"/publication/ancona-2007-a/","section":"publication","summary":"","tags":null,"title":"An Improved Text Entry Tool for PDAs","type":"publication"},{"authors":["M Ancona","S Drago","G Quercini","A Bogdanovych"],"categories":null,"content":"","date":1167609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1167609600,"objectID":"0bb01482186a36901efd9bc59287ade5","permalink":"/publication/ancona-2007-b/","publishdate":"2020-02-10T15:33:43.342472Z","relpermalink":"/publication/ancona-2007-b/","section":"publication","summary":"","tags":null,"title":"Rectangular Dualization of Biconnected Planar Graphs in Linear Time and Related Applications","type":"publication"},{"authors":["M Ancona","S Drago","G Quercini","A Bogdanovych"],"categories":null,"content":"","date":1167609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1167609600,"objectID":"5de935c6dca2f9dc45d3fcc539d7a23e","permalink":"/publication/ancona-2007/","publishdate":"2020-02-10T15:32:10.721486Z","relpermalink":"/publication/ancona-2007/","section":"publication","summary":"","tags":null,"title":"Rectangular Dualization of Biconnected Planar Graphs in Linear Time and Related Applications","type":"publication"},{"authors":["Massimo Ancona","Marco Cappello","Marco Casamassima","Walter Cazzola","Davide Conte","Massimiliano Pittore","Gianluca Quercini","Naomi Scagliola","Matteo Villa"],"categories":null,"content":"","date":1136073600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1136073600,"objectID":"956e4fbb19a8e3db3caf66b9ca3ce215","permalink":"/publication/ancona-2006-a/","publishdate":"2020-02-10T15:33:43.349611Z","relpermalink":"/publication/ancona-2006-a/","section":"publication","summary":"","tags":null,"title":"Mobile vision and cultural heritage: the agamemnon project","type":"publication"},{"authors":["Massimo Ancona","Walter Cazzola","Sara Drago","Gianluca Quercini"],"categories":null,"content":"","date":1136073600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1136073600,"objectID":"152d79fb2becb0b67888c71837db1203","permalink":"/publication/ancona-2006/","publishdate":"2020-02-10T15:32:10.733963Z","relpermalink":"/publication/ancona-2006/","section":"publication","summary":"","tags":null,"title":"Visualizing and managing network topologies via rectangular dualization","type":"publication"},{"authors":["M Ancona","S Locati","M Mancini","A Romagnoli","G Quercini"],"categories":null,"content":"","date":1104537600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1104537600,"objectID":"a5f6251a4b15ec8ddae9685ad605d62a","permalink":"/publication/ancona-2005/","publishdate":"2020-02-10T15:32:10.735534Z","relpermalink":"/publication/ancona-2005/","section":"publication","summary":"","tags":null,"title":"Comfortable textual data entry for PocketPC: the WTX system","type":"publication"},{"authors":null,"categories":null,"content":" Refer to this documentation to learn how to connect and interact with the cluster.\nAssignment submission\nThis lab assignment will be evaluated.\nYou need to submit a .zip file containing the following files:\n Source code of the programs that you write.\n A PDF document with the answer to the questions that you find in this document.\n  Please send me the zip file by email.\nThe submission deadline is Thursday, May 20, 2021 8:00 AM.\n 1 Computing averages We consider a collection of CSV files containing temperature measurements in the following format:\nyear,month,day,hours,minutes,seconds,temperature\nyou can find the files under the directory hdfs://sar01:9000/data/temperatures/\nHere are the details for each file:\n File temperatures_86400.csv contains one measurement per day in the years 1980 - 2018. File temperatures_2880.csv contains one measurement every 2880 seconds in the years 1980 - 2018. File temperatures_86.csv contains one measurement every 86 seconds for the year 1980 alone. File temperatures_10.csv contains one measurement every 10 seconds for the years 1980 - 2018.  We intend to implement a Spark algorithm to generate pairs \\((y, t_{avg})\\), where \\(y\\) is the year and \\(t_{avg}\\) is the average temperature in the year.\n1.1 First implementation Copy the file ~vialle/DCE-Spark/template_temperatures.py to your home directory by typing the following command:\ncp ~vialle/DCE-Spark/template_temperatures.py ./avg_temperatures_first.py Open the file avg_temperatures_first.py and write the following function:\ndef avg_temperature(theTextFile): temperatures = theTextFile \\ .map(lambda line: line.split(\u0026quot;,\u0026quot;)) \\ .map(lambda term: (term[0], [float(term[6])])) \\ .reduceByKey(lambda x, y: x+y) \\ .mapValues(lambda lv: sum(lv)/len(lv)) return temperatures  In the same file, locate the two variables input_path and output-path. and write the following code:\ninput_path = \u0026quot;hdfs://sar01:9000/data/temperatures/\u0026quot; output_path = \u0026quot;hdfs://sar01:9000/cpuecm1/cpuecm1_XX/\u0026quot; Don’t forget the / at the end of the file paths and to replace XX with the number at the end of your username.\nExercise\nExercise 1.1 \n Run the script avg_temperatures_first.py by using temperatures_86400.csv as an input. To this extent, use the following command:   spark-submit --master spark://sar01:7077 avg_temperatures_first.py temperatures_86400.csv You should find the output of the program under the folder\nhdfs://sar01:9000/cpuecm1/cpuecm1_XX/temperatures_86400.out\n What’s the execution time?  In the output of Spark on the command line you should see a line that mentions something along the following line:   INFO DAGScheduler: Job 0 finished: runJob at SparkHadoopWriter.scala:78, took 3.478220 s   Run the same script by using temperatures_2880.csv as an input.\n What is the execution time? Does it seem reasonable compared with the execution time that you observed before? Justify your answer.\n Execute the same script by using temperatures_86.csv as an input.\n What is the execution time? How would you justify it, knowing that the files temperatures_2880.csv and temperatures_86.csv have a similar size (11 MB the former, 9 MB the latter)?\n  ```\n  1.2 Second implementation Copy the file ~vialle/DCE-Spark/template_temperatures.py to your working directory by typing the following command:\ncp ~vialle/DCE-Spark/template_temperatures.py ./avg_temperatures_second.py Exercise\nExercise 1.2  Based on the observations made in the previous exercise, write an improved implementation of the function avg_temperature.\n  Exercise\nExercise 1.3 \n Run the script avg_temperatures_second.py by using temperatures_86.csv as an input.\n What’s the execution time? Compare it with the execution time obtained in the previous exercise and comment the difference.\n Run the same script by using temperatures_10.csv (3 GB!) as an input. Do you think that the program takes too long? Why?\n      2 Common friends in a social network Consider a social network described by a graph encoded in a text file. Each line of the file is a list of identifiers separated by commas. For instance, the line \\(A,B,C,D\\) means that \\(A\\) is friend with \\(B\\), \\(C\\) and \\(D\\). An excerpt of the file looks like as follows:\nA,B,C,D B,A,D C,A,D D,A,B,C ... We suppose that the friendship relation is symmetric: \\((A, B)\\) implies \\((B, A)\\).\nWe want to obtain the list of the common friends for each pair of individuals:\n(A, B), [D] (A, C), [D] (A, D), [B, C] (B, C), [D] (B, D), [A] (C, D), [A] As an additional constraint, we want to represent a couple only once and avoid to represent the symmetric couple. In other words, if we output \\((A, B)\\), we don’t want to output \\((B, A)\\).\nWe use the following input files available in folder hdfs://sar01:9000/data/sn/:\n sn_tiny.csv. Small social network, that you can use to test your implementation.\n sn_10k_100k.csv. Social network with \\(10^4\\) individuals and \\(10^5\\) links.\n sn_100k_100k.csv. Social network with \\(10^5\\) individuals and \\(10^5\\) links.\n sn_1k_100k.csv. Social network with \\(10^3\\) individuals and \\(10^5\\) links.\n sn_1m_1m.csv. Social network with \\(10^6\\) individuals and \\(10^6\\) links.\n  Exercise\nExercise 2.1  Write an implementation in Spark. Test your implementation on file sn_tiny.csv.\n  Exercise\nExercise 2.2  Run your implementation on the other files and write down the execution times. Comment on the execution times considering the file sizes, the number of nodes and links and the number of pairs \\(((A, B), X)\\) generated by the algorithm.\n  Exercise\nExercise 2.3 \nBy using a MapReduce-style algorithm, write a Spark program to compute the minimum, maximum and average degree of a node in a given graph.\n Compute the minimum, maximum and average degree on all the given input files.\n Do these values confirm or invalidate the considerations that you made on the execution times of the algorithm in the first exercise? Justify your answer.\n     3 Creating an inverted index In folder hdfs://sar01:9000/data/bbc/ you’ll find a collection of 50 articles obtained from the BBC website (2004-2005) organized into five subfolders: business, entertainment, politics, sport and technology.\nWe want to create an inverted index, which associates each word with the list of the files in which the word occurs. More specifically, for each word, the inverted index will have a list of the names of the files (path relative to the folder /data/bbc) that contain the word.\nThe inverted index:\n must not contain the same word twice;\n must not contain any stopwords (the list of stopwords is provided in the hdfs://sar01:9000/data/stopwords.txt file);\n  Moreover:\n Words in the inverted index must only contain letters.\n Words in the inverted index must be lowercase.\n  Exercise\nExercise 3.1  Write a Spark program to create an inverted index and execute it on the input folder. You can use the template available at ~vialle/DCE-Spark/template_inverted_index.py.\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"76158ebb08d6aa7e40a693d348db00e7","permalink":"/courses/big-data-marseille/tutorials/spark-assignment/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/big-data-marseille/tutorials/spark-assignment/","section":"courses","summary":"Lab assignment Spark RDD.","tags":null,"title":"Apache Spark — Programming with RDD","type":"docs"},{"authors":null,"categories":null,"content":" 1 Number of partitions in a RDD We consider a set of CSV files that contain temperature measurements over several years. Each line has the following content: year,month,day,hour,minute,second,temperature.\nThese files are stored at the following location: hdfs://sar17:9000/data/temperatures/.\nHere is the detail for each file:\n File temperatures_86400.csv contains one measurement per day between 1980 and 2018. File temperatures_2880.csv contains one measurement every 2880 seconds between 1980 and 2018. File temperatures_86.csv contains one measurement every 86 seconds for the year 1980 alone. File temperatures_10.csv contains one measurement every 10 seconds between 1980 - 2018.  Get the file avg_temperatures_rdd.py by typing the following command:\ncp /usr/users/cpu-prof/cpu_quercini/spark-sql-templates/avg_temperatures_rdd.py .  This file contains an efficient implementation of the function that computes the average yearly temperature, as we have seen in tutorial 2.\n 1.1 Performances and number of partitions Exercise\nExercise 1.1 \n Modify the code by following the instructions that you find in the file.\n Observe the instructions at line 73 and line 79. They get and show the number of partitions of the input RDD text_file and the output RDD temperatures respectively.\n Complete Table 1. Run the program on file temperatures_10.csv. Write down the execution time and the number of partitions of both RDDs text_file and temperatures.       File   Execution time (sec)   Number of partitions (text_file)   Number of partitions (temperatures)     temperatures_86400.csv   2.71   2   2     temperatures_2880.csv   3.27   2   2     temperatures_86.csv   4.33   2   2     temperatures_10.csv          Table 1. Execution time and partition numbers with RDD.   Good to know\nYou can execute the program on file temperatures_10.csv with the following command:\nspark-submit --master spark://sar17:7077 avg_temperatures_rdd.py temperatures_10.csv    1.2 Analysis of Spark’s operation Exercise\nExercise 1.2 \n Could you understand how Spark determines the number of partitions of the RDD text_file by looking at the size of the input files? HINT. If you divide the size of the file temperatures_10.csv by the number of partitions of the RDD text_file, which value do you obtain? What does this value represent?\n List the files that are stored in the output folder temperatures_10.rdd.out under your HDFS folder. What do you notice? Is there any relation with respect to the number of partitions?\n    Good to know\nIn order to list the content of the folder in HDFS, you can use the following command:\nhdfs dfs -ls hdfs://sar17:9000/bdiaspark22/bdiaspark22_XX/temperatures_10.rdd.out     2 Using the DataFrame API to compute the average temperatures You’re now going to implement a Spark program to compute the average temperatures by using the Spark DataFrame API.\nGo through the following steps:\n Copy the code template avg_temperatures_df.py to your home folder by executing the following command:  cp /usr/users/cpu-prof/cpu_quercini/spark-sql-templates/avg_temperatures_df.py .   The instructions at line 84 and 90 show the number of partitions of the RDDs underlying the dataframes df (input) and df_avg (output) respectively.\n The result of the computation will be stored in the folder temperatures_*.df.out under your HDFS folder bdiaspark22/bdiaspark22_XX\n  Exercise\nExercise 2.1 \n Complete the code by following the instructions that you find in file avg_temperatures_df.py.\n Execute your code on all the input CSV files and complete Table 2.      File   Execution time RDD\n(sec)   Execution time DataFrame\n(sec)   Number of partitions\n(df_avg)     temperatures_86400.csv   2.71   4.75   200     temperatures_2880.csv   3.27   4.52   200     temperatures_86.csv   4.33         temperatures_10.csv   Exercise 1.1        Table 2. RDDs vs. DataFrames.   Exercise\nExercise 2.2 \n Compare the execution times with the ones obtained with the implementation using the RDDs. What do you observe?\n What is the number of partition of the output RDD? How do you explain this value?    2.1 Effect of the number of partitions You’re going to study the effect of the number of partitions on the performances of the program.\n In file avg_temperatures_df.py add the following instruction right below the initialisation of the SparkSession. The command sets the number of shuffle partitions to a certain value X.  spark.conf.set(\u0026quot;spark.sql.shuffle.partitions\u0026quot;, X)\n Execute the program with different values of X (say, 1, 2, 10, 50, 100, 500, 1000, 5000, 100000) only on file temperatures_86400.csv and write down the execution times.  Exercise\nExercise 2.3 \n Plot a graph where the x-axis contains the values of X and the y-axis contains the execution time. What do you observe?\n Execute the program on the other files by using small values of X (1 and 2). Comment on the evolution of the execution times.     2.2 Caching a DataFrame You’re now going to discover the advantages of caching a DataFrame.\n At the end of file avg_temperatures_df.py, add the following instruction:  df_avg.show(n=5)\nExercise\nExercise 2.4  What does this instruction? Is it a transformation or an action?\n   Remove the file temperatures_10.df.out by typing the following command:  hdfs dfs -rm -r hdfs://sar17:9000/bdiaspark22/bdiaspark22_XX/temperatures_10.df.out  Exercise\nExercise 2.5  Execute the code on file temperatures_10.csv. Why do we have two jobs (job 0 and 1)? What is the execution time of each job?\n   Remove again the file temperatures_10.df.out by typing the following command:\n Locate the instruction:\ndf_avg.write.csv(output_folder)  and add the following instruction right below: df_avg.cache()\n  Exercise\nExercise 2.6  Execute the code on file temperatures_10.csv. What is the execution time of the different jobs? Which execution model does Spark follow?\n    3 Computing averages with SQL You’re now going to implement the computation of the yearly average temperatures by using SQL on Spark DataFrames.\n3.1 Using a view A first option to query a DataFrame with SQL is to create a view.\n Copy the file avg_temperatures_sql_view.py to your home folder by typing the following command:  cp /usr/users/cpu-prof/cpu_quercini/spark-sql-templates/avg_temperatures_sql_view.py .   Complete the code by following the instructions that you find in the file.  Exercise\nExercise 3.1 \n Execute the code on all CSV files and complete Table 3. As the number of shuffle partitions, just use the default value.\n Compare the running times with those that you obtained in the previous exercises.      File   Execution time RDD\n(sec)   Execution time DataFrame\n(sec)   Execution time SQL view\n(sec)     temperatures_86400.csv   2.71   4.75   4.59     temperatures_2880.csv   3.27   4.52   4.54     temperatures_86.csv   4.33   Exercise 2.1       temperatures_10.csv   Exercise 1.1   Exercise 2.1      Table 3. RDDs vs DataFrames with views.    3.2 Using a table A second option to query a DataFrame with SQL is to create a table.\n Copy the file avg_temperatures_sql_table.py to your home directory by typing the following command:  cp /usr/users/cpu-prof/cpu_quercini/spark-sql-templates/avg_temperatures_sql_table.py .   Complete the code by following the instructions that you find in the file.\n Remove all the folders *.sql.out.\n  Exercise\nExercise 3.2 \n Execute the code on file temperatures_86400.csv. How many jobs do you have?\n What does each job correspond to? What is the execution time of each job?\n How do you explain that we only got one job when we used a view?    While reading the code in file avg_temperatures_sql_table.py, you probably noticed that we have specified the path to a HDFS folder for the Hive metastore warehouse. This folder will contain the data of each table that we create.\nExercise\nExercise 3.3 \n Look at the files in your home folder (in the local file system, not HDFS) by using the command ls.\n Do you notice the presence of new files?\n Can you explain what these files are?\n Execute the code on all CSV files and complete Table 4.\n Compare the execution times against the ones that you obtained in the previous exercises.      File   Execution time RDD\n(sec)   Execution time DataFrame\n(sec)   Execution time SQL view\n(sec)   Execution time SQL table\n(sec)     temperatures_86400.csv   2.71   4.75   4.59   4.66     temperatures_2880.csv   3.27   4.52   4.54   4.36     temperatures_86.csv   4.33   Exercise 2.1   Exercise 3.1       temperatures_10.csv   Exercise 1.1   Exercise 2.1   Exercise 3.1      Table 4. RDDs vs DataFrames with views and tables.    Remove the file temperatures_10.sql.out and execute the code again on file temperatures_10.csv.  Exercise\nExercise 3.4 \n How many jobs do we have? Why?\n What is the execution time of each job?      4 Using the DataFrame API on large files We now consider the files stored under hdfs://sar17:9000/data/sales/.\nThese files contain tabular data related to the sale of products in a chain of stores. We consider two tables: store_sales and customer. In the first table we find information about each sale, such as the identifier of the product sold, the identifier of the buyer, the quantity of purchased product and the price paid by the customer. For this table, we have 4 files, which only differ in size:\n store_sales_.100.dat: contains 9.5 GiB of data.\n store_sales_.200.dat: contains 19 GiB of data.\n store_sales_.400.dat: contains 38 GiB of data.\n store_sales_.800.dat: contains 77 GiB of data.\n  In table customer we find data about customers, such as first and last names and birth dates. We only have one file for this table:\n customer_10000.dat: contains 8.3 GiB of data.  We want to test the performances of the DataFrame API on the following queries (WARNING. you must write a code that uses DataFrame functions, not SQL!):\n Query Q1: returns the number of clients. This corresponds to the following SQL query:  SELECT count(*) FROM customer Query Q2: returns the price of the most expensive product. This corresponds to the following SQL query:\nSELECT max(ss_list_price) FROM store_sales Query Q3: returns the amount of money spent by each client. This corresponds to the following SQL query:\nSELECT ss_customer_sk, SUM(ss_net_paid_inc_tax) as amountSpent FROM store_sales GROUP BY ss_customer_sk Query Q4: Query Q3 + sort the result so that the client that spent the most money appears on the top. This corresponds to the following SQL query:\nSELECT ss_customer_sk, SUM(ss_net_paid_inc_tax) as amountSpent FROM store_sales GROUP BY ss_customer_sk ORDER BY amountSpent DESC Query Q5: Query Q4 + join with the table customer to get the first and last name of the customers. This corresponds to the following SQL query:\nSELECT c.c_first_name, c.c_last_name, SUM(ss_net_paid_inc_tax) as amountSpent FROM store_sales s JOIN customer c ON s.ss_customer_sk = c.c_customer_sk GROUP BY ss_customer_sk ORDER BY amountSpent DESC 4.1 Development of the code using the DataFrame API.  Copy the file dataframe_api_benchmark.py to your home directory by typing the following command:  cp /usr/users/cpu-prof/cpu_quercini/spark-sql-templates/dataframe_api_benchmark.py .   Modify the code by following the instructions in the file.\n Execute the code on file store_sales_100.dat (the smallest one) to test that your code is bug-free.\n Once you’re sure that your code is correct, uncomment lines 82 and 83. This will cache the two DataFrames.\n Execute the code on all files store-sales_*.dat\n  Good to know\nEach query is executed 5 times to have a correct estimate of the execution time. You’ll see that the execution times fluctuate on the first iterations and they stabilize in the later iterations. When you write down the execution times, only consider the execution times obtained at the last iteration.\n Exercise\nExercise 4.1 \n Complete Table 5 and write down the execution time of each query for each file.\n Why the execution time of the queries Q1 and Q2 is large at the iteration 0?\n Do you think that the difference between the execution times of the queries is reasonable?\n Do you think that the augmentation of the execution times is reasonable given the size of the input files?\n      File / query   Read\n(sec)   Query Q1\n(sec)   Query Q2\n(sec)   Query Q3\n(sec)   Query Q4\n(sec)   Query Q5\n(sec)     store_sales_1_4.100.dat   17.24   0.94   1.05   1.17   2.16   5.22     store_sales_1_4.200.dat                 store_sales_1_4.400.dat                 store_sales_1_4.800.dat                Table 5. Execution times of the queries on the sales dataset.   Good to know\nCompared with the previous exercises, you’ll notice that Spark prints out less messages. This is the effect of the instruction on line 46 (Spark only prints out some of the information messages at the beginning of the computation and any error message). You’ll be able to easily find the execution times of the queries.\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"5f8a9e6d0e9ea85d7fa3b7ca4dfa4431","permalink":"/courses/bdia/tutorials/spark-sql-assignment/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia/tutorials/spark-sql-assignment/","section":"courses","summary":"Description of the assignment on Spark SQL","tags":null,"title":"Spark DataFrames and Spark SQL","type":"docs"},{"authors":null,"categories":null,"content":" Lecture 1 Title: Introduction and MapReduce programming.\nSlides: Available on Edunao.\n Lecture 2 Title: Hadoop and storage: HDFS.\nSlides: Available on Edunao.\n Lecture 3 Title: Introduction to Apache Spark.\nSlides: Available on Edunao.\n Lecture 4 Title: Spark SQL.\n Lecture 5 Title: Spark Streaming\n Lecture 6 Title: Distributed and NoSQL databases\n Lecture 7 Title: Document-oriented database systems: MongoDB.\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b2794a92549814a9265f32990f791e8c","permalink":"/courses/bdia_old/lectures/lectures/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia_old/lectures/lectures/","section":"courses","summary":"Presenting the lectures.","tags":null,"title":"Lectures","type":"docs"},{"authors":null,"categories":null,"content":" Both lab assignments will be graded.\nLab assignment 1 Title: Multi-service applications in the Cloud\nSupervisors: Francesca Bugiotti Gianluca Quercini, Arpad Rimmel, Idir Ait Sadoune, Marc-Antoine Weisser\nDate and time: Friday 7 May, 1:45 PM - 5 PM\nRoom: On Microsoft Teams\nLink: Click here\n Lab assignment 2 Title: MapReduce - Apache Spark\nSupervisors: Francesca Bugiotti Gianluca Quercini, Arpad Rimmel, Idir Ait Sadoune, Marc-Antoine Weisser\nDate and time: Friday 28 May, 1:45 PM - 5 PM\nRoom: Remotely on Microsoft Teams\nLink: available soon\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6e75e11c1ee6ba55693a9622583beaf9","permalink":"/courses/cloud-computing/labs/cc-labs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/cloud-computing/labs/cc-labs/","section":"courses","summary":"Presentation of the lab assignments of the course.","tags":null,"title":"Lab assignments","type":"docs"},{"authors":null,"categories":null,"content":" Lecture 1 Title: Introduction to Cloud Computing\nLecturer: Gianluca Quercini\nDate and time: Wednesday 14 April, 8:30 AM - 11:45 AM\nRoom: Remotely on Microsoft Teams\nSlides: Available on Edunao.\n Lecture 2 Title: Virtualization and Containerization\nLecturer: Gianluca Quercini (CentraleSupélec)\nDate and time: Friday 16 April, 1:45 PM - 5 PM\nRoom: Remotely on Microsoft Teams\nSlides: Available on Edunao.\n Lecture 3 Title: Multi-service applications and orchestration\nLecturer: Gianluca Quercini (CentraleSupélec)\nDate and time: Friday 23 April, 1:45 PM - 5:00 PM\nRoom: Remotely on Microsoft Teams\nSlides: Available on Edunao.\n Lecture 4 Title: MapReduce\nLecturer: Francesca Bugiotti (CentraleSupélec)\nDate and time: Friday 14 May, 1:45 PM - 5:00 PM\nRoom: Remotely on Microsoft Teams\nSlides: Available here\n Lecture 5 Title: Apache Spark\nLecturer: Francesca Bugiotti (CentraleSupélec)\nDate and time: Tuesday 18 May, 8:30 AM - 11:45 AM\nRoom: Remotely on Microsoft Teams\nSlides: Available here\n Lecture 6 Title: Arrow - Spark + Argo\nLecturer: Francesca Bugiotti (CentraleSupélec)\nDate and time: Wednesday 26 May, 8:30 AM - 11:45 AM\nRoom: Remotely on Microsoft Teams\nSlides: Available soon\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4f5a608bccc37bec35254441f7fcae9a","permalink":"/courses/cloud-computing/lectures/lectures/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/cloud-computing/lectures/lectures/","section":"courses","summary":"Presenting the lectures.","tags":null,"title":"Lectures","type":"docs"},{"authors":null,"categories":null,"content":" Class material  Lecture slides, available here.\n An introduction to Docker.\n A Docker cheat sheet, with a summary of the most important Docker commands.\n An introduction to Linux, useful to understand how Docker works and how to interact with Docker.\n   Books  Schenker, Gabriel. Learn Docker - Fundamentals of Docker 18.x. Packt Publishing,. Print.\n Surianarayanan, C., \u0026amp; Chelliah, P. R. (2019). Essentials of Cloud Computing: A Holistic Perspective. Springer Nature.\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2d57f199c44c3345bf5285f7abd8f4c9","permalink":"/courses/cloud-computing/references/cc-references/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/cloud-computing/references/cc-references/","section":"courses","summary":"Bibliographic references for the course","tags":null,"title":"References","type":"docs"},{"authors":null,"categories":null,"content":" The architecture of the cluster at the CentraleSupélec campus in Metz is shown in the following figure.\n Figure 1: Cluster architecture (image credit: Stéphane Vialle)  In order to use the Spark cluster, you’ll need to go through the following fours steps:\nChoose a username on Edunao. The password will be communicated by the teacher during the tutorial.\n Open a SSH connection to the machine phome.metz.supelec.fr from your local machine.\n Open a SSH connection to the machine slurm1 from the machine phome.metz.supelec.fr.\n On the machine slurm1 allocate resources for the job from a named reservation.\n  Steps 2, 3 and 4 are detailed in the following subsections.\nOpening a SSH connection\nIf your operating system is either Linux or MacOS, the command ssh, necessary to open a SSH connection to a computer, is likely to be already available.\nIf your operating system is Windows, you’re not likely to have a command ssh readily available. In that case, you’ll need to install a SSH client. A good one is PuTTY, that you can download here.\n Connect to phome If your operating system is Linux or MacOS, open a command-line terminal and type the following command (replace your-username with the username that you chose).\nssh phome.metz.supelec.fr -l your-username\nAfter executing the command, you’ll be prompted to enter the password.\nIf your operating system is Windows:\nLaunch PuTTY.\n In the session panel, specify phome.metz.supelec.fr as the host name. Select ssh (port 22) as connection type.\n In the connection panel, set Enable TCP keepalives and set 30s between keepalives.\n Click on the button Open and click on the button Yes if you receive a warning informing you the key of the destination server is not cached yet.\n A command-line terminal should pop up, prompting you to enter your username and password.\n   Connect to slurm1 In the command-line terminal type the following command:\nssh slurm1\n Allocate resources for the job Once you’re connected to slurm1, you can allocate resources for the job by typing the following command (in place of resa-code you will type a code that will be communicated by the teacher during the tutorial.)\nsrun --reservation=resa-code -N 1 --ntasks-per-node=4 --pty bash\nRead carefully\nIf you want to access the cluster after the tutorial, remember to:\n Use the cluster only in the evening in weekdays or during the weekends.\n In order to allocate the resources, use the following command instead of the previous one:\nsrun -p ks1 -N 1 --ntasks-per-node=4 --pty bash\n    Source file edition The Python source files that you’ll be editing in this tutorial are stored in the remote machines under your home directory /usr/users/cpuasi1/your-username. In order to edit them, you have two options:\nUse a remote text editor, such as vim or nano (Linux users, I’m talking to you!).  or,\nDownload the file to your local machine, edit it with your usual code editor and upload it to the remote machine (Windows and MacOS users, I’m talking to you!).  The first option should only be chosen by users who are already familiar with command-line editors.\nAs for the other users, keep reading this section.\nMacOS users In order to download a file (say, test.txt) from the home directory of a remote machine in the cluster, you can type the following command on your local machine:\nscp your-username@phome.metz.supelec.fr:~/test.txt .\nThis will copy the file test.txt to your working directory on your local machine.\nOnce you’re done editing test.txt on your local machine, you can upload the file to the remote machine by typing the following command on your local machine:\nscp wc.txt your-username@phome.metz.supelec.fr:~\nIt’s really that easy!\n Windows users Windows users can benefit from a graphical client called WinSCP, that you can download here. Install it, connect to the remote machine and you’ll be able to download/upload files from/to the remote machine by a simple drag-and-drop!\n  Creating your working directory in HDFS In this section, you’ll be walked through the procedure to create a directory in HDFS that you’ll use as your working directory in the lab sessions.\nYou user account is: cpuasi1_X, where X is between 1 and 28.\nIn order to create your working directory in HDFS, type the following command in the terminal:\nhdfs dfs -mkdir hdfs://sar01:9000/cpuasi1/cpuasi1_X\nYou can verify that the directory is there by listing the content of the folder hdfs://sar01:9000/cpuasi1/ with the following command:\nhdfs dfs -ls hdfs://sar01:9000/cpuasi1/\n Preliminary exercise The datasets that you’ll be using in this tutorial are available under the folder hdfs://sar01:9000/data/ stored in HDFS. In order to see the content of the directory you can type the following command:\nhdfs dfs -ls -h hdfs://sar01:9000/data\nIn order to get some familiarity with the commands necessary to run Spark programs in the cluster, let’s look at an already implemented example.\n Copy the file ~vialle/DCE-Spark/template_wc.py to your home directory by typing the following command:\ncp ~vialle/DCE-Spark/template_wc.py ./wc.py\n If you type the command ls, you should see a file named wc.py in your home directory. This file contains the Python code to count the number of occurrences of words in a text file.\n Open the file wc.py by either using a text editor on the remote machine or by downloading it on your local machine, as explained in the section above.\n Locate the following instruction:\ntext_file = sc.textFile(\u0026quot;hdfs://...\u0026quot;)\nand replace it with the following instruction:\ntext_file = sc.textFile(\u0026quot;hdfs://sar01:9000/data/sherlock.txt\u0026quot;)\nThis will create an RDD named text_file with the content of the specified file.\n Similarly, locate the following instruction:\ncounts.saveAsTextFile(\u0026quot;hdfs://...\u0026quot;)\nand replace it with the following instruction (replace cpuasi1_X with your username!):\ncounts.saveAsTextFile(\u0026quot;hdfs://sar01:9000/cpuasi1/cpuasi1_X/sherlock.out\u0026quot;)\nThis will create an output directory sherlock.out that will contain the files with the output of the program.\n Run the Python script wc.py with the following command:\nspark-submit --master spark://sar01:7077 wc.py\n When the execution is over, the output will be available under the directory sherlock.out. To verify it, run the following command:\nhdfs dfs -ls -h hdfs://sar01:9000/cpuasi1/cpuasi1_X/sherlock.out\nAs usual, remember to replace cpuasi1_X with your username.\n In order to see the result, run the following command:\nhdfs dfs -cat hdfs://sar01:9000/cpuasi1/cpuasi1_X/sherlock.out/*   Output files\nIf you rerun the script by specifying an output file that already exists, you’d get an error. If you really want to overwrite the output file, you first need to remove it explicitly by typing the following command:\nhdfs dfs -rm -r hdfs://sar01:9000/cpuasi1/cpuasi1_X/sherlock.out\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"376356a15004133d6391a89312925a1a","permalink":"/courses/bdia_old/overview/cluster-connection/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia_old/overview/cluster-connection/","section":"courses","summary":"How to connect to the cluster","tags":null,"title":"Connecting to the cluster","type":"docs"},{"authors":null,"categories":null,"content":" The architecture of the cluster at the CentraleSupélec campus in Metz is shown in the following figure.\n Figure 1: Cluster architecture (image credit: Stéphane Vialle)  In order to use the Spark cluster, you’ll need to go through the following fours steps:\nUse your username in the spreadsheet communicated by the teacher before the tutorial. The password will be communicated by the teacher during the tutorial.\n Open a SSH connection to the machine phome.metz.supelec.fr from your local machine.\n Open a SSH connection to the machine slurm1 from the machine phome.metz.supelec.fr.\n On the machine slurm1 allocate resources for the job from a named reservation.\n  Steps 2, 3 and 4 are detailed in the following subsections.\nOpening a SSH connection\nIf your operating system is either Linux or MacOS, the command ssh, necessary to open a SSH connection to a computer, is likely to be already available.\nIf your operating system is Windows, you’re not likely to have a command ssh readily available. In that case, you’ll need to install a SSH client. A good one is PuTTY, that you can download here.\n Connect to phome If your operating system is Linux or MacOS, open a command-line terminal and type the following command (replace your-username with the username that you chose).\nssh phome.metz.supelec.fr -l your-username\nAfter executing the command, you’ll be prompted to enter the password.\nIf your operating system is Windows:\nLaunch PuTTY.\n In the session panel, specify phome.metz.supelec.fr as the host name. Select ssh (port 22) as connection type.\n In the connection panel, set Enable TCP keepalives and set 30s between keepalives.\n Click on the button Open and click on the button Yes if you receive a warning informing you the key of the destination server is not cached yet.\n A command-line terminal should pop up, prompting you to enter your username and password.\n   Connect to slurm1 In the command-line terminal type the following command:\nssh slurm1\n Allocate resources for the job Once you’re connected to slurm1, you can allocate resources for the job by typing the following command (in place of resa-code you will type a code that will be communicated by the teacher during the tutorial.)\nsrun --reservation=resa-code -N 1 --ntasks-per-node=4 --pty bash\nRead carefully\nIf you want to access the cluster after the tutorial, remember to:\n Use the cluster only in the evening in weekdays or during the weekends.\n In order to allocate the resources, use the following command instead of the previous one:\nsrun -p ks2 -N 1 --ntasks-per-node=4 --pty bash\n    Source file edition The Python source files that you’ll be editing in this tutorial are stored in the remote machines under your home directory /usr/users/cpuecm1/your-username. In order to edit them, you have two options:\nUse a remote text editor, such as vim or nano (Linux users, I’m talking to you!).  or,\nDownload the file to your local machine, edit it with your usual code editor and upload it to the remote machine (Windows and MacOS users, I’m talking to you!).  The first option should only be chosen by users who are already familiar with command-line editors.\nAs for the other users, keep reading this section.\nMacOS users In order to download a file (say, test.txt) from the home directory of a remote machine in the cluster, you can type the following command on your local machine:\nscp your-username@phome.metz.supelec.fr:~/test.txt .\nThis will copy the file test.txt to your working directory on your local machine.\nOnce you’re done editing test.txt on your local machine, you can upload the file to the remote machine by typing the following command on your local machine:\nscp wc.txt your-username@phome.metz.supelec.fr:~\nIt’s really that easy!\n Windows users Windows users can benefit from a graphical client called WinSCP, that you can download here. Install it, connect to the remote machine and you’ll be able to download/upload files from/to the remote machine by a simple drag-and-drop!\n  Creating your working directory in HDFS In this section, you’ll be walked through the procedure to create a directory in HDFS that you’ll use as your working directory in the lab sessions.\nYou user account is: cpuecm1_X, where X is between 1 and 10.\nIn order to create your working directory in HDFS, type the following command in the terminal:\nhdfs dfs -mkdir hdfs://sar01:9000/cpuecm1/cpuecm1_X\nYou can verify that the directory is there by listing the content of the folder hdfs://sar01:9000/cpuecm1/ with the following command:\nhdfs dfs -ls hdfs://sar01:9000/cpuecm1/\n Preliminary exercise The datasets that you’ll be using in this tutorial are available under the folder hdfs://sar01:9000/data/ stored in HDFS. In order to see the content of the directory you can type the following command:\nhdfs dfs -ls -h hdfs://sar01:9000/data\nIn order to get some familiarity with the commands necessary to run Spark programs in the cluster, let’s look at an already implemented example.\n Copy the file ~vialle/DCE-Spark/template_wc.py to your home directory by typing the following command:\ncp ~vialle/DCE-Spark/template_wc.py ./wc.py\n If you type the command ls, you should see a file named wc.py in your home directory. This file contains the Python code to count the number of occurrences of words in a text file.\n Open the file wc.py by either using a text editor on the remote machine or by downloading it on your local machine, as explained in the section above.\n Locate the following instruction:\ntext_file = sc.textFile(\u0026quot;hdfs://...\u0026quot;)\nand replace it with the following instruction:\ntext_file = sc.textFile(\u0026quot;hdfs://sar01:9000/data/sherlock.txt\u0026quot;)\nThis will create an RDD named text_file with the content of the specified file.\n Similarly, locate the following instruction:\ncounts.saveAsTextFile(\u0026quot;hdfs://...\u0026quot;)\nand replace it with the following instruction (replace cpuecm1_X with your username!):\ncounts.saveAsTextFile(\u0026quot;hdfs://sar01:9000/cpuecm1/cpuecm1_X/sherlock.out\u0026quot;)\nThis will create an output directory sherlock.out that will contain the files with the output of the program.\n Run the Python script wc.py with the following command:\nspark-submit --master spark://sar01:7077 wc.py\n When the execution is over, the output will be available under the directory sherlock.out. To verify it, run the following command:\nhdfs dfs -ls -h hdfs://sar01:9000/cpuecm1/cpuecm1_X/sherlock.out\nAs usual, remember to replace cpuecm1_X with your username.\n In order to see the result, run the following command:\nhdfs dfs -cat hdfs://sar01:9000/cpuecm1/cpuecm1_X/sherlock.out/*   Output files\nIf you rerun the script by specifying an output file that already exists, you’d get an error. If you really want to overwrite the output file, you first need to remove it explicitly by typing the following command:\nhdfs dfs -rm -r hdfs://sar01:9000/cpuecm1/cpuecm1_X/sherlock.out\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"56cde29729b5f8b5acea77062bfe0c80","permalink":"/courses/big-data-marseille/overview/cluster-connection/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/big-data-marseille/overview/cluster-connection/","section":"courses","summary":"How to connect to the cluster","tags":null,"title":"Connecting to the cluster","type":"docs"},{"authors":null,"categories":null,"content":" Introduction The goal of this project is to assess your knowledge of the main notions presented in classroom.\nThe project must be implemented by students working in groups.\nCreating the groups\nYou should already have created the groups on Edunao.\n This project consists in designing a relational database for the given application context, importing the data of a given dataset into a PostgreSQL database and querying the data in SQL.\nThe deadline to submit the work is Sunday December 4rd, 11:59 PM.\nSubmit your project\nThe submission site is available at this link.\nPlease note that:\n You must be member of a group to submit your work. Only one submission per group is possible. Two members of the same group cannot submit two different versions.  You must submit three files, please follow these instructions:\n A report in PDF containing the answers to all the questions and exercises, except the SQL queries (max 10 pages). Please name the file groupXX_report.pdf, where XX is your group number.\n A file containing the PostgreSQL database that you generated. Please name the file groupXX_db.sql. To generate this file, please watch this video.\n A file with all the SQL queries. Please name the file groupXX_queries.sql. Separate each query in the file by a blank line.\n  Example:\nSELECT * FROM Airport SELECT * FROM Hotel  Each group must submit an original work. Edunao is equipped with an anti-plagiarism tool that is able to check the originality of each submission. Submissions that are flagged as too similar by the tool are likely to be discarded and will not be evaluated.\n  Application context We intend to manage the data of a travel reservation system with clients all over the world. Upon registration, customers are automatically given a numeric identifier and they are asked to indicate their first and family names, their gender, date of birth, a phone number, an email address and their country of residence.\nAny customer can book a trip that includes the reservation of one or more flights and, possibly, one or more hotels.\nExample\nAlice wants to fly from Paris, France to New York City (NYC), USA and she intends to stay in NYC for 10 days. Her trip includes two flights: an outbound flight from Paris to NYC and an inbound flight from NYC to Paris; and an hotel in NYC.\n A flight is operated by an airline company, of which the system keeps its name (e.g., British Airways), the country where the airline is incorporated and, when available, its IATA code (e.g., BA, a two-letter code identifying the airline), its ICAO code (e.g., BAW, a three-letter code identifying the airline) and alternate name or alias (e.g., British).\nA flight connects two airports, each having a name (e.g., London Heathrow Airport), and, possibly, a IATA (e.g., LHR) and ICAO code (e.g., EGLL); an airport serves a specific location (e.g., London, UK) and its precise position is given by its geographic coordinates (latitude and longitude).\nA flight connecting two airports at specific departure and arrival times is identified by a flight number. Two flights operated by two different airline companies cannot have the same flight number, but the same flight number can denote two flights operated by the same airline company on different days.\nExample\nEmirates flight EK074 leaves Paris, France at 10 AM and arrives at Dubai, UAE at 7:40 PM (regardless of the departure day).\n For each flight booked by a customer, the system keeps the seat number, the travel class (e.g., economy or business), the price and the date of the flight. Usually, airlines include details on the type of aircraft they plan to use on their flight schedules; these details include the name of the aircraft (e.g., Boeing 787-8) and, when available, the IATA code (e.g., 788, a unique three-letter identifier for the aircraft) and the ICAO code (e.g., B788, a unique four-letter identifier for the aircraft).\nThe system maintains a list of hotels, with their names, addresses and an average review score, which is a real number denoting the average grade assigned to the hotel by its customers. Customers can write a review for an hotel; in which case the system stores the text of the review, the date and its author. When a customer books an hotel, the system keeps the price paid, the check-in and check-out dates and whether the breakfast is included.\n The dataset You can download the dataset by clicking here. The dataset consists of 7 CSV files: aircrafts.csv, airlines.csv, airports.csv, hotels.csv, customers.csv, hotel_bookings.csv, flight_bookings.csv. The separator character in each file is the tab character (‘’).\nNotice\nTake some time to look at the content of the files to understand the structure that your tables will have.\nYou can open CSV files in Excel.\n  Creation of a relational database You’ll now proceed to the definition of a relational database for our travel reservation system. First, you need to define the conceptual schema and then you’ll define the tables that compose the database.\nThe conceptual schema Before defining the logical schema of the database, answer the following questions:\nCan you use the name of the hotel as a primary key? Justify your answer.\n Can you use the flight number as a primary key to identify a flight? Justify your answer and, in case of a negative answer, propose a solution.\n Knowing that it is unlikely that two reviews have the same textual content, would you use it as a primary key? Justify your answer.\n Knowing that the IATA code uniquely identifies an airport, would you choose it as a primary key for the entity Airport? Justify your answer.\n  Exercise\nExercise 1  Propose an Entity-Relationship diagram describing the conceptual model of a relational database for the given application context.\n Specify all the attributes for each entity and relation.\n For each entity, underline the attributes composing the primary key.\n For each relation, clearly indicate the minimum and maximum cardinality.     Normalization Exercise\nExercise 2  Translate the logical schema into a collection of tables. For each table:\n Indicate its name and the names of the columns (but not their types).\n Underline the columns that are part of the primary key.\n Indicate the entity in the ER diagram to which the table corresponds.\n  To make sure you choose the right data types for the columns, you can also check the values in the dataset.\n  Which normal form are your tables in?\nExercise\nExercise 3  For each table:\n Indicate a minimal set of functional dependencies.\n Indicate the normal form that the table satisfies. Justify your answer.    Normalize your tables.\nExercise\nExercise 4  Normalize each table up to the Boyce-Codd Normal Form (BCNF).\n   The physical schema You can now define the physical schema of your database.\nExercise\nExercise 5  Write the SQL code to create the tables. For each table:\n Indicate the primary key.\n Indicate the foreign keys.\n Indicate NOT NULL and UNIQUE constraints, if needed.     Database creation and data import If you followed the normalization steps correctly, it is unlikely that you can import the data directly from the given CSV files.\nYou need a CSV file per table to import the data into your database.\nCreating the CSV files\nUse Excel to rearrange the data from the input CSV files, so as to create one CSV per table.\nMake sure you save the files as CSV with UTF-8 encoding.\n Watch this video to learn how to create the database in PostgreSQL and import the data.\nExercise\nExercise 6  Create a PostgreSQL database with the tables that you defined in the previous exercise. Import the data into the tables.\n   Running queries Write the following queries in SQL.\nExercise\nExercise 7 \nGet the average ticket price on Air France flights.\n Count the number of customers by country.\n Select the names of the airports in Paris, France.\n Select the name of the cities (city and country name) with the most airports.\n Select the name of the airline companies that use an Airbus A300.\n Select the identifier, first and family names of all customers who flew to Sydney, Australia.\n Select the identifier, name, city and country of the busiest airport (the one with more outbound and inbound flights).\n Select the average price in the economy class.\n Select the average price in the business class.\n Select the name, city and country of the destination airport of french customers.\n Select the destination cities (specify city and country name) preferred by women.\n Select the destination cities (specify city and country name) preferred by men.\n Count the number of customers by country flying to Paris.\n Count the number of hotels by city.\n Determine the amount of money spent by Tatiana REZE in flights.\n      ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"85d2d631269d7307bfde5c4b0669c155","permalink":"/courses/databases/exam/project/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/databases/exam/project/","section":"courses","summary":"Project","tags":null,"title":"Description","type":"docs"},{"authors":null,"categories":null,"content":" Run containers Docker command: docker run [options] image-name [command] [arg]\nExample: Running a container from the image alpine.\n  docker run image-name   docker run image-name command   docker run image-name command arg     docker run alpine   docker run alpine ls   docker run alpine ping 192.168.3.1    Common options:\n  Remove the container when it exits   Give the container a name   Allocate a terminal for the container     docker run --rm alpine   docker run --name toto alpine   docker run -it alpine     Mount data-volume at /data**   Container port –\u0026gt; random host port   Host port 8080 –\u0026gt; container port 80     docker run -v data-volume:/data alpine   docker run --P alpine   docker run -p 8080:80 alpine     Attach container to network         docker run --network mynet alpine         Manage containers   List all containers   List running containers   Stop a container     docker container ls -a   docker container ls   docker stop my-container     Remove a container   Remove all stopped containers   Start a container     docker container rm my-container   docker container prune   docker start my-container     Start a container (I/O)   Inspect changes in a container   Create image from container     docker start -ai my-container   docker diff my-container   docker commit my-container new-image     Build images Docker command: docker build [OPTIONS] PATH | URL\nExample. Building an image from a Dockerfile in the current directory: docker build .\n The command assumes that a file named Dockerfile is in the current directory.  Common options:\n  Tag the image   Name of the Dockerfile       docker build -t my-image:latest .   docker build -f my-dockerfile .       Manage images   List all images   List images (no intermediate)   Remove an image     docker image ls -a   docker image ls   docker image rm my-image     Remove dangling images   Remove unused images   Show the history of an image     docker image prune   docker image prune -a   docker history my-image     Dockerfile In a Dockerfile the following main keywords are used:\n  FROM base-image   FROM scratch   RUN cmd     Specifies the base image   No base image used   Runs a command     COPY src dst   ADD src dst   WORKDIR dir     Copy source file to destination   Copy source file (including URL and TAR) to destination   Sets the working directory     ENTRYPOINT cmd   CMD params   EXPOSE port     Command to execute when container is run   Parameters of the entrypoint command   Exposes a container port     Volumes   Create a volume   Remove a volume   Remove unused volumes     docker volume create my-volume   docker volume rm my-volume   docker volume prune     List volumes         docker volume ls         Networks   Create a network   Remove a network   Remove unused networks     docker network create my-network   docker network rm my-network   docker network prune     List all the networks   Inspect a network   Connect a container to a network     docker network ls   docker network inspect my-network   docker network connect my-network my-container     ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8f5dc854a8f25cad521a576f1c221397","permalink":"/courses/cloud-computing/references/docker-cheat-sheet/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/cloud-computing/references/docker-cheat-sheet/","section":"courses","summary":"Run containers Docker command: docker run [options] image-name [command] [arg]\nExample: Running a container from the image alpine.\n  docker run image-name   docker run image-name command   docker run image-name command arg     docker run alpine   docker run alpine ls   docker run alpine ping 192.168.3.1    Common options:\n  Remove the container when it exits   Give the container a name   Allocate a terminal for the container     docker run --rm alpine   docker run --name toto alpine   docker run -it alpine     Mount data-volume at /data**   Container port –\u0026gt; random host port   Host port 8080 –\u0026gt; container port 80     docker run -v data-volume:/data alpine   docker run --P alpine   docker run -p 8080:80 alpine     Attach container to network         docker run --network mynet alpine         Manage containers   List all containers   List running containers   Stop a container     docker container ls -a   docker container ls   docker stop my-container     Remove a container   Remove all stopped containers   Start a container     docker container rm my-container   docker container prune   docker start my-container     Start a container (I/O)   Inspect changes in a container   Create image from container     docker start -ai my-container   docker diff my-container   docker commit my-container new-image     Build images Docker command: docker build [OPTIONS] PATH | URL","tags":null,"title":"Docker Cheat Sheet","type":"docs"},{"authors":null,"categories":null,"content":" The Sakila management wants us to migrate their database to Cassandra, they need to compare how Cassandra would compare against MongoDB. To this extent, your first task is to think of a data model for the new database.\nWhen designing your data model, you’ll two follow two basic rules:\n Your data model should distribute the data evenly across the nodes of the cluster.\n For each frequent query, the number of partition to read should be as minimum as possible.\n  Exercise\nExercise 1  Analyze the Sakila business domain and propose a series of queries that the Sakila administration might want to run against the database.\n  Exercise\nExercise 2  Given the queries that you proposed in the first exercise, draw a workflow of the application that the Sakila management will use to query the data.\n  Exercise\nExercise 3  Based on the application workflow, draw the Chebotko diagram (the logical model) of the Sakila database.\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1bbacc0f95fe09b4371ba7cb4c295c7c","permalink":"/courses/gadexed/tutorials/cassandra-data-modeling/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/gadexed/tutorials/cassandra-data-modeling/","section":"courses","summary":"Data modeling in Cassandra","tags":null,"title":"Data modeling in Cassandra","type":"docs"},{"authors":null,"categories":null,"content":" Setting up the environment  Download Cassandra from this address.\n Move the downloaded archive file to a folder of your choice (other than downloads).\n Extract the archive. This will create a folder, containing all the files with the Cassandra server.\n Open a terminal and go the the Cassandra folder.\n Run the Cassandra server with the following command ./bin/cassandra -f.\n Once the initialization is complete, open a new terminal and go again to the Cassandra folder.\n Open the CQL shell, by typing the following command: ./bin/cqlsh.\n  Once you enter the CQL shell, you can start interacting with the Cassandra server to create a new database.\n Import the data  Download the data here\n Extract the downloaded archive. This will create a new folder containing the data. Let’s refer to this folder as DATA_FOLDER.\n Go back to the CQL shell and type the following command source 'DATAFOLDER/sakila.cql' (replace DATAFOLDER with the full path to the data folder). This command will create the sakila keyspace (database).\n In the CQL shell, type the command use sakila;\n We have 11 tables in this database. You can see the definition with the command describe sakila.\n As the last step, we need to import the data. No luck here, we need to import the data table by table with the following commands:\n  COPY sakila.actors_by_film FROM \u0026#39;DATAFOLDER/actors_by_film.csv\u0026#39; WITH HEADER = TRUE ; COPY sakila.categories_by_film FROM \u0026#39;DATAFOLDER/categories_by_film.csv\u0026#39; WITH HEADER = TRUE ; COPY sakila.customers FROM \u0026#39;DATAFOLDER/customers.csv\u0026#39; WITH HEADER = TRUE ; COPY sakila.film FROM \u0026#39;DATAFOLDER/film.csv\u0026#39; WITH HEADER = TRUE ; COPY sakila.inventory FROM \u0026#39;DATAFOLDER/inventory.csv\u0026#39; WITH HEADER = TRUE ; COPY sakila.rentals_by_customer FROM \u0026#39;DATAFOLDER/rentals_by_customer.csv\u0026#39; WITH HEADER = TRUE ; COPY sakila.rentals_by_film FROM \u0026#39;DATAFOLDER/rentals_by_film.csv\u0026#39; WITH HEADER = TRUE ; COPY sakila.rentals_by_staff FROM \u0026#39;DATAFOLDER/rentals_by_staff.csv\u0026#39; WITH HEADER = TRUE ; COPY sakila.rentals FROM \u0026#39;DATAFOLDER/rentals.csv\u0026#39; WITH HEADER = TRUE ; COPY sakila.staff FROM \u0026#39;DATAFOLDER/staff.csv\u0026#39; WITH HEADER = TRUE ; COPY sakila.store FROM \u0026#39;DATAFOLDER/store.csv\u0026#39; WITH HEADER = TRUE ;  If during the import you get the error ‘too many open files’ close the shell with exit and start it again.\n Queries The CQL language used by Cassandra is highly similar to SQL, but there are some key differences. Here we analyze few of them.\nExercise\nExercise 1  Consider the table rentals_by_customer and try some queries that use (not all in the same query):\n The WHERE condition.\n Aggregating functions and the GROUP BY clause.\n The SELECT JSON statement.\n  Feel free to refer to the CQL documentation.\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"46ffb4259d4f7cb38feadc0b3a2de999","permalink":"/courses/gadexed/tutorials/cassandra-queries/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/gadexed/tutorials/cassandra-queries/","section":"courses","summary":"Queries in Cassandra","tags":null,"title":"Queries in Cassandra","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial you will learn basic modeling strategies for a data warehouse.\nUse case scenario We intend to set up a data warehouse for the Sakila database that we used in Tutorial 3.\nWe suppose that a DVD rental store chain (let’s call it Sakila) maintains several operational database systems at their different stores, and the management intends to have a single point of truth, in order to check business trends. Hence, the idea of setting up a data warehouse.\nIn order to model a schema for the Sakila data warehouse, we need to identify dimensions and facts. To this extent, we first identify the business questions that the Sakila management wants to be answered.\nExercise\nExercise 1  List some of the business questions that the Sakila management would like to answer.\n   Solution\nDifferent sets of questions are possible. Here are some examples.\nWhich store generates the most revenue? Which customers have rented the most in the past year? (maybe to award fidelity points). Which customers have rented the least in the past year? (maybe to offer some discounts to encourage the customer to rent again). Which staffer has processed the most of the rentals in the past year? (staffer of the year). Which staffer has processed the least of the rentals in the past year? (maybe a layoff in sight?). Which month has the highest revenue? By country, by store? Which country generates the least revenue? (is there any concurrent out there that might be soon a threat in other countries too?) Which categories of films are most popular?    We recall here the conceptual model of the Sakila database.\n Figure 1: The conceptual schema of the Sakila database  Exercise\nExercise 2  Based on the business questions identified in the first exercise, can you tell what the fact and the dimension tables are?\nRecall that the fact table should contain measures and the dimension tables should contain the context of the facts. The dimension table should answer the following questions about a fact: who, what, when, where.\n   Solution\nFrom the questions that we identified in the previous exercise, it is clear that we intend to use the data warehouse to answer questions about the rentals.\nTherefore, our fact table will be fact_rental.\nAs for the dimensions:\n Question 1. suggests the use of the dimension store (where).\n Questions 2., 3. suggest the use of the dimension customer (who).\n Questions 4., 5. suggest the use of the dimension staff (who).\n Question 8. suggests the use of the dimension film (what).\n  All questions suggests the use of a time dimension (when).\nThe time dimension is virtually always present in a data warehouse.\n   Dimensional modeling Now that we identified the fact and the dimension tables, we incrementally draw the star diagram for the Sakila data warehouse.\nExercise\nExercise 3  Draw a first sketch of the star diagram. Do not specify any attributes in the tables.    Solution\n  Exercise\nExercise 4  Identify the primary key of the fact table.\n   Solution\nThe primary key of the fact table is composed of all the attributes that refer to the dimensions. So, we write an attribute for each dimension:\n staff_pk, foreign key to the dimension dim_staff.\n film_pk, foreign key to the dimension dim_film.\n period_pk, foreign key to the dimension dim_period.\n store_pk, foreign key to the dimension dim_store.\n customer_pk, foreign key to the dimension dim_customer.\n  Here is the new schema.\n  Exercise\nExercise 5  For each dimension table, there is a corresponding table in the operational database.\nDiscuss which attributes you would add to the dimension tables.\nIn particular, consider the following points:\n Are you going to add to a dimension table the\nprimary key of the corresponding operational table?\n Are you going to add to a dimension table attributes that are not part of the corresponding table?\n     Solution\n Each dimension table already has a primary key. However, this is the surrogate key that identifies each entity in the dimension table. The business key that is in the corresponding operational table is still a valuable attribute to add.  So, for example, in the table dim_film we’ll add the attribute film_id that is the primary key in the operational table film.\n In each dimension table, we typically add all the attributes that are in the corresponding operational table. However, we also add attributes that are in the linked tables, if they’re necessary to our analysis. For example, in the operational database the category of a film is\nin a separate table film_category (as a result of the normalization process).  If we decide to integrate these dimensions and keep a normalized schema, we obtain a snowflake schema.\nHowever, in a data warehouse we tend to denormalize the dimension tables, to avoid to incur the cost of joining tables.\nOne last remark on the attribute film_categories in table dim_film. The value of this attribute is a list. One might want to avoid this by using a one-hot encoding. In other words, if the set of all possible categories is small, we can have one boolean attribute for each category; a True value would indicate that the film is in the corresponding category.\n  Exercise\nExercise 6  In our schema, the fact table is factless: it only contains a primary key with no measurements.\nWhich measurements would you introduce?\n   Solution\nIt all depends on the queries that we intend to ask. In the queries that we identified at the beginning of the tutorial, we were interested in the revenue generated by the rentals. Also, we might want to keep track of the number of rentals of a given film by a given customer in the given period, and the number of returns.\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e0f51988875bad75f93f80cf12979fe4","permalink":"/courses/gadexed/tutorials/data-warehouse/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/gadexed/tutorials/data-warehouse/","section":"courses","summary":"Data modeling for data warehousing","tags":null,"title":"Data warehousing","type":"docs"},{"authors":null,"categories":null,"content":" Use case scenario The Sakila database is serving an increasing number of queries from staff and customers around the world. A single monolithic database is not sufficient anymore to serve all the requests and the company is thinking of distributing the database across several servers (horizontal scalability). However, a relational database does not handle horizontal scalability very well, due to the fact that the data is scattered across numerous tables, as are result of the normalization process. Hence, the Sakila team is turning to you to help them migrate the database from PostgreSQL to MongoDB.\nFor the migration to happen, it is necessary to conceive a suitable data model. From the first discussions with the Sakila management, you quickly understand that one of the main use of the database is to manage (add, update and read) rental information.\n Analysis of the existing model The existing data model is recalled in the following figure.\n Figure 1: The conceptual schema of the Sakila database  Exercise\nExercise 1  Determine the cardinality (one-to-one, one-to-many, many-to-many) of each of the relationships in which the entity Rental is involved.\nN.B. Don’t hesitate to look at the attributes of each entity in the existing PostgreSQL database.\n   Solution\nThe entity Rental has a relationship with the following tables;\n Inventory. A rental refers to a single inventory (essentially, a copy of a DVD). An inventory might be part of several rentals. This is a one-to-many relationship.\n Staff. A rental is taken care of by a single staff member, A staff member might take care of several rentals. This is a one-to-many relationship.\n Customer. A rental is made by a single customer. A customer might make several rentals. This is a one-to-many relationship.\n Payment. A payment is relative to a single rental. A rental is associated with a single payment. This is a one-to-one relationship.\n    Exercise\nExercise 2  Look at the tables Rental and Customer in the PostgreSQL Sakila database.\nEstimate the size of a row in bytes in both tables.\nThe following considerations will help you in the task.\n The storage size of a numeric data type is clearly indicated in the PostgreSQL documentation.\n The storage size of date/time types is clearly indicated in the PostgreSQL documentation\n The columns with type text hold UTF-8 characters. We assume that each character is 1 byte long (although some characters might need more than 1 byte).\n The columns with type boolean needs 1 byte storage.\n We assume that an email address is 25 characters long on average.\n We assume that a last name is 7 characters long on average.\n We assume that a first name is 6 characters long on average.\n In both tables we ignore the columns last_update and create_date.\n In table Customer we ignore the column active.     Solution\nFor the table Rental we have:\n Column rental_id, integer, 4 bytes.\n Column rental_date, timestamp with time zone, 8 bytes.\n Column inventory_id, integer, 4 bytes.\n Column customer_id, smallint, 2 bytes.\n Column return_date, timestamp with time zone, 8 bytes.\n Column staff_id, smallint, 2 bytes.\n  In total, a row in table Rental needs 28 bytes of storage.\nFor the table Customer we have:\n Column customer_id, integer, 4 bytes.\n Column store_id, smallint, 2 bytes.\n Column first_name, text, 6 bytes (average).\n Column last_name, text, 7 bytes (average).\n Column email, text, 25 bytes (average).\n Column address_id, smallint, 2 bytes.\n Column activebool, boolean, 1 byte.\n  In total, a row in table Customer needs 47 bytes of storage.\n   Considerations for the new model We need to take some decisions as to the new data model. The considerations that we made in the previous exercises will lead us to the right decisions.\nExercise\nExercise 3 \nHow would you model in MongoDB the entities Rental and Payment, given the cardinalities that you identified in the previous section?\n   Solution\nThe relationship between the two given entities is one-to-one. Therefore, we can use a denormalized schema in MongoDB.\nThat is, we can create one single collection to store the information about the two entities.\nWe have two options:\n We create a collection Payment, where each document contains the attributes of a payment and an embedded document with the details of the rental the payment refers to.\n We create a collection Rental, where each document contains the attributes of a rental and an embedded document with the details of the payment for the rental.\n  Although both options are perfectly valid, we prefer the second one, as rentals are our first-class citizens in our database.\nWe can also consider the attributes of a payment as attributes of a rental, without creating an embedded document for the payment.\n  Exercise\nExercise 4  Suppose that we create a collection Customer and we embed in each customer document the list of rentals for that customer.\nHow many rentals can we store at most for a given customer, knowing that the size of a document cannot exceed 16 MB?\n   Solution\nWe’ve seen before that each rental needs 28 bytes of space. To make the computation easier, we round this size up to 32 bytes (a power of two). Considering that 16 MB = \\(16 \\times 2^{20}\\), the maximum number of rentals that we can store for a given customer is given by:\n\\[ \\frac{16 \\times 2^{20}}{32} = 2^{-1} \\times 2^{20} = 2^{19} \\]\nThis gives around 600,000 rentals.\n  Exercise\nExercise 5  In our current database we have:\n 599 customers.\n 16044 rentals.\n On average, each customer has around 27 rentals.\n  Compute the size in byte of the two following collections:\n Collection Customer, where each document contains the information about a customer and an embedded list with the information on all the rentals made by the customer.\n Collection Rental, where each document contains the information about a rental and an embedded document with the information on the customer that made the rental.     Solution\nWe previously found out that for each customer we need 47 bytes and for each rental we need 28 bytes.\nA document that holds the data about a customer and the list of all the rentals of the customer will need \\(47 + 27 \\times 28 = 830\\) bytes.\nHence, the total size of the Customer collection is \\(803 \\times 599 = 480977\\) bytes, that is 470 KB.\nA document that holds the data about a rental and its customer needs $ 28 + 47 = 75 $ bytes.\nHence, the total size of the Rental collection is \\(75 \\times 16044 = 1203300\\) bytes, that is 1,1 MB.\n  Exercise\nExercise 6  Discuss advantages and disadvantages of the two following options:\nA collection Customer with a document for each customer holding the list of all the rentals of the customer.\n A collection Rental with a document for each rental holding the data on the relative customer.     Solution\nAdvantages of solution 1.:\n There is no redundancy. In fact, a rental is relative to at most one customer, therefore the data on a rental is not duplicated across different documents.\n As a result, the size of the collection is smaller than the collection in solution 2.\n For each customer, we retrieve the information on all his/her rentals with only one read operation\n  Disadvantages of solution 1.:\n There is a limit (albeit an acceptable one) on the number of rentals that we can store for each customer.\n We lose a “rental-centric” view of our data. As a result, if any other document in another collection (e.g., staff) refers to a rental, all the information about a rental must be denormalized in that document.\n  Advantages of solution 2.\n A “rental-centric” view of our data. Aggregating information from different rentals does not require digging rentals out of several lists.\n The size of each document is small and will never exceed the 16 MB limit.\n As a result, reading a document from the collection takes less time and memory than reading a document from the collection in solution 1.\n  Disadvantages of solution 2.\n There is a lot of redundancy. The information about a customer are replicated each time the customer makes a rental.\n As a result, the size of the collection is much higher than in solution 1.\n    It seems that one of the two solutions has a higher storage demands than the other, and therefore the odds seems to be stacked against that solution.\nHowever….\nWe still have to consider two more entities that are linked to the rentals: staff and inventory.\nExercise\nExercise 7  Discuss how you can fit staff and inventory in each of the solutions presented in the previous exercise. Discuss advantages and disadvantages of each option that you present.\n   Solution\nSolution 1\nWe need to somehow link staff and inventory to the relative rental. We have three options:\n We embed staff and inventory into each rental document, which, let’s recall it, is already embedded in an array. This creates redundancy, as a staff member or an inventory item can appear in more than one rental.\n We create three separate collections (Customer, Staff and Inventory) and in each we embed an array with the list of the relative rentals. The problem is that the data on the rentals are now replicated three times. This solution is particularly bad, because rentals are frequently written. When we create a rental, we need to write three documents; when a customer returns an item, we need to update the return date in three documents.\n We create four collections (Customer, Staff, Inventory and Rentals); for each customer, staff and inventory we keep a list of rentals, each item being the identifier that refers to the appropriate rental. We fall back to the normalized schema of the PostgreSQL database. Then, it isn’t clear how this normalized schema will help horizontally scale the database.\n  Solution 2\nWe have only one collection Rental; in each document, we have an attribute customer, whose value is an embedded document with all the information about a customer, an attribute staff, whose value is an embedded document with all information about a staff member, and an attribute inventory, whose value is an embedded document with all information about an inventory item.\nThis solution has higher storage requirements than the options presented in solution 1, but it has the clear advantage of being a denormalized schema, where we control every facet of a rental (customer, staff, inventory). Moreover, when we create a rental, we only write one document ; when we update the return date of a rental, we only update one document.\n  From the previous exercise, we have a clearer idea as to the best solution to our case. We take a closer look at the storage requirements of the adopted solution. Consider that:\n The size in byte of a document storing the information of a staff member is around 84000 bytes (we also store a profile picture).\n The size in byte of a document storing the information of an inventory item is 16 bytes.\n  Exercise\nExercise 8  If we denote by \\(N_{rental}\\) the number of rentals, what is the size in bytes of the whole database for the adopted solution?\n   Solution\nLet’s recall that the size in bytes of a document storing the information on a customer is 47 bytes.\nThe size of the only collection Rental (hence, of the whole database) is:\n\\[ N_{rentals} \\times (47 + 84000 + 16) = N_{rentals} \\times 84063 \\]\nWith 10,000 rentals, the size of the database is 800 MB. With 100,000 rentals, the size of the database is 7 GB. With 1,000,000 rentals, the size of the database is 78 GB.\n  Although the size that we determined in the previous exercise, may not sound impressive, we still have to store other information (films, actors….). If we could save a bit of space, we would be happy.\nExercise\nExercise 9  Discuss how you could save some space in the adopted solution.\nHINT. Do you really need to denormalize all data?\n   Solution\nWhile modeling data for a MongoDB database, the choice between a normalized and a denormalized schema does not need to be a black and white one.\nWe can have a denormalized schema, where we embed in the same documents information that are queried together, while storing in a separate collection the information that are rarely queried.\nFor instance, the profile picture of a staff member might not be an important piece of information while we’re trying to analyze which staff members are the more productive ones.\nSo, we might add another collection Staff where each document only contains attributes that are not in embedded documents in the collection Rental.\n  Exercise\nExercise 10  Propose a solution for all the entities involved and estimate the saving in terms of storage requirements.\n   Solution\nHere is a solution with three different collections. The information on inventory are completely denormalized into the collection Rental. For customers and staff members we only keep the necessary information and we normalize the information that are less likely to be queried while analyzing the rentals.\nLet’s try to estimate the savings in terms of storage. In a document of the collection Rental, we have the following attributes:\n rental_id: 4 bytes.\n rental_date and return_date: 16 bytes.\n inventory_id: 4 bytes\n film_id and store_id: 4 bytes\n customer_id: 4 bytes\n customer first and last names: 13 bytes.\n country: 9 bytes (on average a country name has 9 characters).\n staff_id: 4 bytes\n staff first and last name: 13 bytes.\n  In total a document in our collection Rental will have 71 bytes (a huge improvement wrt the 84000 bytes of our first solution).\nOf course, the size of a document in the Staff collection will be around 84000 bytes (we still store the profile picture). However, the number of staff members \\(N_{staff}\\) is much lower than the number of rentals \\(N_{rentals}\\).\nIt is easy to verify that the size of a document of the collection Customer is 34 bytes (same information as before except first and last name). Again, the number of customers \\(N_{customers}\\) is much lower than \\(N_{rentals}\\).\nWe assume that each customer has on average 30 rentals and for 100 customers we have 1 staff member. We have that:\n $N_{customer} = N_{rental}/30 $\n $N_{staff} = N_{customer}/100 = N_{rental}/3000 $\n  So, the size of the database will be given by:\n\\[ 71\\times N_{rentals} + 84000 \\times N_{rentals}/3000 + 34 \\times N_{rentals}/30 = 100 \\times N_{rental} \\]\nIf we want to compare against the first solution:\n With 10,000 rentals, the size of the database is 976 KB (instead of 800 MB). With 100,000 rentals, the size of the database is 9,5 MB (instead of 7 GB). With 1,000,000 rentals, the size of the database is 95 MB (instead of 78 GB).  As you can see, a big improvement! And we have a denormalized schema that lets us take advantage of the horizontal scalability of MongoDB.\n   The new model In this section we intend to obtain a complete model of the Sakila database.\nExercise\nExercise 11  Consider the model that we obtained at the end of the previous section. Which data can you further denormalize?\n   Solution\nCollection Staff\n The attribute address_id refers to a full address. We can fully denormalize this information into the documents of the collection.\n The attribute store_id refers to the store where the staff member works. The Store table in the original PostgreSQL database does not have too many columns. Therefore, it might be reasonable to fully denormalize these data. However, information on the stores are also linked to customers and to inventory items. If we need to update, say, the manager of a store, we would need to update three different documents. Hence, we prefer to create a collection Store and keep in the documents of the collection Staff only the city and country of a store (and its identifier of course).\n  Attribute Inventory in collection Customer\n Same considerations for the attribute store_id.\n The attribute film_id is the reference to the film the inventory item is relative to. The table Film in the original PostgreSQL database contains 14 columns. This high number of attributes advises us against a full denormalization, considering that a film can be relative to multiple inventory items. We might only keep the film title and the film categories. The rest of the attributes are kept in documents of a separate collection Film.\n  Collection Customer\nSame considerations for the attributes store_id and address_id.\n  Exercise\nExercise 12  Complete the diagram obtained in the previous exercise so as to obtain a full data model for the Sakila database.\n   Solution\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"04a283ce7d4305dbfa85000556910018","permalink":"/courses/gadexed/tutorials/mongodb-data-modeling/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/gadexed/tutorials/mongodb-data-modeling/","section":"courses","summary":"Data modeling in MongoDB","tags":null,"title":"Data modeling in MongoDB","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial you’ll learn to write basic and advanced queries in MongoDB.\nGet the data Download the this archive file and extract it. You’ll find a file for each collection to import into the database.\nOpen MongoDB Compass, create a new database named sakila and create the different collections while importing the data.\n Basic queries Exercise\nExercise 1  Write the following queries in MongoDB:\nReturn all the information on all customers.\n Return the email of all customers.\n Return the email of the customers of Canadian stores.\n Return the identifier of all rentals made by customers from Iran, where the amount paid is strictly greater than 10 dollars.\n Return the first and last names of the actors who played a role in film 213.\n     Solution\n  db.customer.find()   db.customer.find({}, {email:1})   db.customer.find({\"store.country\": \"Canada\"}, {email:1});   db.rental.find({\"customer.country\": \"Iran\", amount: {$gt: 10}}, {rental_id: 1, _id:0});   db.film.find({film_id: 213}, {\"actors.first_name\":1, \"actors.last_name\": 1}).sort({\"actors.last_name\": -1});    Operations on arrays Exercise\nExercise 2  Write the following queries in MongoDB:\nReturn the identifier of the films that have “Behind the Scenes” as special features.\n Return the identifier of the films that have as special features all of the following: “Commentaries” and “Deleted Scenes”.\n Return the identifier of all the films where BURT POSEY played a role.\n Return the identifier of the film that has exactly 15 actors.\n     Solution\n  db.film.find({special_features : {$elemMatch: {$eq: \"Behind the Scenes\"}}}, {film_id: 1, _id:0});   db.film.find({special_features : {$all: [\"Commentaries\", \"Deleted Scenes\"]}}, {film_id: 1, _id:0});   db.film.find({\"actors.first_name\": \"BURT\", \"actors.last_name\": \"POSEY\"}, {film_id: 1, _id:0});   db.film.find({actors: {$size : 15}}, {film_id: 1, _id:0});    Aggregation framework Exercise\nExercise 3  Write the following queries in MongoDB using the aggregation framework:\nReturn the title of the films rented by TOMMY COLLAZO (can you also express this query with the function find()?)\n Count the total amount of payments across all rentals.\n Return the number of actors of each film.\n Sort the films by the number of actors (decreasing order).\n Return the average number of actors for each film.\n Return the identifier of the customer who made the most of rentals.\n Return the first and last name of the customer who made the most of rentals.\n Return the country where the customers have rented the most of the films in the category “Music”.\n     Solution\n   db.rental.aggregate({$match: {\"customer.first_name\": \"TOMMY\", \"customer.last_name\": \"COLLAZO\"}}, {$project: {\"inventory.film.title\": 1, _id:0}})  One can also express this query with the function find()  db.rental.find({\"customer.first_name\": \"TOMMY\", \"customer.last_name\": \"COLLAZO\"}, {\"inventory.film.title\": 1, _id:0});     db.rental.aggregate({$group: {\"_id\": null, total_amount: {$sum: \"$amount\"}}})     db.film.aggregate({$project: {nb_actors: {$size: \"$actors\"}}})    If we don’t put the match condition, we get an error because for some films the field actors is not defined.\ndb.film.aggregate({$match: {actors: {$elemMatch: {$exists: true}}}}, {$project: {film_id: 1, \"nb_actors\": {$size: \"$actors\"}}}, {$sort: {nb_actors: -1}})     db.film.aggregate({$match: {actors: {$elemMatch: {$exists: true}}}}, {$project: {film_id: 1, \"nb_actors\": {$size: \"$actors\"}}}, {$group: {_id: null, avg_actors: {$avg: \"$nb_actors\"}}})     db.rental.aggregate({$group: {_id: \"$customer.customer_id\", count: {$sum: 1}}}, {$sort: {count: -1}})     db.rental.aggregate({$group: {_id: {cust_id: \"$customer.customer_id\", cust_first_name: \"$customer.first_name\", cust_last_name: \"$customer.last_name\"}, count: {$sum: 1}}}, {$sort: {count: -1}}, {$limit :1})    db.rental.aggregate({\\(match: {\u0026quot;inventory.film.categories.category\u0026quot;: \u0026quot;Music\u0026quot;}}, {\\)group: {_id: \u0026quot;\\(customer.country\u0026quot;, count: {\\)sum: 1}}}, {\\(sort:{count: -1}}, {\\)limit: 1})\n   Join Operations Exercise\nExercise 4  Write the following queries in MongoDB using the aggregation framework:\nReturn the language of the film with title “ACE GOLDFINGER”.\n Return all the information about the staff member who took care of rental 2.\n     Solution\n   db.rental.aggregate({$match: {\"inventory.film.title\": \"ACE GOLDFINGER\"}}, {$lookup: {from: \"film\", localField: \"inventory.film.film_id\", foreignField:\"film_id\", as:\"film\"}}, {$project: {\"film.language\": 1}}, {$limit : 1})     db.rental.aggregate({$match: {rental_id: 2}}, {$lookup: {from: \"staff\", localField: \"staff.staff_id\", foreignField:\"staff_id\", as:\"staff_member\"}}, {$project: {\"staff_member\": 1}})     ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a613c6a1ca8c120630f0e794fdd055c3","permalink":"/courses/gadexed/tutorials/mongodb-queries/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/gadexed/tutorials/mongodb-queries/","section":"courses","summary":"Queries in MongoDB","tags":null,"title":"Queries in MongoDB","type":"docs"},{"authors":null,"categories":null,"content":" Setting up the work environment.  Download Neo4j Desktop and install it on your computer.\n Create a new project by clicking on the button “New” that you’ll find on the top left side of the window.\n Click on “Add Database”, then “Create a Local Database”.\n Give the database a name (e.g., MovieLens) and set a password that you can easily remember; then click on “Create”. Choose version 4.4.8 for the database.\n Click on “Start” and wait for the database to become active.\n Click on the button “Open”. The Neo4j Browser will pop up.\n  In the next section, you’ll have to type a sequence of commands to import the data. You’ll write the commands in the text field on top of the Neo4j Browser (where you find the prompt neo4j$).\nImport the data. The dataset consists of data obtained from MovieLens, a recommender system whose users give movies a rate between 1 and 5, based on whether they dislike or love them. MovieLens uses the rates to recommend movies that its users might like. The dataset is modeled as a directed graph and consists of 100,004 rates on 9,125 movies across 671 users between January 9th, 1995 and October 16, 2016. The dataset also contains the names of the directors and the actors of each movie.\nImport the nodes corresponding to the movies (label Movie) by using the following command (it took 31 seconds on my computer):   :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/movies.csv' as row MERGE (m:Movie {movie_id: toInteger(row.movie_id), title_en:row.movie_title_en, title_fr:row.movie_title_fr, year: toInteger(row.movie_year)}) RETURN count(m)  Create an index on the property movie_id of the nodes with label Movie with the following command:   create index movie_idx for (m:Movie) on (m.movie_id)  Import the nodes corresponding to the actors (label Actor) by using the following command (it took 62 seconds on my computer):   :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/actors.csv' as row MERGE (a:Actor {actor_id: toInteger(row.actor_id), name:row.actor_name}) RETURN count(a)  Create an index on the property actor_id of the nodes with label Actor with the following command:   create index actor_idx for (a:Actor) on (a.actor_id)  Import the nodes corresponding to the directors (label Director) by using the following command (it took 4 seconds on my computer):   :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/directors.csv' as row MERGE (d:Director {director_id: toInteger(row.director_id), name:row.director_name}) RETURN count(d)  Create an index on the property director_id of the nodes with label Director with the following command:   create index director_idx for (d:Director) on (d.director_id)  Import the nodes corresponding to the genres (label Genre) by using the following command (it took 197 ms on my computer):   :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/genres.csv' as row MERGE (g:Genre {genre_id: toInteger(row.genre_id), name:row.genre_name}) RETURN count(g)  Create an index on the property genre_id of the nodes with label Genre with the following command:   create index genre_idx for (g:Genre) on (g.genre_id)  Import the nodes corresponding to the users (label User) by using the following command (it took 347 seconds on my computer):   :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/users.csv' as row MERGE (u:User {user_id: toInteger(row.user_id), name:row.user_nickname}) RETURN count(u)  Create an index on the property user_id of the nodes with label User with the following command:   create index user_idx for (u:User) on (u.user_id)  Import the links of type ACTED_IN between actors and movies with the following command (it took 2.5 seconds on my computer):   :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/movies_actors.csv' as row MATCH (m:Movie {movie_id: toInteger(row.movie_id)}) MATCH (a:Actor {actor_id: toInteger(row.actor_id)}) MERGE (a)-[r:ACTED_IN]-(m) RETURN count(r)  Import the links of type DIRECTED between directors and movies with the following command (it took 688 ms on my computer):   :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/movies_directors.csv' as row MATCH (m:Movie {movie_id: toInteger(row.movie_id)}) MATCH (d:Director {director_id: toInteger(row.director_id)}) MERGE (d)-[r:DIRECTED]-(m) RETURN count(r)  Import the links of type HAS_GENRE between movies and genres with the following command (it took 1 second on my computer):   :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/movies_genres.csv' as row MATCH (m:Movie {movie_id: toInteger(row.movie_id)}) MATCH (g:Genre {genre_id: toInteger(row.genre_id)}) MERGE (m)-[r:HAS_GENRE]-(g) RETURN count(r)  Import the links of type RATED between users and movies with the following command (it took 5.9 seconds on my computer):   :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/user_rates.csv' as row MATCH (m:Movie {movie_id: toInteger(row.movie_id)}) MATCH (u:User {user_id: toInteger(row.user_id)}) MERGE (u)-[r:RATED {rate:toFloat(row.rate)}]-(m) RETURN count(r)    Exploratory queries If you looked at the commands used to import the data, you might already have an idea as to the structure of the graph. You can get a glimpse on the node labels, the relationship types and the property keys by clicking on the button circled in the following figure:\nExercise Exercise 1  Write and execute the following query:\n MATCH (m:Movie {title_en:\"Toy Story\"}) RETURN m;  What do you obtain? What are the properties associated to a node with label Movie? Click once on the node to display its properties.\n   Solution\nThe requested node is displayed in the Neo4j Browser. By clicking on the node, we see that the properties are: movie_id, title_en, title_fr, year.\n  Exercise Exercise 2  Double-click on the node displayed as the result of the previous query. Analyze the neighbouring nodes (their labels and properties) and the incident links (direction, type and properties). You can move around the node by dragging it in the window.\n   Solution\nFrom the interface, we see that the movie Toy Story is rated by 90 users, has 5 genres, 4 actors and 1 director. The following observations can be made:\n Each node with label User has two properties, user_id and name.\n Each node with label Genre has two properties, genre_id and name.\n Each node with label Director has two properties, director_id and name.\n Each node with label Actor has two properties, actor_id and name.\n A relationship of type RATED has a property rate and is directed from a node with label User to a node with label Movie.\n A relationship of type DIRECTED is directed from a node with label Director to a node with label Movie.\n A relationship of type HAS_GENRE is directed from a node with label Movie to a node with label Genre.\n A relationship of type ACTED_IN is directed from a node with label Actor to a node with label Movie.\n     Queries Exercise Exercise 3  Write and execute the following queries:\nQ1. The genres of the movies in the database.\nQ2. The number of movies in the database.\nQ3. The title of the movies released in 2015.\nQ4. The number of directors by movie. Sort in decreasing order.\nQ5. The names of the directors and the title of the movies that they directed and in which they also played.\nQ6. The genres of the movies in which Tom Hanks played.\nQ7. The title and the rate of all the movies that the user with identifier 3 rated. Sort by rate in decreasing order.    Solution\nQ1.  MATCH (g:Genre) RETURN g.name  Q2.  MATCH (n:Movie) RETURN count(n)  Q3.  MATCH (n:Movie {year:2015}) RETURN n.title_en;  Q4.  MATCH (n:Movie)Q5.  MATCH (a:Actor)-[:ACTED_IN]-(m:Movie)Q6.  MATCH (:Actor {name:\"Tom Hanks\"})-[:ACTED_IN]-(:Movie)-[:HAS_GENRE]-(g:Genre) RETURN DISTINCT (g.name);  Q7.  MATCH (n:User {user_id:3})-[r:RATED]-(m:Movie) RETURN m.title_en, r.rate ORDER BY r.rate desc;    Query chaining Cypher allows the specification of complex queries composed of several queries that are concatenated with the clause WITH. We are now going to see an example to obtain the titles of the movies that have been rated by at least 100 users.\nAt a first glance, the following query looks like a good solution:\n MATCH (n:Movie)= 100 RETURN n.title_en LIMIT 5;  However, executing this query returns the following error:\n Invalid use of aggregating function count(...) in this context (line 1, column 42 (offset: 41)) \"MATCH (n:Movie)= 100\"  Similarly to SQL, we cannot use aggregating functions in the clause WHERE.\nA correct formulation of the query requires the use of the clause WITH to concatenate two queries: the first will count the number of rates for each movie:\n MATCH (n:Movie)The second will take in the output of the first and will filter all the movies where nb_rates \u0026lt; 100. In order to chain the two queries, we’ll replace the RETURN clause in the first query with a WITH clause, as follows:\n MATCH (n:Movie)= 100 RETURN n.title_en  Exercise Exercise 4  Write and execute a query to obtain the five movies that obtained the best average rate among the movies that have been rated by at least 100 users.\n   Solution\n MATCH (n:Movie)= 100 RETURN n.title_en, avg ORDER BY avg DESC;      Movie recommendation We are now going to see how Neo4j can be effectively used in a real application by implementing queries that form the basis of a simple movie recommendation system. This system is based on the notion of collaborative filtering.\nThis consists in recommending a user \\(u\\) some films that s/he hasn’t rated yet and other users with similar preferences have loved. In our context, we say that a user loves a movie if s/he rated the movie at least 3.\nThis concept is explained in the following figure.\nThe user \\(u\\) loves 6 movies, 3 of which are also loved by the user \\(v\\) (the black nodes); it is reasonable to think that \\(u\\) may also love the two movies that \\(v\\) loved and \\(u\\) hasn’t rated yet.\nThe principle of collaborative filtering is based on the computation of a similarity score between two users. Several similarity scores are possible in this context; here, we are going to use the Jaccard coefficient. Let \\(L(u)\\) and \\(L(v)\\) be the sets of movies that \\(u\\) and \\(v\\) love respectively; the similarity score \\(J(u,v)\\) between \\(u\\) and \\(v\\) is given by:\n\\[ J(u, v) = \\frac{|L(u) \\cap L(v)|}{|L(u) \\cup L(v)|} \\]\nIn order to recommend movies to a target user \\(v\\), the recommender system computes the similarity score between \\(v\\) and all the other users of the system and proposes to \\(v\\) the movies that s/he hasn’t rated yet and that the \\(k\\) most similar users loved.\nWe are now going to incrementally write a query to recommend some movies to the target user 3. The first step consists in determining the value \\(|L(v)|\\).\nExercise Exercise 5  Write and execute the query to obtain the number of movies that the user 3 loved. This query must return the target user and the number of movies that s/he loves.\n   Solution\n MATCH (target:User {user_id:3})-[r:RATED]-(m:Movie) WHERE r.rate = 3 RETURN target, count(m) AS lovedByTarget;    Next, we are going to determine the value \\(|L(u)|\\), for all users \\(u\\) except \\(v\\).\nExercise Exercise 6  Write and execute the query to obtain the number of movies that each user \\(u\\) loves, except the target user 3. This query must return each user \\(u\\) and the number of movies that s/he loves.\n   Solution\n MATCH (other:User)-[r:RATED]-(m:Movie) WHERE other.user_id  3 and r.rate = 3 RETURN other, count(m) as lovedByOther    We put the two queries together with the clause WITH.\nExercise Exercise 7  Compose the two previous queries with the clause WITH. This query must return the target user 3, the number of movies that s/he loves, the other users \\(u\\) and the number of movies that they love.\n   Solution\n MATCH (target:User {user_id:3})-[r:RATED]-(m:Movie) WHERE r.rate = 3 WITH target, count(m) AS lovedByTarget MATCH (other:User)-[r:RATED]-(m:Movie) WHERE other  target and r.rate = 3 RETURN target, lovedByTarget, other, count(m) as lovedByOther    Now, we need to determine the value \\(L(u)\\cup L(v)\\), for each user \\(u\\), and compute the similarity score with the Jaccard coefficient.\nExercise Exercise 8  Append (by using WITH) to the query written in the previous exercise a query that obtains the number of movies that any user \\(u\\) loved and that the target user 3 loved too, and computes the similarity score between the target user 3 and \\(u\\). This query must return the five most similar users to the target user and the similarity scores.\n Hint Multiply the numerator of the equation by 1.0, otherwise Cypher will compute an integer division.     Solution\nThe following is the query written at the previous exercise, where the RETURN clause has been replaced with WITH.\n MATCH (target:User {user_id:3})-[r:RATED]-(m:Movie) WHERE r.rate = 3 WITH target, count(m) AS lovedByTarget MATCH (other:User)-[r:RATED]-(m:Movie) WHERE other  target and r.rate = 3 WITH target, lovedByTarget, other, count(m) as lovedByOther  We have to append the following query:\n MATCH (target)-[r:RATED]-(m:Movie)= 3 and r1.rate = 3 RETURN other, count(m)*1.0 / (lovedByTarget + lovedByOther - count(m)) as sim ORDER BY sim DESC LIMIT 5    The last step consists in recommending some movies to the target user. From the previous query, take the identifier of the user \\(w\\) with the highest similarity to the target user. You are going to use this identifier directly in the new query.\nExercise Exercise 9  Write and execute the query to obtain the list of the movies that the user \\(w\\) loved and that the target user hasn’t rated yet. Sort this list by decreasing rate.\n Hint\n First, write a query to obtain the list of the movies that the target user rated. In the MATCH clause, use the variable \\(m\\) to indicate a movie that the target user rated. Conclude the query with:   RETURN collect(m.title_en) AS movies  The function collect creates a list called movies.\n Replace RETURN with WITH in the previous query and add a second query to select the titles of the movies \\(m\\) that the user \\(w\\) loved and the target user did not rate. In order to exclude the films that the target user did not rate, use the following predicate:   none(x in movies where x=m.title_en)  in the WHERE clause.\n    Solution\nThe following is the query written at the previous exercise, where the RETURN clause has been replaced with WITH.\n MATCH (target:User {user_id:3})-[r:RATED]-(m:Movie) WITH collect(m.title_en) as movies MATCH (u:User {user_id:129})-[r:RATED]-(m:Movie) WHERE r.rate =3 AND none(x IN movies WHERE x=m.title_en) RETURN m.title_en ORDER BY r.rate DESC;     ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6366e58486d6b6b25b071d1accc8c5c6","permalink":"/courses/gadexed/tutorials/neo4j/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/gadexed/tutorials/neo4j/","section":"courses","summary":"Queries in Neo4j","tags":null,"title":"Neo4j","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial you’ll learn:\n How to obtain a non-redundant set of functional dependencies. How to determine the candidate keys of a table given its functional dependencies. How to determine the normal form of a table.  Question 1 We consider a relational table \\(R\\) with four columns \\(A\\), \\(B\\), \\(C\\) and \\(D\\). Let \\(\\mathcal{F}\\) be the following set of functional dependencies:\n\\(AB \\rightarrow C\\)\n \\(D \\rightarrow BC\\)\n \\(A \\rightarrow B\\)\n  Exercise\nExercise 1  Derive a minimal set \\(\\mathcal{G}\\) of functional dependencies that is equivalent to \\(\\mathcal{F}\\).\n   Solution\nWe first need to write the functional dependencies in canonical form (the right-side of each FD must consist of only one column).\nThe FD (2.) can be rewritten using the decomposition axiom.\n\\(AB \\rightarrow C\\)\n \\(D \\rightarrow B\\)\n \\(D \\rightarrow C\\)\n \\(A \\rightarrow B\\)\n  Next, we need to make sure that all functional dependencies are left-irreducible.\nAll functional dependencies except the first one is trivially left-irreducible (the determinant consists of only one column). The first has two columns in the determinant, therefore we need to check whether we can eliminate one of the two columns and still preserve an equivalent set of functional dependencies.\nWe apply Armstrong’s axioms to compute the closure of this set of functional dependencies.\nFrom (1.) and (4.), we can apply the pseudotransitivity axiom and we obtain:\n\\[A \\rightarrow B \\wedge AB \\rightarrow C \\implies AA \\rightarrow C \\implies A \\rightarrow C\\]\nSince \\(A \\rightarrow C\\) is in the cover, the column \\(B\\) in FD (1.) is useless and can therefore be omitted.\nThe set \\(\\mathcal{G}\\) consists of the following FDs:\n \\(A \\rightarrow C\\)\n \\(D \\rightarrow B\\)\n \\(D \\rightarrow C\\)\n \\(A \\rightarrow B\\)\n  None of these functional dependencies are redundant.\n   Question 2 Let \\(R\\) be a relational table with five columns \\((A, B, C, D, E)\\). The following set \\(\\mathcal{F}\\) of functional dependencies hold:\n\\(AB \\rightarrow C\\) \\(C \\rightarrow A\\) \\(C \\rightarrow B\\) \\(C \\rightarrow D\\) \\(D \\rightarrow E\\)  Exercise\nExercise 2  Specify the candidate keys of the table \\(R\\).\n   Solution\nA candidate key is a set of columns that imply all the other columns.\nFirst, let’s try sets composed of only one column: \\(\\{A\\}\\), \\(\\{B\\}\\), \\(\\{C\\}\\), \\(\\{D\\}\\) and \\(\\{E\\}\\).\nWe have the following: (\\(\\{X\\}^+_{\\mathcal{F}}\\) indicates the set of all columns implied by \\(X\\)).\n \\(\\{A\\}^+_{\\mathcal{F}} = \\{A\\}\\)\n \\(\\{B\\}^+_{\\mathcal{F}} = \\{B\\}\\)\n \\(\\{C\\}^+_{\\mathcal{F}} = \\{A, B, C, D, E\\}\\)\n \\(\\{D\\}^+_{\\mathcal{F}} = \\{D, E\\}\\)\n \\(\\{E\\}^+_{\\mathcal{F}} = \\{E\\}\\)\n  Therefore, \\(\\{C\\}\\) is a candidate key because it implies all the other columns.\nFrom the functional dependency (1), we obtain that \\(AB\\) implies \\(C\\); therefore, by transitivity they imply all the other columns.\nIn conclusion, we have two candidate keys: \\(\\{C\\}\\) and \\(\\{A, B\\}\\).\n  Exercise\nExercise 3  We assume that \\(R\\) is in 1NF.\n Is table \\(R\\) in 2NF? Justify your answer.\n Is table \\(R\\) in 3NF? Justify your answer.\n Is table \\(R\\) in BCNF? Justify your answer.     Solution\n \\(R\\) is in 2NF. In fact, all non-prime columns depend entirely on both candidate keys.\n \\(R\\) is not in 3NF. In fact, the functional dependency \\(D \\rightarrow E\\) is between two non-prime columns.\n As a result, \\(R\\) is not in BCNF either.\n    Exercise\nExercise 4  If the table \\(R\\) from the previous exercise is not in BCNF, how would you change the schema so that BCNF is satisfied? For each table, specify the primary key and the foreign keys linking the tables to each other.\n   Solution\nThe table is not in 3NF. The offending functional dependency is \\(D \\rightarrow E\\).\nWe need to create a new table \\(R_1\\), where the primary key is the determinant in the offending functional dependency (\\(D\\)). We then move all columns that are dependent on \\(D\\) (only \\(E\\) in our case) from \\(R\\) to \\(R_1\\). Note that \\(D\\) is kept in \\(R\\) so that we can use it to link \\(R\\) with \\(R_1\\).\nIn summary:\n\\[R = \\{A, B, C, D\\}\\]\n\\[R_1 = \\{D, E\\}\\]\nThe primary key of \\(R\\) is \\(\\{C\\}\\) (or, we can also choose \\(\\{A, B\\}\\) if we want). The primary key of \\(R_1\\) is \\(\\{D\\}\\).\nThe column \\(D\\) in \\(R\\) is a foreign key referencing the column \\(D\\) in \\(R_1\\).\n   Question 3 Let \\(R\\) be a relational table with four columns \\((A, B, C, D)\\). \\(\\{A, B\\}\\) is the only candidate key.\nExercise\nExercise 5  Identify a minimal set of functional dependencies. Justify your answer.\n   Solution\nA candidate key implies all the other columns of the table. Therefore we have :\n\\[AB \\rightarrow C\\] \\[AB \\rightarrow D\\]\nBoth functional dependencies are in canonical form (the right side only consist of one column). Trivially, both functional dependencies are left-irreducible (we cannot remove any of the columns in the determinant without losing information). So, this is a minimal set of functional dependencies.\n  Exercise\nExercise 6  Add \\(B \\rightarrow D\\) to the set of functional dependencies that you identified in the previous exercise. Modify the minimal set of functional dependencies accordingly. Justify your answer.\n   Solution\nWe consider the following functional dependencies:\n\\(AB \\rightarrow C\\) \\(AB \\rightarrow D\\) \\(B \\rightarrow D\\)  The FD (3) clearly makes FD (2) redundant. By using the augmentation axiom on (3) we obtain:\n\\(AB \\rightarrow AD\\)  By applying the decomposition axiom on (4) we obtain:\n\\(AB \\rightarrow A\\)\n \\(AB \\rightarrow D\\)\n  Which shows that (2) is redundant.\nIn summary, we have the following functional dependencies:\n\\[AB\\rightarrow C \\] \\[B\\rightarrow D \\]\n  Exercise\nExercise 7  We assume that \\(R\\) is in 1NF.\n Is table \\(R\\) in 2NF? Justify your answer.\n Is table \\(R\\) in 3NF? Justify your answer.\n Is table \\(R\\) in BCNF? Justify your answer.     Solution\n \\(R\\) is not in 2NF. In fact, the non-prime column \\(C\\) is functionally dependent on only one part of the candidate key.\n \\(R\\) is not in 3NF, let alone BCNF, because it doesn’t fulfill the first condition, that is being in 2NF.\n    Exercise\nExercise 8  Normalize \\(R\\) to the BCNF form. Justify your choices.\n   Solution\nThe functional dependency that gives a partial dependency is: \\(B \\rightarrow D\\). We create a new table \\(R_1\\), where the determinant (\\(B\\)) of the offending functional dependency is the primary key. We move the columns that depend on \\(B\\) (here, only \\(D\\)) from table \\(R\\) to table \\(R_1\\).\nIn summary:\n\\[R = (A, B, C)\\]\n\\[R_1 = (B, D)\\]\nWe can see that \\(R\\) is in 3NF because:\n The only non-prime column is \\(C\\), therefore there cannot be any dependency between non-prime columns.  \\(R\\) is in BCNF because:\n The only functional dependency \\(AB \\rightarrow C\\) has a key as its determinant.  Similarly, for \\(R_1\\).\n   Question 4 We consider the following table:\nPatient (ssn, first_name, last_name, phone_number, insurance_number, insurance_expiration_date) where the following set \\(\\mathcal{F}\\) of functional dependencies holds:\nssn -\u0026gt; first_name, last_name, phone_number, insurance_number, insurance_expiration_date insurance_number -\u0026gt; insurance_expiration_date Exercise\nExercise 9 Derive a minimal set \\(\\mathcal{G}\\) of functional dependencies that is equivalent to \\(\\mathcal{F}\\).    Solution\nFirst, we need to rewrite the FDs in canonical form.\n\\(ssn \\rightarrow first\\_name\\) \\(ssn \\rightarrow last\\_name\\) \\(ssn \\rightarrow phone\\_number\\) \\(ssn \\rightarrow insurance\\_number\\) \\(ssn \\rightarrow insurance\\_expiration\\_date\\) \\(insurance\\_number \\rightarrow insurance\\_expiration\\_date\\)  The determinant of each FD is composed of only one column, therefore it is already left-irreducible. It is easy to see that all FDs with ssn as a determinant must be kept (otherwise we lose some information).\nBy transitivity from 4. and 6. we obtain:\n\\[ssn \\rightarrow insurance\\_expiration\\_date\\]\nTherefore, \\(\\mathcal{G}\\) is obtained from \\(\\mathcal{F}\\) by removing 5.\n  Exercise\nExercise 10 Given \\(\\mathcal{G}\\), identify the candidate keys in the table Patient.    Solution\nFrom the functional dependencies in \\(\\mathcal{F}\\), it’s easy to see that that the only column that implies all the others is ssn. Therefore, {ssn} is the only candidate key in this table.\n  Exercise\nExercise 11 Specify the normal form of the table Patient. Justify your answer.    Solution\n It is immediate to verify that the table is 1NF.\n The table is 2NF because there is only one candidate key, which is composed of only one column. Therefore, there cannot be any partial dependency.\n The table is not in 3NF. Indeed, there is a functional dependency between two non-prime columns:\n  \\[insurance\\_number \\rightarrow insurance\\_expiration\\_date\\]\n  Exercise\nExercise 12 How would you normalize table Patient to BCNF? Justify your answer.    Solution\nThe offending functional dependency is:\n\\[insurance\\_number \\rightarrow insurance\\_expiration\\_date\\]\nWe need to create another table (let’s call it Insurance) that contains the determinant of the offending functional dependency (insurance_number) as its primary key. We need to move the colum (insurance_expiration_date) that depends on insurance_number from table Patient to table Insurance.\nIn summary:\n Patient (ssn, first_name, last_name, phone_number, insurance_number) Insurance (insurance_number, insurance_expiration_date)  Note that the column insurance_number in table Patient is foreign key to the column insurance_number in table Insurance.\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"35fe9e284966e1fb96db406a664544bb","permalink":"/courses/gadexed/tutorials/normalization/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/gadexed/tutorials/normalization/","section":"courses","summary":"Normalization theory exercises","tags":null,"title":"Normalization theory","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial you’ll learn:\n How to create a conceptual schema of a database. How to draw an entity-relationship (ER) diagram. How to translate a conceptual model into a logical model.  1 Database of a social network platform A social network platform wants to design a relational database to store information on its users. For each user, the platform keeps its nickname, that uniquely identifies the user in the platform, first and family name, geographic location (city and country) and email address; the user can register as many email addresses as s/he wishes. Any user can share content on the platform; each post is characterized by its content, date, time and, when available, the geolocation (latitude, longitude). Optionally, users can tag one or more friends in their posts.\nTwo users are linked by a friendship relationship if both agree on befriending each other; a user can also follow another user without necessarily befriending her. For any type of relationship (friendship or follower), the platform registers the date when the relationship is established.\n1.1 Exercises Exercise\nExercise 1.1  Give the conceptual schema of the database with an ER diagram.\n   Solution\n  Exercise\nExercise 1.2  Translate the conceptual schema into a logical schema. For each table, underline the primary key and specify the foreign keys.\n   Solution\nThe collection of tables is the following:\n UserAccount (nickname, first_name, last_name, city, country) Post (post_id, content, date, time, lat, long, nickname) EmailAddress (email_address, nickname) Relationship (nickname_src, nickname_dst, type, date) Tag (post_id, nickname)  The foreign keys are the following:\nPost(nickname) → UserAccount(nickname).\nEmailAddress(nickname) → EmailAddress(nickname).\nRelationship(nickname_src) → UserAccount(nickname).\nRelationship(nickname_dst) → UserAccount(nickname).\nTag(post_id) → Post(post_id).\nTag(nickname) → UserAccount(nickname).\n    2 Database of a banking system The following figure shows the ER diagram with the conceptual schema of a banking system database.\n Figure 2.1: The conceptual schema of the bank database  Each bank is identified by a unique code and name, and has one or several branches. A branch is responsible for opening accounts and granting loans to customers. Each account is identified by a number (acct_nbr) and is either a checking or savings account (property acct_type). Each customer is identified by its social security number (ssn); a customer can be granted several loans and open as many accounts as s/he wishes.\n2.1 Exercises Exercise\nExercise 2.1 Which primary key would you choose for the entity Bank? Justify your answer.    Solution\nSince no two banks have the same code_bank or name, either property can be chosen as the primary key of the entity Bank. Both can be considered as valid candidate keys.\n  Exercise\nExercise 2.2 Would you consider {code_bank, name} as a valid candidate key for the entity Bank? Justify your answer.    Solution\nThe answer is no. While there aren’t any banks that have the same value for {code_bank, name}, two subsets ({code_bank} and {name}) are candidate keys.\n  Exercise\nExercise 2.3 Complete the diagram in the figure by adding the cardinalities to the relations. Justify your choices when any ambiguity arises.    Solution\n  Exercise\nExercise 2.4 Translate the conceptual schema into a logical schema. For each table, underline the primary keys and specify the foreign keys.    Solution\nThe collection of tables is the following:\n Bank (code_bank, name, address) Branch (branch_id, address, code_bank) Account (acct_nbr, acct_type, balance, branch_id, ssn) Loan (loan_nbr, loan_type, amount, branch_id, ssn) Customer (ssn, first_name, last_name, telephone, address)  The foreign keys are the following:\nBranch(code_bank) → Bank(code_bank).\nAccount(branch_id) → Branch(branch_id).\nAccount(ssn) → Customer(ssn).\nLoan(branch_id) → Branch(branch_id).\nLoan(ssn) → Customer(ssn).\n    3 Car dealership database We want to design the database of a car dealership. The dealership sells both new and used cars, and it operates a service facility. The database should keep data about the cars (serial number, make, model, color, whether it is new or used), the salespeople (first and family name) and the customers (first and family name, phone number, address). Also, the following business rules hold:\n A salesperson may sell many cars, but each car is sold by only one salesperson. A customer may buy many cars, but each car is bought by only one customer. A salesperson writes a single invoice for each car s/he sells. The invoice is identified by a number and indicates the sale date and the price. A customer gets an invoice for each car s/he buys.  When a customer takes one or more cars in for repair, one service ticket is written for each car. The ticket is identified by a number and indicates the date on which the car is received from the customer, as well as the date on which the car should be returned to the customer. A car brought in for service can be worked on by many mechanics, and each mechanic may work on many cars.\n3.1 Exercises Exercise\nExercise 3.1 Give the conceptual schema of the database with an ER diagram.    Solution\n  Exercise\nExercise 3.2 Translate the conceptual schema into a logical schema. For each table, underline the primary keys and specify the foreign keys.     Solution\nThe collection of tables is the following:\n Car (serial_number, make, model, color, is_new) Customer (cust_id, cust_first_name, cust_last_name, cust_phone) Invoice (invoice_number, date, price, car_serial_number, sp_id, cust_id) Salesperson (sp_id, sp_first_name, sp_last_name) Mechanic (mec_id, mec_first_name, mec_last_name) Ticket (ticket_number, date_open, date_return, car_serial_number) Repair (ticket_number, mec_id)  The foreign keys are the following:\nInvoice(cust_id) → Customer(cust_id).\nInvoice(car_serial_number) → Car(serial_number).\nInvoice(sp_id) → Salesperson(sp_id).\nTicket(car_serial_number) → Car(serial_number).\nRepair(ticket_number) → Ticket(ticket_number).\nRepair(mec_id) → Mechanic(mec_id).\n    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7b0aae78fcc25e4bcc51ddd1e6472217","permalink":"/courses/gadexed/tutorials/rel-data-modeling/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/gadexed/tutorials/rel-data-modeling/","section":"courses","summary":"Relational data modeling exercises","tags":null,"title":"Relational data modeling","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial you’ll learn:\n The key integrity constraints in a relational database. Basic SQL queries. Advanced SQL queries.  Installing PostgreSQL In this tutorial you’ll be using PostgreSQL as a relational database management system (RDBMS).\n Instructions for Windows users\nYou can download the latest version of PostgreSQL (14.3) from this page.\nThe installer contains:\n The PostgreSQL server. pgAdmin, a graphical administration tool.  You’ll find detailed installation instructions on this page.\n  Instructions for macOS users\nThe best way to get PostgreSQL is to download and install Postgres.app. You’ll find more details on this page.\nIn addition, you need to install pgAdmin, ad administration tool that lets you interact with your database through a graphical interface.\n  Starting PostgreSQL and pgAdmin  Instructions for Windows users\nOnce the installation is completed, a PostgreSQL server should be automatically started.\nYou’ll open a connection to the server through the following steps:\n Execute pgAdmin.\n On the left-side menu, right-click on Servers and select Create server.\n In the General tab, give the server a name of your choice.\n In the Connection tab, write localhost as host. Don’t change the values of the other options.\n   What if I get the Unable to connect to server error?\nYou might want to have a look at the list of the services running on your computer to verify whether the PostgreSQL server is actually running.\nThis page explains you how to open the panel with the list of services. You should locate PostgreSQL in this panel. If the service is not running, you’ll need to manually start it.\n   Instructions for MacOS users\nYou’ll open a connection to the server through the following steps:\n Execute pgAdmin.\n On the left-side menu, right-click on Servers and select Create server.\n In the General tab, give the server a name of your choice.\n In the Connection tab, write localhost as host. Don’t change the values of the other options.\n    Obtain the data We consider the database of a DVD rental store chain containing data on films, actors, customers and the transactions of the store.\nThis database goes by the name Sakila\nand was developed by Mike Hillyer, a former member of the MySQL team.\n Figure 1: The conceptual schema of the Sakila database  The tables of the database are documented on this page\nSakila has been ported from MySQL to PostgreSQL under the name pagila.\nIn order to import the data into PostgreSQL, follow the steps below:\n From the pgAdmin interface, create a new database (right-click on Databases, select Create database). You can call the new database pagila (or any name you want).\n Download the dump file pagila-insert-data.sql This file contains all the SQL statements necessary to create the tables of the database and populate them with some data.\n Right-click on the new database, select Query tool.\n Click on the second (from the left) small icon on the top menu of the query tool to open a new file.\n Through the interface, locate pagila-schema.sql and open it.\n Hit on the F5 button or click on the play icon on the top menu of the query tool to execute the script.\n  The previous steps should have created the schema of the database\nand inserted the data.\nYou can see the list of tables by selecting (on the left menu) Schemas, public, Tables (15 tables should appear).\nOpen a new query tool to do the exercises.\n Integrity constraints Exercise\nExercise 1  Execute the following statement:\n insert into film_actor values(1, 25)  What is this statement supposed to do? What is the reaction of the DBMS?\n   Solution\nThis statement should insert a new row in table film_actor, where the value of actor_id is 1 and the value of film_id is 25.\nThe DBMS returns an error because there is already a row with these values and the two columns film_actor, film_id form the primary key.\n  Exercise\nExercise 2  Write the statement to delete the film with film_id=1 from the table Film.\nExecute the command. What happens?\n   Solution\n delete from film where film_id=1  The statement is rejected because there are rows in other tables that reference the row that we intend to delete. This is the effect of the foreign key constraint.\n  Exercise\nExercise 3  Look at the definition of the foreign key constraints in table film_actor (right-click on the table, select Constraints, foreign key).\nIs the definition of the foreign key constraint to table film coherent with the behavior observed in the previous exercise?\nNB In order to see the options of a foreign key, click on the edit button on the left of the constraint. Then look at the tab Action.\n   Solution\nThe foreign key linking table film_actor to table film is defined with the option RESTRICT on delete. This is coherent with the behavior that we observed in the previous exercise. Referenced rows cannot be deleted if there are still referencing rows.\n  Exercise\nExercise 4  Execute the following query:\n SELECT f.film_id as film_id_in_table_film, fa.film_id AS film_id_in_table_film_actor, fa.actor_id as actor_id, f.title as title FROM film f JOIN film_actor fa ON f.film_id = fa.film_id WHERE f.title='ACE GOLDFINGER'  What does the query? Note down the identifier of the film in both tables film and film_actor. (columns film_id_in_table_film and film_id_in_table_film_actor).\n   Solution\nThe query returns the list of all actors in the film titled Ace Goldfinger. We note that the identifier of the film in both tables is identical (2), as it should because the query joins the two tables on the equality of these two values.\n  Exercise\nExercise 5  Write and execute a statement to set the value 10000 to the identifier of the film ACE GOLDFINGER in table Film.\nAfter the modification, execute the query of the previous exercise. What changed? Explain in details what happened.\n   Solution\nThe statement to modify the film_id of the given film is as follows:\n UPDATE film SET film_id=10000 WHERE title=‘ACE GOLDFINGER’ \nAfter executing the same query as the previous exercise, we see that the identifier of the film has changed in the table film_actor too. This is expected, because the foreign key constraint between the colum film_id in table film_actor and the column film_id in table film has the option ON UPDATE CASCADE. This means that if we modify the identifier of the film in table film, the modification is propagated to all the referencing columns.\n  Exercise\nExercise 6  Execute the following statement:\n UPDATE film_actor SET film_id=2 WHERE film_id=10000  What does? What happens? Explain.\n   Solution\nThe statement intends to set the identifier of the film titled Ace Goldfinger (in the previous exercise we gave it the identifier 10000) back to its original value. However, we execute the statement on the table film_actor. The action is not allowed, as the identifier 2 does not correspond to any film in table film.\nThe foreign key enforces the referential integrity constraint. A row cannot refer to a non-existing entity in the referenced table.\n   Basic queries Exercise\nExercise 7  Write the following SQL queries:\nReturn all the information on all customers.\n Return the first and last name of all customers.\n Return the first and last name of all customers of the store with identifier 1.     Solution\n select * from customer   select first_name, last_name from customer   select first_name, last_name from customer where store_id=1      Sorting and paginating Exercise\nExercise 8  Write the following SQL queries:\nReturn the last and first name of all customers. Sort by last name in ascending order.\n Same as in 1., but only return the first 100 customers.\n Return the last and first name of all customers of the store with identifier 1. Sort by last name in ascending order and by first name in descending order.     Solution\n select last_name, first_name from customer order by last_name asc   select last_name, first_name from customer order by last_name asc limit 100   select first_name, last_name from customer where store_id=1      Aggregating queries Exercise\nExercise 9  Write the following SQL queries:\nCount the number of films in the database (expected result: 1000).\n How many distinct actor last names are there?\n Compute the total amount of payments across all rentals (expected result: 67416.51).\n Compute the average, minimum and maximum duration of rental across all films (expected result: 4.9850000000000000, 3, 7).\n Return the number of actors for each film.\n Return the number of copies of each film in each store (table inventory).\n Same as 6., but only returns the pairs (film, store) if the number of copies is greater than or equal to 3.\n     Solution\n select count(*) from film   select count (distinct last_name) from actor   select sum(amount) from payment   select avg(rental_duration), min(rental_duration), max(rental_duration) from film   select film_id, count(*) as nb_actors from film_actor group by film_id   select film_id, store_id, count(*) as nb_films from inventory group by film_id, store_id   select film_id, store_id, count(*) as nb_films from inventory group by film_id, store_id having count(*) =3      Join queries Exercise\nExercise 10  Write the following SQL queries:\nReturn the first and last name of the manager of the store with identifier 1 (expected result: Mike Hillyer).\n Return the first and last name of the actors in the film ACE GOLDFINGER.\n Return first and last name of each actor and the number of films in which they played a role.\n Same as in 3., but order by number of films in descending order.\n Same as in 4., but only return actors who played a role in at least 10 films.\n Return the identifier, the first and family name of the customers who have rented between 10 and 20 movies in the category Family.     Solution\n select first_name, last_name from staff join store using(store_id) where store_id=1   select first_name, last_name from film join film_actor using(film_id) join actor using(actor_id) where title='ACE GOLDFINGER'   select first_name, last_name, count(*) as nb_films from actor join film_actor using(actor_id) group by actor_id   select first_name, last_name, count(*) as nb_films from actor join film_actor using(actor_id) group by actor_id order by nb_films desc   select first_name, last_name, count(*) as nb_films from actor join film_actor using(actor_id) group by actor_id having count(*) = 10 order by nb_films desc   select cust.customer_id, first_name, last_name, count(*) as nb_films from customer cust join rental using(customer_id) join inventory using(inventory_id) join film_category using(film_id) join category cat using(category_id) where cat.name='Family' group by customer_id having count(*) between 5 and 10      Miscellaneous queries Exercise\nExercise 11  Write the following SQL queries:\nWhich last names are not repeated in table actor?\n Is a copy of the movie ACADEMY DINOSAUR available for rent from store 1?\n Return the title and the release year of all films in one of the following categories: Family, Animation, Documentary.\n   Tip You can use the operator IN  Find all customers (id, last name, first name) whose last name starts with the letter L.  Tip You can use the operator LIKE  Return the total paid by each customer. For each customer, display a single column containing first and last name and another column with the total amount paid. Order the result alphabetically by last name   Tip You can use the operator CONCAT  Return the total revenue from the rentals across the stores in each country. Order by descending revenue.\n The first and last name of the actor that played in the most films. If two or more actors are tied, the query must return the names of all of them.     Solution\n select last_name from actor group by last_name having count(*) = 1   select distinct i.inventory_id from film f join inventory i using(film_id) join rental r using(inventory_id) where f.title='ACADEMY DINOSAUR' and i.store_id=1 and r.return_date is not null   select distinct f.title, f.release_year from film f join film_category using(film_id) join category cat using(category_id) where cat.name in ('Family', 'Animation', 'Documentary')   select customer_id, first_name, last_name from customer where last_name LIKE 'L%'   select concat(first_name, ' ', last_name), sum(amount) from customer join payment using (customer_id) group by customer_id order by last_name asc   select country, sum(amount) as revenue from payment join rental using (rental_id) join inventory using (inventory_id) join store using (store_id) join address using (address_id) join city using (city_id) join country using (country_id) group by country_id order by revenue desc  select actor_id, first_name, last_name, count() from film_actor join actor using(actor_id) group by actor_id having count() = (select max(nb_films) from (select count(*) as nb_films from film_actor group by actor_id) t)     ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e2ac3e94b52829fb2d2a46f7dd64ebb8","permalink":"/courses/gadexed/tutorials/sql/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/gadexed/tutorials/sql/","section":"courses","summary":"Exercises on SQL","tags":null,"title":"SQL","type":"docs"},{"authors":null,"categories":null,"content":"  1 Instructions for MacOS users 1.1 Prerequisites 1.2 Installation 1.3 Launch the MongoDB server 1.4 Launch MongoDB compass 1.5 Stop the MongoDB server  2 Instructions for Windows users   In this page you’ll find instructions to install MongoDB on your computer.\n1 Instructions for MacOS users You’ll need to use commands in the Terminal to install MongoDB.\n1.1 Prerequisites  Install XCode. You’ll find it for free in the Mac App Store.\n Install Homebrew, a command-line utility that let’s you install several software applications. Type the following command in the Terminal:\n  /bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\u0026quot;  Install MongoDB Compass, a MongoDB client that communicates with a MongoDB server and lets you manipulate your MongoDB databases through a graphical interface. You’ll find the installer package at this page.   1.2 Installation You can watch the following video that details how to install MongoDB, start the server and connect to the server through MongoDB Compass.\nThe commands used in the video are detailed below.\n  Tap the official MongoDB Homebrew tap with the following command:  brew tap mongodb/brew  Type the following command to install MongoDB:  brew install mongodb-community@4.4  1.3 Launch the MongoDB server Type the following command:\nbrew services start mongodb-community@4.4  1.4 Launch MongoDB compass  Open MongoDB Compass.\n After few clicks you should land on the “New Connection” page.\n In the textfield under the message “Paste your connection string (SRV or Standard)”, paste the following URI and click on “Connect”.\n  mongodb://localhost:27017  If everything goes well, you should see a list of databases.   1.5 Stop the MongoDB server If, for any reason, you want to stop the MongoDB server, type the following command in the Terminal:\nbrew services stop mongodb-community@4.4 NOTICE\nRemember to start the MongoDB server when you need to access your databases using MongoDB Compass.\n   2 Instructions for Windows users You can follow the procedure in the following video. You can read a detailed description of the installation steps below.\n  Go to the MongoDB download page and download the installer (.msi file).\n Double-click the downloaded .msi file and follow the instructions. The procedure will also install MongoDB Compass, a MongoDB client that lets you manage your database through a graphical interface.\n Once the installation procedure is over, the MongoDB server is automatically started.\n MongoDB Compass should execute automatically too. After few clicks you should land on the “New Connection” page.\n In the textfield under the message “Paste your connection string (SRV or Standard)”, paste the following URI and click on “Connect”.\n  mongodb://localhost:27017  If everything goes well, you should see a list of databases.  If, for any reason, you wish to stop the MongoDB server, you can use the Services console and stop the corresponding service, as shown in the video.\nNOTICE\nRemember to start the MongoDB server when you need to access your databases using MongoDB Compass.\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"347e0dc2ec6bf3782e8274155e40e8d0","permalink":"/courses/bdia_old/overview/installation-mongodb/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia_old/overview/installation-mongodb/","section":"courses","summary":"How to install MongoDB","tags":null,"title":"How to install MongoDB","type":"docs"},{"authors":null,"categories":null,"content":"  1 Instructions for MacOS users 1.1 Prerequisites 1.2 Installation 1.3 Launch the MongoDB server 1.4 Launch MongoDB compass 1.5 Stop the MongoDB server  2 Instructions for Windows users   In this page you’ll find instructions to install MongoDB on your computer.\n1 Instructions for MacOS users You’ll need to use commands in the Terminal to install MongoDB.\n1.1 Prerequisites  Install XCode. You’ll find it for free in the Mac App Store.\n Install Homebrew, a command-line utility that let’s you install several software applications. Type the following command in the Terminal:\n  /bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\u0026quot;  Install MongoDB Compass, a MongoDB client that communicates with a MongoDB server and lets you manipulate your MongoDB databases through a graphical interface. You’ll find the installer package at this page.   1.2 Installation You can watch the following video that details how to install MongoDB, start the server and connect to the server through MongoDB Compass.\nThe commands used in the video are detailed below.\n  Tap the official MongoDB Homebrew tap with the following command:  brew tap mongodb/brew  Type the following command to install MongoDB:  brew install mongodb-community@4.4  1.3 Launch the MongoDB server Type the following command:\nbrew services start mongodb-community@4.4  1.4 Launch MongoDB compass  Open MongoDB Compass.\n After few clicks you should land on the “New Connection” page.\n In the textfield under the message “Paste your connection string (SRV or Standard)”, paste the following URI and click on “Connect”.\n  mongodb://localhost:27017  If everything goes well, you should see a list of databases.   1.5 Stop the MongoDB server If, for any reason, you want to stop the MongoDB server, type the following command in the Terminal:\nbrew services stop mongodb-community@4.4 NOTICE\nRemember to start the MongoDB server when you need to access your databases using MongoDB Compass.\n   2 Instructions for Windows users You can follow the procedure in the following video. You can read a detailed description of the installation steps below.\n  Go to the MongoDB download page and download the installer (.msi file).\n Double-click the downloaded .msi file and follow the instructions. The procedure will also install MongoDB Compass, a MongoDB client that lets you manage your database through a graphical interface.\n Once the installation procedure is over, the MongoDB server is automatically started.\n MongoDB Compass should execute automatically too. After few clicks you should land on the “New Connection” page.\n In the textfield under the message “Paste your connection string (SRV or Standard)”, paste the following URI and click on “Connect”.\n  mongodb://localhost:27017  If everything goes well, you should see a list of databases.  If, for any reason, you wish to stop the MongoDB server, you can use the Services console and stop the corresponding service, as shown in the video.\nNOTICE\nRemember to start the MongoDB server when you need to access your databases using MongoDB Compass.\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"ffc657bc33e600d8a2856451c403fd03","permalink":"/courses/big-data-marseille/overview/installation-mongodb/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/big-data-marseille/overview/installation-mongodb/","section":"courses","summary":"How to install MongoDB","tags":null,"title":"How to install MongoDB","type":"docs"},{"authors":null,"categories":null,"content":" (\\#exr:unnamed-chunk-1)  By using the MongoDB shell, execute the following queries. Q1. The release year of the movie \"Le parrain III\". Q2. The title of the movies released between 1980 and 1990. Q3. Same query as b. with the titles must be sorted by alphabetical order. Q4. The titles of the french movies. Q5. The title of the \"crime\" or \"drama\" movies. Q6. The names and birth dates of the directors of french movies. Q7. The title of the movies in which Sofia Coppola played. Q8. The title and the genre of the movies of which Hitchcock is director. \\EndKnitrBlock{exercise} ::: # Querying the data with the aggregation framework ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-2)  By using the MongoDB shell, execute the following queries by using **aggregation pipelines**. Q1. The number of movies by country. Show by decresing number. Q2. The name of the actor in the role \"Mary Corleone\" in the movie \"Le parrain III\". Q3. The number of actors by movie. Sort by decreasing number. Q4. The average number of actors in a film. \\EndKnitrBlock{exercise} ::: # Join in MongoDB In the database *cinema*, create a new collection called *movies_boffice*. Import the documents in file *moviesBoxOffice.json* into this collection. ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-3)  By using the operator *$lookup* on the collections *movies* and *movies_boffice*, find the box office of the movie \"Le parrain III\". \\EndKnitrBlock{exercise} ::: -- ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e70f3cf26c86687ee06a7652bddb6a36","permalink":"/courses/bdia_old/tutorials/mongodb-tutorial/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia_old/tutorials/mongodb-tutorial/","section":"courses","summary":"Description of the MongoDB tutorial.","tags":null,"title":"MongoDB","type":"docs"},{"authors":null,"categories":null,"content":" Lecture 1 Title: Introduction and MapReduce programming.\nDate and time: Monday 3 May 2021, 1:45 PAM - 5 PM.\nSlides: Available here\n Lecture 2 Title: Hadoop and its ecosystem: HDFS.\nDate and time: Wednesday 5 May 2021, 8:30 AM - 10 AM.\nSlides: Available here\n Lecture 3 Title: Introduction to Apache Spark.\nDate and time: Wednesday 5 May 2021, 10 AM - 11:30 AM.\nSlides: Available here\nSpark RDD programming demo: Available here\n Lecture 4 Title: Apache Spark’s Structured APIs and Structured Streaming.\nDate and time: Monday 10 May 2021, 8:30 AM - 11:30 AM.\nSlides: Available here\nDataFrames: Notebook available here\nSpark SQL: Notebook available here\n Lecture 5 Title: Distributed and NoSQL databases\nDate and time: Monday 17 May 2021, 10:30 AM - 11:30 AM / 14 PM - 16 PM\nSlides: Available here\n Lecture 6 Title: Document-oriented database systems: MongoDB.\nDate and time: Monday 17 May 2021, 16 PM - 17PM\nNotebook: Available here\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c2392a0bcf324168321fd0099e6a6b96","permalink":"/courses/big-data-marseille/lectures/lectures/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/big-data-marseille/lectures/lectures/","section":"courses","summary":"Presenting the lectures.","tags":null,"title":"Lectures","type":"docs"},{"authors":null,"categories":null,"content":"  Singh, Chanchal, and Manish Kumar. Mastering Hadoop 3: Big data processing at scale to unlock unique business insights. Packt Publishing Ltd, 2019.\n Mehrotra, Shrey, and Akash Grade. Apache Spark Quick Start Guide: Quickly learn the art of writing efficient big data applications with Apache Spark. Packt Publishing Ltd, 2019.\n Karau, Holden, et al. Learning spark: lightning-fast big data analysis. O’Reilly Media, Inc., 2015\n Giamas, Alex. Mastering MongoDB 4.x: Expert techniques to run high-volume and fault-tolerant database solutions using MongoDB 4.x. Packt Publishing Ltd, 2019.\n Bradshaw, Shannon, Eoin Brazil, and Kristina Chodorow. MongoDB: The Definitive Guide: Powerful and Scalable Data Storage. O’Reilly Media, 2019.\n Scifo, Estelle, Hands-on Graph Analytics with Neo4j. Packt Publishing Ltd, 2020\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e64f1a69e66e30cbd6db3cab82bc1556","permalink":"/courses/bdia_old/references/cc-references/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia_old/references/cc-references/","section":"courses","summary":"Bibliographic references for the course","tags":null,"title":"References","type":"docs"},{"authors":null,"categories":null,"content":"  Singh, Chanchal, and Manish Kumar. Mastering Hadoop 3: Big data processing at scale to unlock unique business insights. Packt Publishing Ltd, 2019.\n Mehrotra, Shrey, and Akash Grade. Apache Spark Quick Start Guide: Quickly learn the art of writing efficient big data applications with Apache Spark. Packt Publishing Ltd, 2019.\n Karau, Holden, et al. Learning spark: lightning-fast big data analysis. O’Reilly Media, Inc., 2015\n Giamas, Alex. Mastering MongoDB 4.x: Expert techniques to run high-volume and fault-tolerant database solutions using MongoDB 4.x. Packt Publishing Ltd, 2019.\n Bradshaw, Shannon, Eoin Brazil, and Kristina Chodorow. MongoDB: The Definitive Guide: Powerful and Scalable Data Storage. O’Reilly Media, 2019.\n Scifo, Estelle, Hands-on Graph Analytics with Neo4j. Packt Publishing Ltd, 2020\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"63bc28b1c571ba26f8b80edb6882bae4","permalink":"/courses/big-data-marseille/references/cc-references/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/big-data-marseille/references/cc-references/","section":"courses","summary":"Bibliographic references for the course","tags":null,"title":"References","type":"docs"},{"authors":null,"categories":null,"content":" (\\#exr:unnamed-chunk-1)  Write an implementation in Spark. **Test your implementation on file ``sn_tiny.csv``.** \\EndKnitrBlock{exercise} ::: ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-2)  Run your implementation on the other files and write down the execution times. Comment on the execution times considering the file sizes, the number of nodes and links and the number of pairs $((A, B), X)$ generated by the algorithm. \\EndKnitrBlock{exercise} ::: ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-3)  Execute your implementation on the file ``sn_1m_1m.csv`` by varying the number of cores used by the Spark executors. You can specify the total number of cores with the option ``--total-executor-cores`` of the command ``spark-submit`` (you can also refer [to the Spark documentation](https://spark.apache.org/docs/latest/submitting-applications.html){target=\"_blank\"}). * What is the impact of the number of cores on the execution time? Make a graph and comment. \\EndKnitrBlock{exercise} ::: ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-4)  1. By using a MapReduce-style algorithm, write a Spark program to compute the minimum, maximum and average degree of a node in a given graph. 2. Compute the minimum, maximum and average degree on all the given input files. 3. Do these values confirm or invalidate the considerations that you made on the execution times of the algorithm in the first exercise? Justify your answer. \\EndKnitrBlock{exercise} ::: # Creating an inverted index In folder ``hdfs://sar01:9000/data/bbc/`` you'll find a collection of 50 articles obtained from the BBC website (2004-2005) organized into five subfolders: *business*, *entertainment*, *politics*, *sport* and *technology*. We want to create an **inverted index**, which associates each word with the list of the files in which the word occurs. More specifically, for each word, the inverted index will have a list of the names of the files (path relative to the folder ``/data/bbc``) that contain the word. The inverted index: * must not contain the same word twice; * must not contain any stopwords (the list of stopwords is provided in the ``hdfs://sar01:9000/data/stopwords.txt`` file); Moreover: * Words in the inverted index must only contain letters. * Words in the inverted index must be lowercase. ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-5)  Write a Spark program to create an inverted index and execute it on the input folder. You can use the template available at ``~vialle/DCE-Spark/template_inverted_index.py``. \\EndKnitrBlock{exercise} ::: -- ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c802d274954d1b3f3a03319fd538f7ed","permalink":"/courses/bdia_old/tutorials/spark-lab-assignment/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia_old/tutorials/spark-lab-assignment/","section":"courses","summary":"Description of the lab advanced Spark programming.","tags":null,"title":"Advanced Spark programming","type":"docs"},{"authors":null,"categories":null,"content":" (\\#exr:unnamed-chunk-1)  1. Where does this program get its input from? 2. What object type does the variable ``lines`` contain? 3. Where does this program write its output? 4. What is the output of this program? 5. What is the option ``checkpointLocation`` intended for? 6. What does the instruction ``streamingQuery.awaitTermination()``? \\EndKnitrBlock{exercise} ::: You can now verify your answers to the previous questions by **executing the program**. ::: {.infobox .activitybox data-latex=\"{exercisebox}\"} **Activity** 1. Connect to the cluster, if you haven't done so yet. [Refer to this documentation](/courses/plp/overview/cluster-connection){target=\"_blank\"}. 2. After running the command ``srun ...``, you should be connected to a machine on the cluster Kyle. Note the name of this machine (you should see it at the terminal prompt). 3. Create a checkpoint directory for the first exercise (e.g., ``checkpoint_exo1``) under your home directory ``hdfs://sar01:9000/cpuasi1/cpuasi1_X`` **in HDFS**. 4. Copy and paste the code into a Python file (e.g., ``exo1.py``) that you'll save into your home directory **in the local filesystem** of the cluster machine. * Change the value of the variable ``checkpoint_location`` so that it points to the directory that you created at point 3. * Change the value of the variable ``port_number`` to any value in the range [49152, 65535]. 5. Open a new terminal window, connect to ``phome.metz.supelec.fr`` and then to the same machine that you noted at point 2. 6. In the new terminal, start a **netcat server** listening on the port number that you selected at point 4. Use the following command: `` nc -lk port_number `` 7. Run the Python code with the command ``spark-submit``. Wait until Spark does not display any more messages on screen. * In case the program stops for an error, read the box \"What to do in case of errors\" below. 8. In the netcat terminal, write few lines of text. Look at the terminal where the Spark program is running and observe the output. ::: ::: {.infobox .warning data-latex=\"{warning}\"} **What to do in case of errors** If any error arises, **before** running the ``spark-submit`` again it would be better to remove all files from the checkpoint directory. ::: ::: {.infobox .warning data-latex=\"{warning}\"} **Stop the program** * When you're done with your experiments, you can stop the Spark program by simply typing CTRL-C in the terminal where Spark is running. * Don't stop the netcat server, you'll need it in the next exercise. ::: # Triggering policy In a Structured Streaming program we can choose a **triggering policy**. ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-2)  1. What is a triggering policy? 2. What is the triggering policy in the previous program? 3. Modify the code of the previous program in order to set the ``Fixed interval micro-batch`` triggering policy. 4. Run the program. How is the behaviour of this program different from before? \\EndKnitrBlock{exercise} ::: # Checkpoint location and output mode We're now going to see the impact of the checkpoint location and the output modes on a streaming query. ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-3)  1. What is an output mode and what are the available options? 2. What is the output mode of the previous program? \\EndKnitrBlock{exercise} ::: We're now going to write a new streaming query. ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-4)  1. Create a new checkpoint location in HDFS. You may also keep the same directory as before; in this case, make sure you **remove all files** from that directory. 2. Write a new program that reads a streaming text from a TCP socket and counts the number of occurrences of each word. 3. Which output mode are you going to choose and why? 4. Run the program. Write few lines on the netcat server and observe the output. 5. Stop the program and run it again with no modifications. Write few lines in the netcat terminal and observe the output. What can you say about the word counts? 6. Stop the program and remove the files in the checkpoint location. Run the program again and write few lines on the netcat terminal. What can you say about the word counts? 7. Play with the different output modes and observe how the output changes. \\EndKnitrBlock{exercise} ::: # Window operations on event time ::: {.infobox .warning data-latex=\"{warning}\"} **Netcat and checkpoint** 1. You can stop the netcat server now. 2. Remember to create a new checkpoint location for this exercise. Alternatively, you can also use the same directory as in the previous exercises, but you should remove all its files. ::: We're now going to find out how to perform aggregations over a sliding event-time window. A given data source generates some words for a certain time interval. Each word is accompanied with a timestamp that indicates the exact moment when the word is generated. This timestamp is the **event time**. After generating a word, the data source saves the word and its timestamp into a CSV file in a directory on HDFS. For convenience, we'll refer to this directory as the **source directory**. At any given moment, the source will contain zero to many CSV files, where each file only contains exactly one line in the format ``word,timestamp`` (no whitespace before nor after the comma). ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-5)  Write a Spark program that: 1. Reads the stream of data from the source directory. 2. Counts the number of occurrences of each word within 10 minute windows that slide every 5 minutes. 3. Print the output counts to the console. Use triggers of 5 seconds. \\EndKnitrBlock{exercise} ::: We now test the new Spark program. ::: {.infobox .warning data-latex=\"{warning}\"} **Data source and timeline visualization** We provide two Python programs for this exercise: a data generator and a tool for visualizing words in a timeline. Instructions to get and run these two programs are given in the activity below. The **data generator** is our data source. It generates two words every second for a certain amount of time. Each word is saved in a separate CSV file in source directory. It also saves the list of all generated words to a summary CSV file. The **visualization tool** takes as its input the summary CSV file written by the data generator and visualizes the words on a timeline. ::: ::: {.infobox .activitybox data-latex=\"{exercisebox}\"} **Activity** 1. Create the source directory under your home directory ``hdfs://sar01:9000/cpuasi1/cpuasi1_X`` **in HDFS**. 2. Copy to your home directory in the local filesystem the data generator that you find at the following path ``/usr/users/cpu-prof/cpu_quercini/structured-streaming/tempws_gen.py``. 3. Start your Spark program. When running the first time, you might get some errors. Correct your code accordingly. 4. In another terminal, run the Python script ``tempws_gen.py``. Use the following command to learn how to run this program: ``python3 tempws_gen.py --help`` For this exercise, do not introduce any delay (keep the default values of the parameters ``--delay``, ``--mindelay``, ``--maxdelay``). 5. After launching the data generator, you should see some output in the terminal where you launched the Spark program. **Wait for the script ``tempws_gen.py`` to terminate the data generation**. The output might be a bit overwhelming. Scroll up to identify the results on each micro-batch. 6. If you need to rerun the Spark program and the data generator, make sure you delete all the files in the checkpoint location and the source directory. ::: We now want to analyze the output of the program. * The script ``tempws_gen.py`` has generated a file ``gen_words.csv`` in your home directory. This file contains the list of all words generated with the relative timestamps. **Download the file to your computer**. * Download the visualization tool ``/usr/users/cpu-prof/cpu_quercini/structured-streaming/timeline_visualization.py`` to your computer. ::: {.infobox .warning data-latex=\"{warning}\"} **Visualization tool** Use the following command to learn how to run the visualization tool: `` python timeline_visualization.py --help `` The visualization tool displays a vertical blue bar at each trigger. To this purpose, you'll need to pass the tool the timestamps associated to the first and last trigger and the interval (in seconds) between two consecutive triggers. You can get the timestamps associated to the first and last trigger by analyzing the output of Spark. More specifically, for each micro-batch, Spark outputs the progress details of the streaming query; you'll need to look at the timestamp associated to the first and last micro-batch. ::: ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-6)  1. Analyze the output of your Spark program and the timeline of the generated words. 2. Describe how the counts are updated by the Spark program. \\EndKnitrBlock{exercise} ::: # Late data and watermarking We're now going to learn how Structured Streaming handles late data in windowed aggregations. ::: {.infobox .warning data-latex=\"{warning}\"} **Remove generated files** Remove all the files in the directory ``tempws``. ::: The data generator ``tempws_gen.py`` can generate a stream of words, some of which might be written to the directory ``tempws`` with some amount of delay. In other words, there is a gap between the event time (when the word is generated) and the arrival time (when the word is written to the directory). Use the following command to learn how to do it: ``python3 tempws_gen.py --help`` ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-7)  1. Write a Spark program that does the same aggregation as in the previous exercise. Additionally, the program must use watermarking to handle late data. 2. Start the Spark program. 3. Generate some data with delay with the program ``tempws_gen.py``. Once the data generation stops, you can stop the Spark program. 4. Visualize the generated words with the visualization tool. Late words have the delay indicated between parentheses. 5. Observe the output of the Spark program and describe how the watermarking mechanism works on this example. \\EndKnitrBlock{exercise} ::: -- ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"137dc9cba074d30d32fe28b9317e31f8","permalink":"/courses/bdia_old/tutorials/structured-streaming-lab/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia_old/tutorials/structured-streaming-lab/","section":"courses","summary":"Description of the lab structured streaming.","tags":null,"title":"Spark structured streaming","type":"docs"},{"authors":null,"categories":null,"content":" 1 Introduction The goal of this tutorial is to learn how to analyze streams of data with the Spark Structured Streaming API.\nDocumentation\nIn order to answer the questions and do the exercises, you might want to refer to the following documentation:\n The Structured Streaming programming guide.\n The Spark SQL API reference.\n    2 Warming up  Copy the file warmup.py to your home folder by typing the following command:  cp /usr/users/cpu-prof/cpu_quercini/structured_streaming/warmup.py .  Exercise\nExercise 2.1 \nRead the code and answer the following questions.\nWhere does this program get its input from?\n What object type does the variable lines contain (instruction at Line 28)?\n Where does this program write its output?\n What is the output of this program?\n What is the option checkpointLocation intended for?\n What does the instruction streamingQuery.awaitTermination()?\n    You can now verify your answers to the previous questions by executing the program.\nActivity\nCreate a checkpoint directory for the first exercise (e.g., checkpoint_dir) under your home directory hdfs://sar17:9000/plpspark22/plpspark22_X in HDFS. The command to do so is as follows:  hdfs dfs -mkdir hdfs://sar17:9000/plpspark22_X/checkpoint_dir  Complete line 21 of file warmup.py. Choose a port number in the interval [49152, 65535].\n Complete line 25 of file warmup.py. Write the path to the checkpoint location that you created on step 1.\n Open a new terminal window and connect to the same kyle machine to which you’re connected in the first terminal window:\n  ssh kyleXX  In the new terminal window, start a netcat server. Use the following command. Replace [port_number] with the port number that you chose on step 2. The command will hang waiting for some input. This is normal.  nc -lk [port_number]  In the old terminal window, execute the Spark program with spark-submit. Wait until Spark displays the content of the first micro-batch. In case the program stops for an error, remove all files generated in the checkpoint location with the following command and restart the Spark program.  hdfs dfs -rm -r hdfs://sar17:9000/plpspark22_X/checkpoint_dir/*  In the terminal window where the netcat server is running, write few lines of text. Look at the terminal where the Spark program is running and observe the output.   Stop the program\n When you’re done with your experiments, you can stop the Spark program by simply typing CTRL-C in the terminal where Spark is running.\n Remove all files in the checkpoint directory.\n  hdfs dfs -rm -r hdfs://sar17:9000/plpspark22_X/checkpoint_dir/*   Don’t stop the netcat server, you’ll need it in the next exercise.    3 Triggers In a Structured Streaming program we can choose a trigger type. A trigger determines when the streaming source is checked for new data.\nBy looking at the Structured Streaming programming guide, answer the following questions.\nExercise\nExercise 3.1 \nWhat is the trigger type in the previous program?\n Modify the code of the previous program in order to set the Fixed interval micro-batches trigger type. Set an interval of 10 seconds.\n Run the program. Write many lines back to back on the netcat server. How is the behavior of this program different from before?\n     4 Checkpoint location and output mode We’re now going to see the impact of the checkpoint location and the output modes on a streaming query.\nExercise\nExercise 4.1 \nLook again at the Structured Streaming programming guide, and check the options for the output mode.\n What is the output mode of the previous program?    You’re now going to code a program that counts the number of occurrences of each word in a streaming data source. But first do the actions that you find in the following Activity.\nActivity\n Create a copy of the file warmup.py and rename it to wordcount.py by typing the following command:  cp warmup.py wordcount.py   Remove all files in the checkpoint location by typing the following command:  hdfs dfs -rm -r hdfs://sar17:9000/plpspark22_X/checkpoint_dir/*   Exercise\nExercise 4.2 \nBefore you code the program, you should first answer the following questions:\nObserve the output of a batch in the previous executions of the Spark programs. What is the type of the output?\n Given the type of the output, which Spark API are you going to use to code the program?\n Which operations do you need to execute to count the number of occurrences of each word across batches? For the moment, don’t worry about the specific functions you need to use, just think in abstract terms.\n Look at the Structured Streaming programming guide. Which output mode can’t you use? Why?    Exercise\nExercise 4.3 \nAdd to the file wordcount.py the instructions to count the number of occurrences of each word in the stream. Where are you going to add the new instructions?\n Based on the answer to the previous exercises, set the appropriate output mode. You have two choices. Try one of them.\n Make sure that the netcat server is still running.\n Run the program with spark-submit. In the netcat terminal, write few lines and observe the output of the Spark program.\n Stop the Spark program and run it again with no modifications. The first time you get a java.lang.IndexOutOfBoundsException. Don’t lose your hope and run it again.\n Write few lines in the netcat terminal and observe the output of the Spark program. What can you say about the word counts?\n Stop the program and remove the files in the checkpoint location. Run the program again and write few lines on the netcat terminal. What can you say about the word counts?\n Run the program again with a different output mode and observe the result.\n     5 Window operations on event time Netcat and checkpoint\nImportant actions to do!\nStop the netcat server now.\n Remove all files from the checkpoint directory.\n   We’re now going to find out how to perform aggregations over a sliding event-time window.\nA given data source generates two words every second for a certain amount of time. Each word is accompanied with a timestamp that indicates the exact moment when the word is generated. This timestamp is the event time.\nAfter generating a word, the data source saves the word and its timestamp into a CSV file in a directory on HDFS. For convenience, we’ll refer to this directory as the source directory.\nAt any given moment, the source will contain zero to many CSV files, where each file only contains exactly one line in the format word,timestamp (no whitespace before nor after the comma).\nActivity\nCreate the source directory under your home directory in HDFS, by typing the following command:  hdfs dfs -mkdir hdfs://sar17:9000/plpspark22/plpspark22_X/source_dir  Copy to your home directory the file tempws_gen.py (the data source) by typing the following command: the data generator that you find at the following path  cp /usr/users/cpu-prof/cpu_quercini/structured_streaming/tempws_gen.py .  Copy to your home directory the file win_events.py by typing the following command:  cp /usr/users/cpu-prof/cpu_quercini/structured_streaming/win_events.py .   You now need to complete the code in file win_events.py.\nExercise\nExercise 5.1 \nOpen the file win_events.py.\n Complete Line 19. Specify the path to the source directory that you created in the previous activity.\n Complete Line 31. Write the query to count the number of occurrences of each word within a 10 second window that slides every 5 seconds. Look at the documentation of the window function to learn how to do it.\n Complete Line 34. Specify the path to the checkpoint directory.\n Complete Line 40. Write the code to write the output of the streaming query to console.  Use triggers of 5 seconds. Use the output mode update. Don’t forget to specify the location of the checkpoint directory.  Execute win_events.py with spark-submit.  If you get some errors, stop the program. Correct the errors in the code and then re-execute the program again. If no error arises, the program should hang waiting for some input. Let the program wait and go on to the next exercise.     We now test the Spark program.\nActivity\nOpen a new terminal window and type the following command to connect to the same kyle machine where you’re connected in the first terminal window:  ssh kyleXX  Execute the data generator program by typing the following command (remember to replace X with your account number!):  python3 tempws_gen.py -s hdfs://sar17:9000/plpspark22/plpspark22_X/source_dir  After launching the data generator, you should see some output in the terminal window where you launched the Spark program. Wait for the script tempws_gen.py to terminate the data generation.\n If you need to rerun the Spark program and the data generator, make sure you delete all the files in the checkpoint location and the source directory.\n   We now want to analyze the output of the program.\nActivity\n Create a new folder on your own computer (not the computers in the cluster) and open it in a new Visual Studio Code window. For the sake of simplicity, let’s call this folder window_analysis.\n The script tempws_gen.py has generated a file gen_words.csv in your home directory in the cluster. This file contains the list of all words generated with the relative timestamps.\n Open gen_words.csv and copy the whole content.\n Create a new file gen_words.csv under window_analysis and paste the content that you copied on the previous step.\n Copy the file timeline_visualization.py into your home folder in the cluster by typing the following command:\n  cp /usr/users/cpu-prof/cpu_quercini/structured_streaming/timeline_visualization.py .   Open the file timeline_visualization.py and copy all its content.\n Create a new file timeline_visualization.py under window_analysis and paste the content that you copied on the previous step.\n In the Visual Studio Code window where you opened window_analysis, open a terminal and run the following command: WARNING. If you’re on macOS, you should type python3 instead of python.\n  python timeline_visualization.py -i gen_words.csv -ft [first timestamp] -lt [last timestamp] -it 5  where:\n gen_words.csv is the file that you previously created.\n Replace first timestamp with the earliest timestamp associated with the windows (look at the output of your Spark program).\n Replace last timestamp with the last timestamp associated with the windows (look at the output of your Saprk program).\n The option -i is used to specify the interval between two consecutive triggers.\n  The visualization tool displays a vertical blue bar at each trigger. This is why you need to pass the tool the timestamps associated to the first and last trigger and the interval (in seconds) between two consecutive triggers.\n Exercise\nExercise 5.2 \nAnalyze the output of your Spark program and the timeline of the generated words.\n Describe how the counts are updated by the Spark program.     6 Late data and watermarking We’re now going to learn how Structured Streaming handles late data in windowed aggregations.\nRemove generated files\n Remove all the files in the source directory.\n Remove all the files in the checkpoint directory.\n   The data generator tempws_gen.py can generate a stream of words, some of which might be written to the directory tempws with some amount of delay. In other words, there is a gap between the event time (when the word is generated) and the processing time (when the word is written to the directory).\nGood to know\nTo generate data with some delay you can use the following command (remember to replace the X with your account number!):\npython3 tempws_gen.py -s hdfs://sar17:9000/plpspark22/plpspark22_X/source_dir --delay 0.8  In the previous command, the 0.8 indicates that the probability that an event arrives with some delay is 80%. The delay is between 5 and 15 seconds. You can adjust these values by using the appropriate options. To learn more, type the following command:\npython3 tempws_gen.py --help   Spark uses a mechanism called watermarking to specify the maximum delay that an event can take to be counted. If the difference between the arrival time and the event time is higher than a certain threshold (the watermark), the delayed data will be discarded.\nExercise\nExercise 6.1 \nWrite a Spark program that does the same aggregation as in the previous exercise. Additionally, the program must use watermarking to handle late data. You can look at the programming guide to learn how to do it\n Start the Spark program.\n Generate some data with delay with the program tempws_gen.py. Once the data generation stops, you can stop the Spark program.\n Visualize the generated words with the visualization tool. Late words have the delay indicated between parentheses.\n Observe the output of the Spark program and describe how the watermarking mechanism works on this example.     ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3f1505088605c90177c426a77cc242db","permalink":"/courses/plp/tutorials/structured-streaming-lab/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/plp/tutorials/structured-streaming-lab/","section":"courses","summary":"Description of the lab structured streaming.","tags":null,"title":"Spark structured streaming","type":"docs"},{"authors":null,"categories":null,"content":" Introduction The goal of this lab assignment is to learn how to analyze streams of data with the Spark Structured Streaming API. Refer to this documentation to learn how to connect and interact with the cluster.\nDocumentation\nIn order to answer the questions and do the exercises, you might want to refer to the following documentation:\n The Structured Streaming programing guide.\n The Spark SQL API reference.\n    1 Warming up Consider the following program.\nfrom pyspark.sql import SparkSession from pyspark.sql.types import * import pyspark.sql.functions as F port_number = COMPLETE HERE checkpoint_location = COMPLETE HERE spark = (SparkSession.builder.appName(\u0026quot;Structured Streaming - exo1\u0026quot;).getOrCreate()) lines = (spark\\ .readStream.format(\u0026quot;socket\u0026quot;)\\ .option(\u0026quot;host\u0026quot;, \u0026quot;localhost\u0026quot;)\\ .option(\u0026quot;port\u0026quot;, port_number)\\ .load()) streamingQuery = lines.writeStream\\ .option(\u0026quot;checkpointLocation\u0026quot;, checkpoint_location)\\ .format(\u0026quot;console\u0026quot;).start() streamingQuery.awaitTermination() Exercise\nExercise 1.1 \nWhere does this program get its input from?\n What object type does the variable lines contain?\n Where does this program write its output?\n What is the output of this program?\n What is the option checkpointLocation intended for?\n What does the instruction streamingQuery.awaitTermination()?\n     Solution\nThe input is a socket, where a program generates some data.\n lines is a dataframe.\n To the console.\n Just copies the input to the output.\n It is where the Spark program writes the progress of the streaming query.\n The instructions means that the program will block on this instruction. The program won’t stop until there is data to process.\n    You can now verify your answers to the previous questions by executing the program.\nActivity\nConnect to the cluster, if you haven’t done so yet. Refer to this documentation.\n After running the command srun ..., you should be connected to a machine on the cluster Kyle. Note the name of this machine (you should see it at the terminal prompt).\n Create a checkpoint directory for the first exercise (e.g., checkpoint_exo1) under your home directory hdfs://sar01:9000/cpuecm1/cpuecm1_X in HDFS.\n Copy and paste the code into a Python file (e.g., exo1.py) that you’ll save into your home directory in the local filesystem of the cluster machine.  Change the value of the variable checkpoint_location so that it points to the directory that you created at point 3. Change the value of the variable port_number to any value in the range [49152, 65535].  Open a new terminal window, connect to phome.metz.supelec.fr and then to the same machine that you noted at point 2.\n In the new terminal, start a netcat server listening on the port number that you selected at point 4. Use the following command:\n  nc -lk port_number Run the Python code with the command spark-submit. Wait until Spark does not display any more messages on screen.  In case the program stops for an error, read the box “What to do in case of errors” below.  In the netcat terminal, write few lines of text. Look at the terminal where the Spark program is running and observe the output.   What to do in case of errors\nIf any error arises, before running the spark-submit again it would be better to remove all files from the checkpoint directory.\n Stop the program\n When you’re done with your experiments, you can stop the Spark program by simply typing CTRL-C in the terminal where Spark is running.\n Don’t stop the netcat server, you’ll need it in the next exercise.\n Remove all files from the checkpoint location.\n    2 Triggering policy In a Structured Streaming program we can choose a triggering policy.\nExercise\nExercise 2.1 \nWhat is a triggering policy?\n What is the triggering policy in the previous program?\n Modify the code of the previous program in order to set the Fixed interval micro-batch triggering policy.\n Run the program. How is the behaviour of this program different from before?\n     Solution\nIt is a policy that dictates the timing of streaming data processing.\n No triggering policy is specified, so the default is chosen. In practice, as soon as the previous micro-batch finishes processing, the next one is read in.\n Here is the code. We need to specify a `trigger.\n  streamingQuery = lines.writeStream .trigger(processingTime = \u0026quot;15 seconds\u0026quot;) .format(\u0026quot;console\u0026quot;).start() The new data is checked at the specified interval. It is possible that within the specified interval (15 seconds), we write many lines, so the program will get multiple lines in a micro-batch (unlike before, when the processing is triggered as soon as there is data available).     3 Checkpoint location and output mode We’re now going to see the impact of the checkpoint location and the output modes on a streaming query.\nExercise\nExercise 3.1 \nWhat is an output mode and what are the available options?\n What is the output mode of the previous program?     Solution\nThe output mode tells Spark how the output is presented. There are several options: append (only the new rows added to the Result Table since the last trigger are visible in the output), complete (the whole Result Table is visible after each trigger) and update (only the rows that were updated since the last trigger are visible in the output).\n In the previous program we didn’t specify any output mode, so the default mode (append) is selected.    We’re now going to write a new streaming query.\nExercise\nExercise 3.2 \nCreate a new checkpoint location in HDFS. You may also keep the same directory as before; in this case, make sure you remove all files from that directory.\n Write a new program that reads a streaming text from a TCP socket and counts the number of occurrences of each word.\n Which output mode are you going to choose and why?\n Run the program. Write few lines on the netcat server and observe the output.\n Stop the program and run it again with no modifications. Write few lines in the netcat terminal and observe the output. What can you say about the word counts?\n Stop the program and remove the files in the checkpoint location. Run the program again and write few lines on the netcat terminal. What can you say about the word counts?\n Play with the different output modes and observe how the output changes.\n     Solution\nThe new program is as follows:\nlines = (spark\\ .readStream.format(\u0026quot;socket\u0026quot;)\\ .option(\u0026quot;host\u0026quot;, \u0026quot;localhost\u0026quot;)\\ .option(\u0026quot;port\u0026quot;, port_number)\\ .load()) lines = lines.select(F.explode(F.split(lines.value, \u0026quot; \u0026quot;))\\ .alias(\u0026quot;word\u0026quot;))\\ .groupBy(\u0026quot;word\u0026quot;).count() streamingQuery = lines.writeStream\\ .trigger(processingTime = \u0026quot;15 seconds\u0026quot;)\\ .option(\u0026quot;checkpointLocation\u0026quot;, checkpoint_location)\\ .outputMode(\u0026quot;update\u0026quot;)\\ .format(\u0026quot;console\u0026quot;)\\ .start() streamingQuery.awaitTermination() The append mode doesn’t work, because aggregating function might modify previous lines of the ResultTable. So, the only options left are update and complete. We choose update to just have the values that changed since the last trigger.\n   4 Window operations on event time Netcat and checkpoint\nYou can stop the netcat server now.\n Remember to create a new checkpoint location for this exercise. Alternatively, you can also use the same directory as in the previous exercises, but you should remove all its files.\n   We’re now going to find out how to perform aggregations over a sliding event-time window.\nA given data source generates some words for a certain time interval. Each word is accompanied with a timestamp that indicates the exact moment when the word is generated. This timestamp is the event time.\nAfter generating a word, the data source saves the word and its timestamp into a CSV file in a directory on HDFS. For convenience, we’ll refer to this directory as the source directory.\nActivity\nCreate the source directory under your home directory hdfs://sar01:9000/cpuecm1/cpuecm1_X in HDFS.\n At any given moment, the source will contain zero to many CSV files, where each file only contains exactly one line in the format word,timestamp (no whitespace before nor after the comma).\nExercise\nExercise 4.1 \nWrite a Spark program that:\nReads the stream of data from the source directory.\n Counts the number of occurrences of each word within 10 minute windows that slide every 5 minutes.\n Print the output counts to the console. Use triggers of 5 seconds.     Solution\nThe new program is as follows:\n source_directory = hdfs://.... words = (spark .readStream.format(\u0026quot;csv\u0026quot;) .schema(\u0026quot;word STRING, timestamp TIMESTAMP\u0026quot;) .load(source_directory)) windowedCount = words.groupBy(F.window(words.timestamp, \u0026quot;10 seconds\u0026quot;, \u0026quot;5 seconds\u0026quot;, startTime=0), words.word).count() windowedQuery = windowedCount.withColumn(\u0026quot;trigger_timestamp\u0026quot;, F.expr(\u0026quot;get_current_timestamp()\u0026quot;)).writeStream\\ .trigger(processingTime=\u0026quot;5 seconds\u0026quot;)\\ .outputMode(\u0026quot;update\u0026quot;)\\ .format(\u0026quot;console\u0026quot;)\\ .option(\u0026quot;truncate\u0026quot;, False)\\ .start() streamingQuery.awaitTermination()   We now test the new Spark program.\nData source and timeline visualization\nWe provide two Python programs for this exercise: a data generator and a tool for visualizing words in a timeline. Instructions to get and run these two programs are given in the activity below.\nThe data generator is our data source. It generates two words every second for a certain amount of time. Each word is saved in a separate CSV file in source directory. It also saves the list of all generated words to a summary CSV file.\nThe visualization tool takes as its input the summary CSV file written by the data generator and visualizes the words on a timeline.\n Activity\nCopy to your home directory in the local filesystem the data generator that you find at the following path  /usr/users/cpu-prof/cpu_quercini/structured-streaming/tempws_gen.py Start your Spark program. When running the first time, you might get some errors. Correct your code accordingly.\n In another terminal, run the Python script tempws_gen.py. Use the following command to learn how to run this program:\n  python3 tempws_gen.py --help For this exercise, do not introduce any delay (keep the default values of the parameters --delay, --mindelay, --maxdelay).\nAfter launching the data generator, you should see some output in the terminal where you launched the Spark program. Wait for the script tempws_gen.py to terminate the data generation. The output might be a bit overwhelming. Scroll up to identify the results on each micro-batch.\n If you need to rerun the Spark program and the data generator, make sure you delete all the files in the checkpoint location and the source directory.\n   We now want to analyze the output of the program.\n The script tempws_gen.py has generated a file gen_words.csv in your home directory. This file contains the list of all words generated with the relative timestamps. Download the file to your computer.\n Download the visualization tool that you find at the following path:\n  /usr/users/cpu-prof/cpu_quercini/structured-streaming/timeline_visualization.py to your computer.\nVisualization tool\nUse the following command to learn how to run the visualization tool:\npython timeline_visualization.py --help The visualization tool displays a vertical blue bar at each trigger. To this purpose, you’ll need to pass the tool the timestamps associated to the first and last trigger and the interval (in seconds) between two consecutive triggers.\nYou can get the timestamps associated to the first and last trigger by analyzing the output of Spark. More specifically, for each micro-batch, Spark outputs the progress details of the streaming query; you’ll need to look at the timestamp associated to the first and last micro-batch.\n Exercise\nExercise 4.2 \nAnalyze the output of your Spark program and the timeline of the generated words.\n Describe how the counts are updated by the Spark program.     Solution\nUnlike the previous exercise, here the number of occurrences of each word is counted based on a time window of 10 seconds that slides every 5 seconds. Each word is associated with an event time that is used to compute the number of occurrences. The time window starts from the first trigger, say at 12:00. If a word arrives at 12:07, the count associated to this word are updated in two time windows, 12:00 - 12:10 and 12:05 - 12:15.\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"96a6833d49e7a19d1120d1cc206d0e1a","permalink":"/courses/big-data-marseille/tutorials/spark-streaming/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/big-data-marseille/tutorials/spark-streaming/","section":"courses","summary":"Tutorial Structured Streaming.","tags":null,"title":"Apache Spark — Structured Streaming","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial you’ll learn:\n How to create a conceptual schema of a database. How to draw an entity-relationship (ER) diagram. How to translate a conceptual model into a logical model.  Prerequisites:\n Having attended Lecture 1.  1 Database of a social network platform A social network platform wants to design a relational database to store information on its users. For each user, the platform keeps its nickname, that uniquely identifies the user in the platform, first and family name, geographic location (city and country) and email address; the user can register as many email addresses as s/he wishes. Any user can share content on the platform; each post is characterized by its content, date, time and, when available, the geolocation (latitude, longitude). Optionally, users can tag one or more friends in their posts.\nTwo users are linked by a friendship relationship if both agree on befriending each other; a user can also follow another user without necessarily befriending her. For any type of relationship (friendship or follower), the platform registers the date when the relationship is established.\n1.1 Exercises Exercise\nExercise 1.1  Give the conceptual schema of the database with an ER diagram.\n   Solution\n  Exercise\nExercise 1.2  Translate the conceptual schema into a logical schema. For each table, underline the primary key and specify the foreign keys.\n   Solution\nThe collection of tables is the following:\n UserAccount (nickname, first_name, last_name, city, country) Post (post_id, content, date, time, lat, long, nickname) EmailAddress (email_address, nickname) Relationship (nickname_src, nickname_dst, type, date) Tag (post_id, nickname)  The foreign keys are the following:\nPost(nickname) → UserAccount(nickname).\nEmailAddress(nickname) → EmailAddress(nickname).\nRelationship(nickname_src) → UserAccount(nickname).\nRelationship(nickname_dst) → UserAccount(nickname).\nTag(post_id) → Post(post_id).\nTag(nickname) → UserAccount(nickname).\n    2 Database of a banking system The following figure shows the ER diagram with the conceptual schema of a banking system database.\n Figure 2.1: The conceptual schema of the bank database  Each bank is identified by a unique code and name, and has one or several branches. A branch is responsible for opening accounts and granting loans to customers. Each account is identified by a number (acct_nbr) and is either a checking or savings account (property acct_type). Each customer is identified by its social security number (ssn); a customer can be granted several loans and open as many accounts as s/he wishes.\n2.1 Exercises Exercise\nExercise 2.1 Which primary key would you choose for the entity Bank? Justify your answer.    Solution\nSince no two banks have the same code_bank or name, either property can be chosen as the primary key of the entity Bank. Both can be considered as valid candidate keys.\n  Exercise\nExercise 2.2 Would you consider {code_bank, name} as a valid candidate key for the entity Bank? Justify your answer.    Solution\nThe answer is no. While there aren’t any banks that have the same value for {code_bank, name}, two subsets ({code_bank} and {name}) are candidate keys.\n  Exercise\nExercise 2.3 Complete the diagram in the figure by adding the cardinalities to the relations. Justify your choices when any ambiguity arises.    Solution\n  Exercise\nExercise 2.4 Translate the conceptual schema into a logical schema. For each table, underline the primary keys and specify the foreign keys.    Solution\nThe collection of tables is the following:\n Bank (code_bank, name, address) Branch (branch_id, address, code_bank) Account (acct_nbr, acct_type, balance, branch_id, ssn) Loan (loan_nbr, loan_type, amount, branch_id, ssn) Customer (ssn, first_name, last_name, telephone, address)  The foreign keys are the following:\nBranch(code_bank) → Bank(code_bank).\nAccount(branch_id) → Branch(branch_id).\nAccount(ssn) → Customer(ssn).\nLoan(branch_id) → Branch(branch_id).\nLoan(ssn) → Customer(ssn).\n    3 Car dealership database We want to design the database of a car dealership. The dealership sells both new and used cars, and it operates a service facility. The database should keep data about the cars (serial number, make, model, colour, whether it is new or used), the salespeople (first and family name) and the customers (first and family name, phone number, address). Also, the following business rules hold:\n A salesperson may sell many cars, but each car is sold by only one salesperson. A customer may buy many cars, but each car is bought by only one customer. A salesperson writes a single invoice for each car s/he sells. The invoice is identified by a number and indicates the sale date and the price. A customer gets an invoice for each car s/he buys.  When a customer takes one or more cars in for repair, one service ticket is written for each car. The ticket is identified by a number and indicates the date on which the car is received from the customer, as well as the date on which the car should be returned to the customer. A car brought in for service can be worked on by many mechanics, and each mechanic may work on many cars.\n3.1 Exercises Exercise\nExercise 3.1 Give the conceptual schema of the database with an ER diagram.    Solution\n  Exercise\nExercise 3.2 Translate the conceptual schema into a logical schema. For each table, underline the primary keys and specify the foreign keys.     Solution\nThe collection of tables is the following:\n Car (serial_number, make, model, colour, is_new) Customer (cust_id, cust_first_name, cust_last_name, cust_phone) Invoice (invoice_number, date, price, car_serial_number, sp_id, cust_id) Salesperson (sp_id, sp_first_name, sp_last_name) Mechanic (mec_id, mec_first_name, mec_last_name) Ticket (ticket_number, date_open, date_return, car_serial_number) Repair (ticket_number, mec_id)  The foreign keys are the following:\nInvoice(cust_id) → Customer(cust_id).\nInvoice(car_serial_number) → Car(serial_number).\nInvoice(sp_id) → Salesperson(sp_id).\nTicket(car_serial_number) → Car(serial_number).\nRepair(ticket_number) → Ticket(ticket_number).\nRepair(mec_id) → Mechanic(mec_id).\n    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"85c2215a0f57e47f0e3f4cc4fba8d167","permalink":"/courses/databases/tutorials/data-modeling/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/databases/tutorials/data-modeling/","section":"courses","summary":"Description of the data modeling tutorial.","tags":null,"title":"Data modeling","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial you’ll learn:\n How to run containers. How to define and build images. How to create and use volumes. How to define and use networks.  Prerequisites:\n Having installed Docker on your computer or having imported the Linux virtual machine either with VirtualBox or with Multipass.   Using a virtual machine with Multipass? Click here for more info\nMultipass commands\n To start the virtual machine, type multipass start cloudvm.\n The folder /home/ubuntu/labs in the virtual machine is mounted (i.e., linked) to the folder on YOUR computer (let’s call it LAB) where you’ll store all your lab material. You specified this folder when you installed the virtual machine.\n If you don’t remember the path to the folder linked to /home/ubuntu/labs, type the command multipass info cloudvm.\n To open a terminal into the virtual machine, type multipass shell cloudvm.\n When the terminal opens, the current working directory is /home/ubuntu.\n Type cd labs to move to the folder where you’ll find your lab material.\n You’ll use the virtual machine terminal only to type the Docker commands. You can use all the tools installed on your machine to create and manage the files in the directory LAB directly from your computer.\n Once the lab is over, type exit to leave the virtual machine terminal. This will lead you back to the terminal of your computer.\n In the terminal of your computer, type multipass stop cloudvm to stop the virtual machine. This will NOT destroy your files! It just stops the virtual machine from needlessly using the resources of your computer.\n     Being familiar with the notions of containers, images, volumes and networks in Docker. See the Lecture 2 for an introduction. Being familiar with the basic notions of Linux. Don’t hesitate to look at the Docker cheat sheet to verify the syntax of the Docker commands.  Terminology\n You’ll use the terminal to run Docker commands. Referring to the Docker architecture, the terminal is the client that communicates with the Docker daemon.\n Docker runs containers on your computer. We’ll refer to your computer as the host, the containers being the guests.\n   A containerized application is an application running in a container.    1 Running containers (\\#exr:unnamed-chunk-1)  For each of the following images, specify the registry name, the user, the name and the tag. 1. registry.redhat.io/rhel8/mysql-80 2. alpine:3.11 ::::: {.last-child} 3. alpine ::::: \\EndKnitrBlock{exercise} :::  Solution ::: {.infobox .exosolution data-latex=\"{exercisebox}\"} 1. Registry: *registry.redhat.io*, user: *rhel8*, name: *mysql-80*, tag: *latest* 2. Registry: *DockerHub*, user: *library*, name: *alpine*, tag: *3.11* 3. Registry: *DockerHub*, user: *library*, name: *alpine*, tag: *latest* :::  ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-2) What's the difference between the following image names? 1. alpine:latest 2. registry.hub.docker.com/library/alpine ::::: {.last-child} 3. alpine ::::: \\EndKnitrBlock{exercise} :::  Solution ::: {.infobox .exosolution data-latex=\"{exercisebox}\"} There's no difference. They all point to the same image, that is the latest version of *alpine* in the DockerHub registry. :::  -- We now learn how to use the command docker run and some of its options. In the following exercises, we’ll run containers from the image named alpine that is available on the DockerHub registry. This image provides a lightweight distribution (i.e., it doesn’t contain many features) of Linux.\nExercise\nExercise 1.1 You want to run the container from the latest version of the image alpine. Which command would you write in the terminal? Execute it.    Solution\nThe goal of this exercise is to start playing with the docker run command. Since the question doesn’t say anything about the options, nor does it mention the command to run inside the container, we’d type:\ndocker run alpine\n  (\\#exr:unnamed-chunk-4) Execute the command that you proposed in the previous exercise, observe the output in the terminal and explain the actions taken by Docker to run the container.\\EndKnitrBlock{exercise} :::  Solution ::: {.infobox .exosolution data-latex=\"{exercisebox}\"} The output obtained from executing the command should look like as follows: ```bash Unable to find image 'alpine:latest' locally latest: Pulling from library/alpine aad63a933944: Pull complete Digest: sha256:b276d875eeed9c7d3f1cfa7edb06b22ed22b14219a7d67c52c56612330348239 Status: Downloaded newer image for alpine:latest ``` Here's what happens under the hood: 1. Docker looks for an image named *alpine:latest* in the host computer and cannot find it. 2. Docker *pulls* (i.e., downloads) the image from the DockerHub registry. ::: -- Exercise\nExercise 1.2 Is the container still running?    Solution\nIn order to list all containers still running on the host, type the following command:\ndocker container ls\nYour container shouldn’t appear in the output, because it’s not running. In order to see all containers, including those that are not running, type the following command:\ndocker container ls -a\n  (\\#exr:unnamed-chunk-6) What information is displayed for each container?\\EndKnitrBlock{exercise} :::  Solution ::: {.infobox .exosolution data-latex=\"{exercisebox}\"} * The identifier of the container. * The name of the image used to run the container (it should be *alpine* for your container). * The command executed within the container (it should be ``/bin/sh`` for your container). * When the container has been created. * The container current status (it should be *exited (0) x seconds ago* for your container). * The network ports used by the container (we'll study them later). * The name of the container. If you don't specify any when you run the container (as is our case), Docker generates a random name by concatenating an adjective and a famous scientist's name (e.g., *agitated_newton*). ::: -- Exercise\nExercise 1.3 By looking at the command executed within the container (/bin/sh), can you tell why the container stopped without giving any output?    Solution\nThe command is /bin/sh; the container runs a Linux terminal. But since we didn’t specify what to do with that terminal (we didn’t run any Linux command, nor we tried to access the terminal), the container stopped.\n  We’re now going to do something useful with the image alpine. Make sure you read the good practices that you should adopt while playing with images and containers.\nGood practices\nName your containers. Although Docker assigns a default name to a new container, it’s usually a good practice to give a container a name of your choice to make it easily distinguishable. You can do it by using the option --name. Try the following:  docker run --name my-alpine alpine\nAs before, the container stops immediately. If you list all your containers by typing again:\ndocker container ls -a\nyou should see a container named my-alpine.\nRemove automatically a container if you use it once. Unless you want to reuse your container later, you can ask Docker to automatically remove it when it stops by using the option --rm. This will prevent unused containers from taking up too much disk space.  Try the following:\ndocker run --rm --name container-to-remove alpine\nIf you list all the containers you should see that there is no container named container-to-remove.\nRemove unused containers. Stopped containers that have been run without using the option --rm are still stored in the host. If you want to remove a specific container (e.g., my-alpine), use the following command:  docker container rm my-alpine\nIf you want to remove all stopped containers, use the following command:\ndocker container prune\nRemove unused images. Images can take up a lot of disk space. As a result, you should remember to remove those that you don’t intend to use any longer. The commands to remove a specific image and prune unused ones are docker image rm and docker image prune -a respectively.   1.1 Pass a command to the containerized application Remember that the template of docker run is the following:\ndocker run [options] image-name [command] [arg]\nThe optional parameter command refers to a command that you can pass the containerized application, possibly with some arguments (parameter arg).\nLet’s see an example. As we saw before, when we run a container from the image alpine, a Linux terminal /bin/sh is launched.\nNotice\nThe Linux terminal /bin/sh is run within the container. Henceforth, we’ll use the following terms:\n Host terminal. The terminal that you use to interact with the operating system of your computer.   Guest terminal. The terminal that is run within the container.    By using the optional parameter command, we can run a command in the guest terminal.\nExercise\nExercise 1.4  Run a container from the image alpine and execute the Linux command ls that lists the content of the current directory.\n Where are the listed files stored? In the host or in the container?      Solution\ndocker run --rm --name ls-test alpine ls\n The command ls is run in the guest terminal, therefore what we see in the output is a list of files stored in the container.    Notice\nIn Exercise 1.4 the command ls is executed in the guest terminal, but its output is redirected to the host terminal.\nIn other words, when we run the container, we don’t interact directly with the guest terminal; we just send a command and the output is redirected to the host terminal.\n Now let’s see how to execute a command in the guest terminal that also requires an argument.\nExercise\nExercise 1.5 By using the Linux utility ping, check whether the Web site www.centralesupelec.fr is reachable.     Solution\ndocker run --rm --name ping-test alpine ping www.centralesupelec.fr\nIn order to interrupt ping just type the key combination that you’s use to interrupt any other command in your terminal. (typically Ctrl-C on Windows and Cmd-C in MacOs).\n  (\\#exr:unnamed-chunk-9) Run a container from the image *alpine* to execute the Linux command `rev` and interact with it. You can stop interacting with ``rev`` by typing Ctrl+C at any time.\\EndKnitrBlock{exercise} :::  Solution ::: {.infobox .exosolution data-latex=\"{exercisebox}\"} `` docker run --rm --name rev -it alpine rev `` After typing the command, type a word on your keyboard (e.g., *deeps*), press *Return* and you should see the same word reversed (e.g., *speed*). The option ``-t`` opens a guest terminal (so we can see its output); the option ``-i`` allows you to write directly into the guest terminal. In order to stop using the guest terminal, you'll need to press Ctrl+D (both in Windows and MacOs). :::  -- Now run the following command:\ndocker run --name my-alpine -it alpine\nNote: we didn’t use the option --rm (the container will not be removed when we stop it, we’re going to use it again). Moreover, we didn’t specify any command to run in the guest terminal.\nExercise\nExercise 1.6 What do you obtain?    Solution\nWhen we run a container from the image alpine, the command /bin/sh is executed within the container. Since we specified the option -it, what we obtain is an access to the Linux terminal running in the container.\n   1.2 Starting and stopping containers. docker run is a shorthand for two Docker commands, namely docker create, that creates a container from an image, and docker start, that starts the container after its creation.\nSuppose now that you want to download a Web page by using Linux Alpine. You can use the Linux command wget followed by the URL of the page that you want to download.\nExercise\nExercise 1.7 By using the guest terminal in the container my-alpine, download this Web page.\n Where will the Web page be saved? The host computer or the container?      Solution\nJust type in my-alpine guest terminal the following command:\nwget https://www.centralesupelec.fr/fr/presentation\n The Web page will be saved in the current directory of the container. You can verify that the file is there by typing ls in the guest terminal.     Want to copy the donwloaded file from the container to your computer?\nTo copy the file presentation to your working directory, type the following command in the host terminal:\n docker cp \u0026lt;containerId\u0026gt;:/presentation . In the previous command, replace \u0026lt;containerId\u0026gt; with the identifier of your container. You can obtain the identifier of the container from the output of the command docker container ls -a.\n Where are the containers and image files stored?\n If you use MacOS or Windows\nThe files managed by Docker are not stored directly in your computer, but in the Linux virtual machine installed and operated by Docker Desktop (remember, Docker always need Linux to be executed).\nTherefore, you need to open a terminal inside that Linux virtual machine by typing the following command:\ndocker run -it --rm --privileged --pid=host justincormack/nsenter1 Once the terminal is opened, you can follow the instructions given below for Linux users.\n  If you use Docker on Linux\n All files managed by Docker are stored under folder /var/lib/docker.\n To access that folder, you need to be root (i.e., administrator). Type the command sudo su.\n If you type ls /var/lib/docker you can look at the folders stored under this directory. You’ll see that there are folders corresponding to the different objects managed by Docker (containers, images, volumes and networks).\n To locate the files of a specific container, you first need to get the container identifier by typing docker container ls -a.\n Type the command docker inspect \u0026lt;container-id\u0026gt; (replace \u0026lt;container-id\u0026gt; with the identifier of the container that you intend to inspect).\n Locate the field UpperDir. The value of this field is the path to the directory (let’s call it CONTAINER_DIR) that contains the upper layer of the container (the writable layer). It should be a path that ends by /diff.\n If you type cd CONTAINER_DIR (replace CONTAINER_DIR with the value of the field UpperDir) you can finally see the files stored in your container.\n    In my-alpine guest terminal type exit. This closes the guest terminal and, as a result, stops the container.\nNOTICE\nStopping the container will not erase any of the files stored in the container. Removing the container will.\n If you want to start the container my-alpine again, you can use the following command:\ndocker container start -ai my-alpine\nThis will open the guest terminal of the container again; type ls to verify that the Web page that you downloaded before is still there.\n Homework (optional)\nSuppose that you need to download all the figures of this Web page. The Linux utility wget comes in handy. However, you don’t have Linux and you’d like to avoid the hassle of installing it on your computer, or in a virtual machine, just for this task.\nA great alternative is to run Linux in a Docker container. Unfortunately, the Alpine distribution that we’ve been playing with doesn’t provide an implementation of wget with all the options that we need.\nWe turn to another Linux distribution, Ubuntu, for which DockerHub has several images.\nExercise\nExercise 1.8 Run a container with Ubuntu (latest) and open a guest terminal. Call the container dl-figures, and avoid the option --rm, we’ll use this container later.    Solution\ndocker run --name dl-figures -it ubuntu\n  From now on, we’ll be interacting with the guest Ubuntu terminal. If you type the command wget, you’ll get an error (bash: wget: command not found).\nNotice\nThe image Ubuntu doesn’t include all the commands that you’d find in a full-blown Ubuntu distribution; the reason is to keep the size of the image small, a necessary constraint given that images are transferred over the Internet.\n Luckily, there’s a way to install wget in our Ubuntu distribution. Ubuntu provides a powerful command-line package manager called Advanced Package Tool (APT). First, you need to run the following command:\napt update\nwhich fetches the available packages from a list of sources available in file /etc/apt/sources.list.\nThen, you can install wget by running the following command:\napt install -y wget\nIn order to obtain all the figures from a Web page, type the following command:\nwget -nd -H -p -P /my-figures -A jpg,jpeg,png,gif -e robots=off -w 0.5 https://www.centralesupelec.fr/fr/presentation You should see in the current directory a new folder named my-figures containing the downloaded figures; verify it by typing ls my-figures.\nBefore terminating, don’t forget to read your fortune cookie. In the shell, run the following command:\napt-get install -y fortune\nand then:\n/usr/games/fortune -s\nWhen you’re done, you can simply type the command exit to quit the guest terminal and stop the container.\n   2 Creating Images A Docker image can be thought of as a template to create and run a container. An image is a file that contains a layered filesystem with each layer being immutable; this means that the files that belong to a layer cannot be modified or deleted, nor can files be added to a layer.\nWhen a container is created from an image, it will be composed of all the image read-only layers and, on top of them, a writable layer (termed the container layer), where all the new files created in the container will be written. For example, the Web page that you downloaded in Exercise 1.7 were stored in the writable layer of that container (cf Slide 64).\n(\\#exr:unnamed-chunk-12) If layers, except the top one, are immutable, how can files that belong to the lower layers be modified or deleted?\\EndKnitrBlock{exercise} :::  Solution ::: {.infobox .exosolution data-latex=\"{exercisebox}\"} All files marked with A are new and therefore are added to the writable layer of the container. As for the existing files, they live in the immutable layers of the image, and therefore cannot be touched directly. Instead, they are copied from the bottom layers to the writable layer where they are modified. This strategy is called **copy-on-write**. The structure of layers generates a **layered filesystem** in the image; if different copies of the same file exist in different layers, the copy in the uppermost layer overwrites the others. :::  We can create a new image from the container *dl-figures*, one that provides a Ubuntu distribution with the command ``wget`` already installed, with the following command: ```shell docker commit dl-figures ubuntu-with-wget ``` The command creates a new image called *ubuntu-with-wget*. ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-14) Run a container from the image *ubuntu-with-wget* and verify that the command *wget* is actually installed. \\EndKnitrBlock{exercise} :::  Solution ::: {.infobox .exosolution data-latex=\"{exercisebox}\"} Just type the following command: `` docker run --rm -it ubuntu-with-wget `` In the guest terminal type ``wget``: you should see the following output: `` wget: missing URL Usage: wget [OPTION]... [URL]... Try `wget --help` for more options. `` ::: -- 2.1 Dockerfiles The most common way to create an image is to use a Dockerfile, a text file that contains all the instructions necessary to build the image. The advantage of the Dockerfile is that it can be interpreted by the Docker engine, which makes the creation of images an automated and repeatable task.\nSuppose that we want to create a containerized application to download figures from a Web page. As a template for this application, we need to build a new image, that we’ll call fig-downloader.\nThe Dockerfile containing the instructions to build the image fig-downloader is as follows:\nFROM ubuntu RUN apt-get update RUN apt-get install -y wget RUN mkdir -p /my-figures WORKDIR /my-figures ENTRYPOINT [\u0026quot;wget\u0026quot;, \u0026quot;-nd\u0026quot;, \u0026quot;-r\u0026quot;, \u0026quot;-A\u0026quot;, \u0026quot;jpg,jpeg,bmp,png,gif\u0026quot;] CMD [\u0026quot;https://www.centralesupelec.fr/fr/presentation\u0026quot;] Here’s the explanation:\nWe use the image ubuntu as the base image. This corresponds to the instruction FROM ubuntu.\n We install the utility wget in the base image. This corresponds to the instructions RUN apt-get update and RUN apt-get install -y wget.\n We create a directory my-figures under the root directory of the image. This corresponds to the instruction RUN mkdir -p /my-figures.\n We set the newly created directory /my-figures as the working directory of the image. This corresponds to the instruction WORKDIR /my-figures.\n We specify the command to be executed when a container is run from this image. This corresponds to the instruction\n  ENTRYPOINT [\u0026quot;wget\u0026quot;, \u0026quot;-nd\u0026quot;, \u0026quot;-r\u0026quot;, \u0026quot;-A\u0026quot;, \u0026quot;jpg,jpeg,bmp,png,gif\u0026quot;]\nThis instruction means: execute wget with the options -nd, -r, -A; the last option takes a list of file extensions (jpg,jpeg,bmp,png,gif) as its argument.\nRemember that the utility wget takes the URL of the Web page as an argument. The URL will be specified when we run the container from the image fig-downloader. Optionally, we can specify a default argument by using the keyword CMD. The meaning of the instruction:  CMD [\u0026quot;https://www.centralesupelec.fr/fr/presentation\u0026quot;]\nis: if we don’t give any URL when we run the container, the figures will be downloaded from https://www.centralesupelec.fr/fr/presentation.\nExercise\nExercise 2.1 What’s the relation between the Dockerfile lines and the image layers?    Solution\nEach line corresponds to a new layer. The first line corresponds to the bottom layer; the last line to the top layer.\n  Exercise\nExercise 2.2 Could you identify a problem in this Dockerfile? Modify the Dockerfile accordingly.    Solution\nWhen creating an image, we should keep the number of layers relatively small; in fact, the more the layers, the bigger the image will be. Here we create three separate layers with three RUN commands; we can simply merge the three layers. The resulting Dockerfile will be:\nFROM ubuntu RUN apt-get update \u0026amp;\u0026amp; \\ apt-get install -y wget \u0026amp;\u0026amp; \\ mkdir -p /my-figures WORKDIR /my-figures ENTRYPOINT [\u0026quot;wget\u0026quot;, \u0026quot;-nd\u0026quot;, \u0026quot;-r\u0026quot;, \u0026quot;-A\u0026quot;, \u0026quot;jpg,jpeg,bmp,png,gif\u0026quot;] CMD [\u0026quot;https://www.centralesupelec.fr/fr/presentation\u0026quot;]    2.2 Building an image We’re now going to build an image from a Dockerfile.\nCreate a directory named fig-downloader in your computer with a file named Dockerfile inside.\n In the Dockerfile write the set of instructions that you proposed in Exercise 2.2.\n In the terminal, set the working directory to fig-downloader.\n Build an image called fig-downloader by executing the following command:\n  docker build -t fig-downloader .\nThe . at the end of the command means that the Docker engine will look for a file named Dockerfile in the working directory.\n(\\#exr:unnamed-chunk-16) Once the image is built, type the command ``docker image ls -a``. What are the images with repository and tag ````? Why are there three of such images?\\EndKnitrBlock{exercise} :::   Solution ::: {.infobox .exosolution data-latex=\"{exercisebox}\"} These are the **intermediate images**. Once a layer is compiled, an intermediate image is created that contains that layer and all the layers underneath. In other words, the intermediate image corresponding to the layer $i$ contains all files up to the layer $i$, including layers 1 through $i-1$. The intermediate layers are used by the **build cache**, of which we'll see an example later. Although there are five layers in the new image, there are only three intermediate images because: * the base image is *ubuntu:eoan*. * the image corresponding to the top layer is the final image *fig-downloader*. :::  -- Good to know\nIf you give the Dockerfile a different name (say, Dockerfile-fig-downloader), the command to build the image will be:\ndocker build -t fig-downloader -f Dockerfile-fig-downloader .\nThe option -f is used to specify the name of the Dockerfile.\n In order to verify that the new image has been created, type the following command:\ndocker images\n(\\#exr:unnamed-chunk-17) Run the following command: `` docker history fig-downloader `` and analyze the layers of the new image. * Why do some layers have an ID, while others are marked as missing? ::::: {.last-child} * Can you find the identifiers of the intermediate images? ::::: \\EndKnitrBlock{exercise} :::  Solution ::: {.infobox .exosolution data-latex=\"{exercisebox}\"} The layers with an ID correspond to the layers of the new image, including the top layer and the base image. The layers marked as *missing* are those that compose the base image. Those layers are not stored in your computer, simply because they belong to an image that hasn't been built on your computer and you downloaded from the DockerHub registry. By looking at the output of ``docker image ls -a`` and the output of this command, we see that the layers between the base image and the top layer have the same identifiers as the intermediate images. :::  -- Exercise\nExercise 2.3 Run the following command:\ndocker run --name dl-1 fig-downloader\nWhat does it do? Where are the downloaded pictures?    Solution\nWe downloaded the figures of this page. The downloaded pictures are in the folder /my-figures of the container dl-1.\n  Exercise\nExercise 2.4 Run the following command:\ndocker run --name dl-2 fig-downloader https://www.centralesupelec.fr/ What does it do? Where are the downloaded pictures?    Solution\nWe downloaded the figures of this page. We basically overwrote the URL specified by the CMD keyword with a new one. The downloaded pictures are in the folder /my-figures of the container dl-2.\n   2.3 Containerized Python application Download this archive file and unzip it into your working directory. In this archive you’ll find:\n A Dockerfile. A Python script main.py that asks the user to enter the URL and the language of a Web page, and prints the 10 most frequent words occurring in that page. A file requirements.txt with the list of the Python packages needed to run the given script.  The content of the Dockerfile is as follows:\nFROM python:3.7-slim RUN mkdir -p /app WORKDIR /app COPY ./main.py ./requirements.txt /app/ RUN pip install -r requirements.txt ENTRYPOINT [\u0026quot;python\u0026quot;, \u0026quot;main.py\u0026quot;] Exercise\nExercise 2.5 Describe what this Dockerfile does.    Solution\n Takes python:3.7-slim as the base image. Creates a new folder app in the image under the root directory. Changes the working directory to /app. Copies the files main.py and requirements.txt from the local computer to the directory /app in the image. Runs the command pip install to install the Python libraries specified in the file requirements.txt. Executes the command python main.py.    Exercise\nExercise 2.6 Build an image called wordfreq from this Dockerfile.    Solution\ndocker build -t wordfreq .\n  Exercise\nExercise 2.7 Without changing the Dockerfile, rebuild the same image. What do you notice?    Solution\nThe build is very fast. Since we didn’t change the Dockerfile, the image is rebuilt by using the image layers created previously. This is clearly indicated by the word CACHED written at each layer. Using the already stored layers is called build cache.\n  Exercise\nExercise 2.8 What happens if you modify a line in the Python script and you rebuild the image?    Solution\nAdd any instruction at the end of main.py, such as:\nprint(\u0026quot;Finish!\u0026quot;) then rebuild the image. The three bottom layers are not affected by the modification, therefore they benefit from the build cache. Layer 4 is the first affected by the modification. This layer, and those above, need therefore to be rebuilt.\n  Exercise\nExercise 2.9 Based on the previous considerations, can you tell what’s wrong with this Dockerfile? Modify the Dockerfile accordingly and rebuild the image.    Solution\nEach time we modify main.py and we rebuild the image, the layer 4 and 5 are recreated, meaning that all the Python packages are downloaded and installed. Depending on the size and number of the packages, this might take some while. A better way to structure the Dockerfile is to install the packages before copying the Python script to the image. Here is how we should modify the Dockerfile:\nFROM python:3.7-slim RUN mkdir -p /app WORKDIR /app COPY ./requirements.txt /app/ RUN pip install -r requirements.txt COPY ./main.py /app/ ENTRYPOINT [\u0026quot;python\u0026quot;, \u0026quot;main.py\u0026quot;]   Exercise\nExercise 2.10 Modify main.py by adding a new line of code and rebuild the image. What changed?    Solution\nThe Python packages are not reinstalled, as a result rebuilding the image\ntakes much less time than before.\n  Play with the application by running the following command:\ndocker run --rm -it wordfreq\nThe containerized application will prompt you to insert the URL of a webpage and the language of the page (in English). The output will be the 20 most used words in the webpage.\n  3 Data Volumes In Exercise 2.3 you’ve been asked to run a container named dl-1 to download some figures from a Web page. The figures were downloaded into the directory /my-figures of the container. But we left a question unanswered.\nHow do we transfer those figures from the container to the host computer?\nThe solution is to use volumes.\n(\\#exr:unnamed-chunk-25) Can you tell why this solution is less than ideal?\\EndKnitrBlock{exercise} :::  Solution ::: {.infobox .exosolution data-latex=\"{exercisebox}\"} 1. After running the container we need to do an additional action to copy the figures from the container to the host computer. 2. The container is created and run only to download some figures. We'd like to remove it automatically (with the option ``--rm``) when its execution is over. However, if we do so, the pictures will be lost before we can copy them to the host computer. :::  ## Using a host volume A better solution is to **mount** (i.e., attach) a directory of the host computer at the container's directory */my-figures* when we run it. Let's see how it works. **Step 1.** Create a directory named *figs-volume* in your working directory. **Step 2.** Type and execute the following command: ```shell docker run --rm -v $(pwd)/figs-volume:/my-figures fig-downloader ``` This command runs a container from the image *fig-downloader*. * With the option ``-v`` we specify that we want to mount the directory *\\$(pwd)/figs-volume* (*\\$(pwd)* indicates the host working directory) at the directory *figs-volume* in the container; * The option ``--rm`` indicates that we want the container to be removed when its execution is over. **Step 3.** Verify that the pictures are in the folder *figs-volume*. In this example, we've used the directory *figs-volume* as a **volume** (essentially, an external storage area) of the container; when the container is destroyed, the volume remains with all its data.-- 3.1 Docker volumes A volume can be seen as a virtual storage device attached to a container. All files there are written to a volume survive the containerized application that created them. In other words, when a container is destroyed, all the files created by the application in the container remain in the volume.\nLet’s create a new Docker volume called data-volume:\ndocker volume create data-volume\nGood to know (advanced notion)\nWhere the data will be actually stored?\nYou can inspect the new volume by typing the following command:\ndocker volume inspect data-volume\nA mount point is indicated; that’s the folder where the data will be actually stored. If your computer runs Linux, that folder will be available on the host; if your computer runs Windows or MacOS, you’ll not find that folder on your computer. Instead, it will be available in the virtual machine that Docker use on MacOS and Windows.\nDo you want to see the directory? (Instructions for Windows and MacOS)\nOne way to look into the hidden VM is to run the following containerized application:\ndocker run -it --rm --privileged --pid=host justincormack/nsenter1\nThis application will open a guest terminal into the VM. You can then use the commands cd and ls to browse to the directory indicated as the mount path of the new volume.\n 3.1.1 Sharing data A Docker volume can be used to share data between containers.\nExercise\nExercise 3.1 Run a container from the image ubuntu, specifying the options to:\n Remove the container once its execution is over.\n Interact with the guest Linux terminal in the container.\n   Mount the volume data-volume at the container’s directory /data.   Feel free to use the Docker cheat sheet.\n   Solution\ndocker run --rm -it -v data-volume:/data ubuntu\n  Type the following command in the guest Linux terminal to create a file test-file.txt in the directory /data:  echo \u0026quot;This is a new file\u0026quot; \u0026gt; /data/test-file.txt\nPrint to the console the content of the file with the following command:  cat /data/test-file.txt\nType exit to leave the guest terminal. Since we’ve specified the option --rm, the container is destroyed. Now we’re going to verify that test-file.txt is still accessible.  Exercise\nExercise 3.2 Run a container from the image alpine:latest, specifying the options to:\n Remove the container once its execution is over.\n Interact with the guest Linux terminal in the container.\n   Mount the volume data-volume to the directory /my-data of the container.      Solution\ndocker container run --rm -it -v data-volume:/my-data alpine\n  Exercise\nExercise 3.3 Verify that you can read the file test-file.txt. Which folder would you look in?    Solution\nWe need to look in the folder /my-data because this is where we mounted data-volume.\ncat /my-data/test-file.txt\n  Type exit to exit the guest terminal and terminate the container.\n   4 Single-Host Networking In order to let containers communicate and, therefore, co-operate, Docker defines a simple networking model known as the container network model\n If you use a Linux virtual machine with Multipass In this section, you’ll need to open several terminals in the virtual machine. You can do it easily by using byobu, an advanced window manager already available in your virtual machine.\n Just type byobu to launch the window manager.\n If you want to open a new terminal, just press F2.\n If you want to switch from a terminal to another, just press F3 (to move to previous terminal) or F4 (to move to next terminal).\n If you want to close a terminal, just type exit.\n When you close all terminals, byobu will stop executing.\n   Exercise\nExercise 4.1 Describe the output of the following command:\ndocker network ls\n   Solution\nThe command lists all the networks created by Docker on your computer. For each network, the values of four attributes are shown:\n The identifier. The name. The driver used by the network. The scope of the network (local or global). A local scope means that the network connects containers running on the same host, as opposed to a global scope that means that containers on different hosts can communicate.  Depending on the containers that you used in the past, you might see different networks. However, three networks are worth noting:\n The network named bridge, that uses the driver bridge and a local scope. By default, any new container is attached to this network. The network named host, that uses the driver host and a local scope. It’s used when we want a container to directly use the network interface of the host. It’s important to remember that this network should only be used when analyzing the host’s network traffic. In the other cases, using this network exposes the container to all sorts of security risks. The network named none, that uses the driver null and a local scope. Attaching a container to this network means that the container isn’t connected to any network, and therefore it’s completely isolated.    Exercise\nExercise 4.2 The following command:\ndocker network inspect bridge\noutputs the configuration of the network bridge. By looking at this configuration, can you tell what IP addresses will be given to the containers attached to this network? What’s the IP address of the router of this network?    Solution\nThe information is specified in the field named IPAM, more specifically:\n Subnet indicates the range of IP addresses used by the network. The value of this field should be 172.17.0.0/16; the addresses range from 172.17.0.1 to 172.17.255.255.\n Gateway indicates the IP address of the router of the network. The value should be 172.17.0.1\n    4.1 Creating networks By default, any new container is attached to the network named bridge.\nExercise 4.3  Explain why it is not a good practice to attach all our containers to the same network.\n   Solution\nAll new containers will be able to communicate over this network. This is not a good idea. If a hacker can compromise any of these containers, s/he might be able to attack the other containers as well. As a rule of thumb, we should attach two containers to the same network only on a need-to-communicate basis.\n  In order to create a new network, you can use the following command:\ndocker network create network_name\nExercise\nExercise 4.4 Create two networks named buckingham and rochefort that use the driver bridge. By using the docker network inspect command, look at the IP addresses of the new networks and write them down.    Solution\nJust run the following commands:\ndocker network create buckingham\ndocker network create rochefort\nThe IP addresses for the network buckingham are 172.18.0.0/16 (addresses from 172.18.0.1 to 172.18.255.255); The IP addresses for the network rochefort are: 172.19.0.0/16 (assuming that you create buckingham before rochefort).\nThe IP addresses may be different on your machines.\n  Exercise\nExercise 4.5 Create three containers athos, porthos and aramis and attach them to the two networks buckingham and rochefort as displayed in this figure. The three containers will open a Linux Alpine shell. You’ll need to launch the commands in three separate tabs of your terminal window.\n What will the IP addresses of the three containers be in the two networks? Remember that porthos is attached to two networks, therefore it’ll have two network interfaces (endpoints) and, as a result, two IP addresses.   Verify your answers by inspecting the two networks (use the command docker network inspect).      Solution\nHere are the commands to run athos and aramis while connecting them to buckingham and rochefort respectively.\ndocker run --rm -it --name athos --network buckingham alpine\ndocker run --rm -it --name aramis --network rochefort alpine\nHere’s the command to run porthos and attach it to buckingham:\ndocker run --rm -it --name porthos --network buckingham alpine\nThe following command attaches porthos to the second network rochefort:\ndocker network connect rochefort porthos\nAs for the IP addresses, each network has IP addresses in the range 172.x.0.0/16, where x is 18 in the network buckingham and 19 in the network rochefort. The address 172.x.0.1 is reserved for the router. Therefore, the containers will be assigned IP addresses from 172.x.0.2. In this solution, we created athos, aramis and portos in this order. Therefore, the IP addresses will be:\n In network buckingham:  athos: 172.18.0.2 porthos: 172.18.0.3  In network rochefort:  aramis: 172.19.0.2 porthos: 172.19.0.3   You can actually verify this configuration by inspecting the two networks with the following commands:\ndocker network inspect buckingham\ndocker network inspect rochefort\nThe IP addresses might be different on your machines.\n   4.2 Communication between containers Let’s see if and when the three containers can communicate.\nExercise\nExercise 4.6 Which containers are able to communicate? Justify your answer.    Solution\nThe only containers that cannot communicate are athos and aramis, because they’re not connected to the same network.\n  Exercise\nExercise 4.7 Try to ping porthos from athos by using its IP address.\n Which IP address of porthos would you use?      Solution\nWe need to use the IP address assigned to the endpoint linking porthos to the network buckingham, to which athos is connected. In our case, this is 172.18.0.3.\n  Exercise\nExercise 4.8 Try to ping porthos from athos by using its name. Do you succeed? Are you surprised?    Solution\nWe succeed. Indeed, the network buckingham provides a DNS server, that can translate names into IP addresses.\n  You can now exit the three containers.\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a74fda64fd4d3f15083e937e46612453","permalink":"/courses/cloud-computing/tutorials/tutorial-docker/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/cloud-computing/tutorials/tutorial-docker/","section":"courses","summary":"Text of the lab assignment on Docker","tags":null,"title":"Getting started with Docker","type":"docs"},{"authors":null,"categories":null,"content":" Warning\nIf you use the Linux VM, you need to change the hardware configuration of the VM before booting it. You can also watch this video. Here are the necessary modifications:\n Increase the main memory to 4GB.\n Set the number of CPUs to 2.\n  Without these modifications you’re not going to have a good experience with Kubernetes.\n In this tutorial you’ll learn:\n How to build and deploy a multi-service application with Docker Compose.\n How to push an image to DockerHub.\n How to deploy a multi-service application with Kubernetes.\n  Warning\nThis tutorial is adapted from the examples presented in Chapters 14 and 20 of the book G. Schenker, Learn Docker - Fundamentals of Docker 19.x (March 2020).\n 1 Docker Compose In this section, you’re going to build and deploy a multi-service application by using Docker Compose.\nDownload this archive file and unzip it into a folder on your own computer. The archive contains all the necessary files to build and run a web application consisting of two services:\n web. This is the frontend (the part the user interacts with) of the application. It consists of HTML and JavaScript code.\n db. This is the backend (the part hidden to the user). It is a PostgreSQL (relational) database.\n  The structure of the application is shown in Figure 1.1. The root directory of the application contains two subdirectories, one for each service (database and web).\n Figure 1.1: Structure of the application  Good to know\n The files with extension .conf under the directory database contain configuration parameters of the PostgreSQL database.\n The file init-db.sql under the directory database contains the SQL queries to populate the database with some data (photos of cats).\n The directory web contains the HTML and JavaScript code of the web application. The file package.json contains the dependencies to install.\n   Both directories contain a Dockerfile. The one in directory database is as follows:\nFROM postgres:10.2-alpine COPY init-db.sql /docker-entrypoint-initdb.d/ RUN chown postgres:postgres /docker-entrypoint-initdb.d/*.sql ENV POSTGRES_USER dockeruser ENV POSTGRES_PASSWORD dockerpass ENV POSTGRES_DB pets The Dockerfile builds on an existing image called postgres:10-2-alpine, that is documented here.\nExercise\nExercise 1.1  Consider the following line in the Dockerfile:\nCOPY init-db.sql /docker-entrypoint-initdb.d/\nBy looking at the documentation of the image postgres:10-2-alpine, answer the two following questions:\n Where is the directory /docker-entrypoint-initdb.d/?\n Why do we copy the file init-db.sql to this directory?\n     Solution\n The directory already exists in the base image.\n By looking at the documentation, we learn that we can put any initialization script in this directory. In other words, at the startup the database will execute the SQL queries in file init-db.sql so that the database is populated with new data.\n  From the documentation, we also learn that the script is not executed if the data directory is not empty. This means that already existing databases will not be touched.\n  The last three lines of the Dockerfile contain a keyword (ENV) that we never came across before.\nExercise\nExercise 1.2  Look again at the documentation of the image postgres:10-2-alpine and try to explain the meaning of the last three lines of the Dockerfile.\n   Solution\nThese lines set the value of three environment variables, useful to pass some parameters to the database. From the documentation we learn that:\n POSTGRES_USER is the name of the database user. If not set, the default is the user postgres.\n POSTGRES_PASSWORD is the password associated with the user. This is the only mandatory variable.\n POSTGRES_DB is the name given to the database. If not specified, the database name would be the same as the username.\n    The Dockerfile of the web application is as follows:\nFROM node:9.6-alpine RUN mkdir /app WORKDIR /app COPY package.json /app/ RUN npm install COPY ./src /app/src EXPOSE 3000 CMD node src/server.js The Dockerfile builds on the image node:9.6-alpine that contains a Node.js environment, a JavaScript-based platform for server-side applications. The instructions in the Dockerfile look like the ones of the examples that we’ve seen in the first tutorial and in the lectures.\nGood to know\n The command npm install installs all the dependencies specified in the file package.json from the software registry npm.\n The instruction EXPOSE 3000 informs that the container listens on port 3000 when it is executed from the image.\n  From the Docker documentation we learn that the “EXPOSE instruction does not actually publish the port. It functions as a type of documentation between the person who builds the image and the person who runs the container, about which ports are intended to be published”.\nIn order to actually publish the port, we’ll use the file docker-compose.yml.\n 1.1 Describing the application The application showcases a building block of a pet store. In the current version, the application shows a few pictures of cats.\nThe root directory of the application contains a file named docker-compose.yml that contains the declarative configuration of the application. The content of the file is as follows. It is a sequence of key-value pairs.\nversion: \u0026quot;3.6\u0026quot; services: web: build: web image: pet-store-web networks: - backend ports: - 5000:3000 db: build: database image: pet-store-db networks: - backend volumes: - pets-data:/var/lib/postgresql/data networks: backend: volumes: pets-data: There are three main sections:\n services. Defines the services of the application. Here two services are defined: web and db.\n networks. Defines the networks used by the application. Here one network is defined: backend.\n volumes. Defines the volumes used by the application. Here one volume is defined: pets-data. The volume is attached to the directory /var/lib/postgresql/data (that is in the container).\n  Exercise\nExercise 1.3  What key informs docker compose where to find the Dockerfile of the two services?\n   Solution\nThe value of the key build is the name of the directory that contains the Dockefile. For the service web, this is the directory web; for the service db, it is the directory database. All paths are relative to the position of the file docker-compose.yml itself.\n  When we’ll build the application from the file docker-compose.yml, two images will be created, one for each service.\nExercise\nExercise 1.4  What will the name of the two images be? What key in the file docker-compose.yml gives you this information?\n   Solution\nThe name of the image corresponding to the service web will be pet-store-web.\nThe name of the image corresponding to the service db will be pet-store-db.\nThis information is given by the key image in the file docker-compose.yml.\n   1.2 Building the application We now build the application.\n Open the command-line terminal and by using the command cd position yourself in the root directory pet-store of the application.\n Execute the following command:\n  docker-compose build\n During the build you might get a npm warning. Just ignore it.\n When the build is complete, verify that the two images corresponding to the two services have been created (which docker command do you need here?).\n   Solution\ndocker images\n   1.3 Executing the application We now execute the application with the following command:\n If you use a Linux virtual machine with Multipass In this section, you’ll need to open several terminals in the virtual machine. You can do it easily by using byobu, an advanced window manager already available in your virtual machine.\n Just type byobu to launch the window manager.\n If you want to open a new terminal, just press F2.\n If you want to switch from a terminal to another, just press F3 (to move to previous terminal) or F4 (to move to next terminal).\n If you want to close a terminal, just type exit.\n When you close all terminals, byobu will stop executing.\n   docker-compose up\nThe execution of the command will print a series of messages on screen. The terminal should hang when the messages stop (the last message should be database system is ready to accept connections).\nTake no action on the screen and open a new terminal or a new tab in the current terminal window.\nExercise\nExercise 1.5  Verify that the network and the volumes associated with the application have been correctly created.\n   Solution\nType the commands:\ndocker volume ls\nand\ndocker network ls\nto verify respectively that the volumes and the networks have been created\n  Exercise\nExercise 1.6  How many containers do you expect to be associated to the application?\n   Solution\nEach image corresponds to a service. Here we have two. Each container corresponds to a service instance.\nWe didn’t specify any parameter when we launched the application, so by default one instance of each service is executed.\nSo, we expect to have two containers associated to the application: one container for the service web and one for the service db.\n  You can verify the answer to the previous question by typing the following command:\ndocker-compose ps\nThis command is exactly equivalent to docker container ls, except that it only shows the containers associated with the application that we’ve just executed.\nExercise\nExercise 1.7  In the output of the command docker-compose ps, can you explain the meaning of the following?\n0.0.0.0:5000-\u0026gt;3000/tcp\n   Solution\nThe notation 5000-\u0026gt;3000 means that the port 5000 of the host computer is mapped to the port 3000 of the container. This mechanism is explained in slide 64 of the lecture on Docker. More specifically, when a client application connects to the port 5000 of the host computer, the connection is redirected to the port 3000 of the container.\nThe IP address 0.0.0.0 means that we can connect to the container by using any IP address on the host computer.\n  Exercise\nExercise 1.8  Can you tell which URL you have to type in your web browser to access the application?\n If you use a Linux virtual machine with Multipass\nIn order to open a Web browser window in the VM, you need to open a new terminal window on your computer and follow these instructions:\nType multipass ls to list all the virtual machines managed by Multipass.\n Copy the first IP address associated to the virtual machine cloudvm.\n Type the following command:\n  xpra start ssh://ubuntu@ip/ --start=firefox where you’ll replace ip with the IP address that you copied above.\nA Firefox window should appear.      Solution\nhttp://localhost:5000 or http://127.0.0.1:5000/.\nIn the network settings of you computer, you can also get the IP address associated by the DHCP server of your\nlocal network and use that address to connect to the application from another device connected to the same network (for instance, your mobile phone).\n  Warning\nIf you want to see the cats, you need to append /pet to the URL that you found in the previous question. This is determined in file server.js.\n  1.4 Shutting down the application You can shut down the application by typing the following command:\ndocker-compose down\nExercise\nExercise 1.9  Does shutting down the application remove the networks created for the application? What about the volumes?\n   Solution\nJust type the command:\ndocker network ls\nand you’ll see that the network backend is not there anymore.\nType the command:\ndocker volume ls\nand you’ll see that the volume pet-store_pets-data is still there.\nBy default volumes are not removed, to avoid the risk of permanently deleting data that might still be useful later. If you wish to remove the volumes when shutting down the application, you can type:\ndocker-compose down -v\n   1.5 Scaling a service When we launch the application, we can specify the number of instances of each service. This is useful when we expect our application to be solicited by many users; the workload will be automatically balanced across all the instances of the service.\nLet’s launch our application with 3 instances of the service web:\ndocker-compose up --scale web=3 -d\nExercise\nExercise 1.10  Running the previous command results in an error.\n Can you explain why?\n What fix would you propose in file docker-compose.yml?     Solution\n We’re trying to bind three instances to the port 5000 on the host computer. This is not possible.\n In the section ports of file docker-compose.yml we need to remove 5000 and we only leave 3000. This way, each time we run a container, a random port will be chosen on the host computer to bind it with port 3000 of the container.\n    Warning\nYou need to shut down the application before relaunching it again. In fact, even if we got an error, an instance of the db service and an instance of the service web are still running.\n  Modify the file docker-compose.yml and relaunch the application.\n Run the following command and verify that you actually have three running instances of the service web.\n  docker-compose ps\n Try to connect to the application by using the three port numbers indicated in the output of the previous command.  Warning\nDon’t forget to shut down the application before you go on.\n   2 Pushing an application Once we have built an application, we might want to share it by pushing it to the DockerHub registry or any other container registry, be it private or public.\n2.1 Creating an account on DockerHub You need to create an account on the DockerHub website in order to perform this activity.\n 2.2 Renaming the images In order to push your images to the registry, you need to rename them, so as the new name has the following structure:\nyourusername/image-name:image-tag\nFor instance, since my username is quercinigia, I’ll rename the two images pet-store-web and pet-store-db with the docker tag command as follows:\ndocker tag pet-store-web quercinigia/pet-store-web:1.0\ndocker tag pet-store-db quercinigia/pet-store-db:1.0\nI chosen 1.0 as a tag, but feel free to pick another one.\n 2.3 Logging in You need to log in to your DockerHub account.\n Instructions for Docker Desktop (macOS and Windows)\n macOS users: to see how to log in click here.\n Windows users: to see how to log in click here.\n    Instructions for the Linux VM\nLog in to DockerHub by typing the following command in the terminal (replace YOUR-USERNAME with your actual username).\ndocker login -u YOUR-USERNAME\nWarning\nYou might get a warning that your password will be stored unencrypted. There are methods to prevent this from happening. These methods being out of the scope of this course, the interested reader can look them up at this link.\n   2.4 Pushing the images Once you’re successfully logged in, you can type the following commands in the terminal to push the two images of your application:\ndocker push YOUR-USERNAME/pet-store-web:1.0\ndocker push YOUR-USERNAME/pet-store-db:1.0\nRemember to replace YOUR-USERNAME with your actual username in the commands above.\nAfter the task is completed, verify that the images appear in your Docker registry.\nGood to know\nHere we manually tagged and uploaded the two images. This method becomes quickly annoying when the application consists of more than two images. Another way to go about this task is:\n Specify the image names with your username in file docker-compose.yml. For instance, in my docker-compose.yml I would write:  services: web: build: web image: quercinigia/pet-store-web:1.0 ... db: build: database image: quercinigia/pet-store-db:1.0 ...  Build the application with the following command:  docker-compose build\n Push the images of the application with the following command:  docker-compose push\nThis way, with just two commands we push to the registry all the images of the application, no matter how many they are.\n   3 Introduction to Kubernetes Kubernetes is the most popular orchestrator to date. It is used to manage a multi-service application, usually deployed across multiple hosts in a cluster.\nWhile using Docker Compose, a service corresponds to a Docker image and a service instance to a Docker container.\nAs opposed to that, in Kubernetes the computation unit is a pod, that is a collection of containers. In other words, we don’t reason in terms of containers anymore, but in terms of pods. Of course, a pod can also consist of just one container.\nGood to know\nIn practice, we rarely have to manipulate pods directly in Kubernetes, as there are higher-level objects that manage them. We’ll use these objects in the next sections.\n 3.1 Activate Kubernetes  Instructions for Docker Desktop (macOS and Windows)\nYou need to follow all the instructions documented on this page\nBefore moving on, don’t forget to type the following command to verify that Kubernetes is correctly activated\nkubectl get nodes\nBefore moving on, don’t forget to type the following command to verify that Kubernetes is correctly activated\nkubectl get nodes\nYou should see a node called docker-desktop whose status is set to READY. If the status is NOT READY, just wait few seconds before typing the command again.\nWarning\nThis solution might not be working for you. In that case, disable Kubernetes in Docker Desktop and install minikube, by following these instructions.\n   Instructions for the Linux VM\nIn the Linux VM you’ll find Minikube, a single-node Kubernetes cluster in VirtualBox. Please follow all the instructions:\n Start the cluster, type the following command:  minikube start\n Verify that Kubernetes is correctly activated by typing the following command:  kubectl get nodes\nYou should see a node called minikube whose status is set to READY. If the status is NOT READY, just wait few seconds before typing the command again.\n Open a new terminal and type the command:  minikube tunnel\nWhen prompted to enter a password, just type ENTER. The command will start to produce some output. Leave that terminal open and go back to the previous terminal.\nTunnel\nThe Minikube tunnel is used to create a route to services deployed with type LoadBalancer. If you don’t activate the tunnel, you won’t be able to use these services in the exercises below.\n   3.2 Deploying a pod In order to deploy a pod, we first have to give its specification, basically its name and the containers that compose it with their settings. Similarly to Docker Compose, a pod is specified in a declarative way with a YAML configuration file.\nConsider the following specification.\napiVersion: v1 kind: Pod metadata: name: web-pod labels: app: web-pod spec: containers: - name: web image: nginx:alpine ports: - containerPort: 80 Here is an explanation of the properties in the specification.\n apiVersion. Defines the versioned schema of this representation.\n kind. The type of the resource that we intend to create.\n metadata. The resource metadata. The list of all metadata is specified here.\n spec. The specification of the desired behaviour of the pod. The list of the possible specifications can be found here.\n  Essentially, the previous specification defines a pod with a container that is launched from the image nginx:alpine (a Web server) and listens to ports 80 and 443.\nActivity\n Copy the previous specification to a file named sample-pod.yaml (or any other name of your liking).\n By using the command cd in the terminal, place yourself in the directory where the file sample-pod.yaml is stored.\n Deploy the pod by typing the following command:\n  kubectl create -f sample-pod.yaml\n Verify that the pod is deployed by typing the following command:  kubectl get pods\nThe first time you run the last command, you might see that the pod is not ready yet. You need to wait for the image nginx:alpine to be pulled from DockerHub. Wait few seconds and try the command again until the pod is marked as running.\nYou can also get more information on the running pod (e.g., its assigned IP address) by typing the following command:\nkubectl get pod -o wide web-pod\n Exercise\nExercise 3.1  Open a web browser and type http://localhost:80.\n What do you get? What if you try to use the IP of the pod instead of locahost?\n What should we define in order to fix the problem?     Solution\n The connection is refused both when using localhost and the IP address of the pod.\n In order to connect to the service instance, we need to define a Service object in Kubernetes, that exposes an IP address that client applications can use.\n    The following configuration defines a Service object of type LoadBalancer:\napiVersion: v1 kind: Service metadata: name: nginx-service spec: type: LoadBalancer ports: - port: 8080 targetPort: 80 protocol: TCP name: http selector: app: web-pod Good to know\nA LoadBalancer service is a NodePort service (cf slides 64-65 in Lecture 3) that offers load balancing capabilities. It is intended to expose an IP address that client applications (external to the Kubernetes cluster) can use to access the service.\n Exercise\nExercise 3.2  What is the field selector in the definition of the service? (cf slide 56-57 in Lecture 3)\n   Solution\nThe selector is used internally by Kubernetes to identify the pods that are the instances of the service. If you look at the specification of the pod above, the field metadata contains a field labels. One of the labels is app: web-pod ; the selector matches this label.\n  Exercise\nExercise 3.3  In the specification of the service, what port and targetPort mean?\n   Solution\n port specifies the port number where the service will be available.\n targetPort specifies the port number opened at the pods that are instances of the service.\n    Activity\n Copy and paste the service specification into a file named sample-service.yaml (or any other name of your liking).\n By using the command cd in the terminal, place yourself in the directory where the file sample-service.yaml is stored.\n Deploy the service by typing the following command:\n  kubectl create -f sample-service.yaml\n Verify that the service is deployed by typing the following command:  kubectl get services\nThis command returns all services running in Kubernetes. For each service, you also get a name. In order to only target the service that you’ve just created, simply type the following command:\nkubectl get svc/nginx-service\nYour service’s name is nginx-service (as specified in file sample-service.yml); svc is only the namespace where all Kubernetes services are put.\n Exercise\nExercise 3.4  By looking at the output of the command kubectl get svc/nginx-service, which URL do you need to type in the Web browser in order to access the service?\n   Solution\n The CLUSTER-IP is an IP address that is only visible within the cluster. In other words, only the services running within the cluster can connect to our nginx-service by using this IP address.\n What we need to use is the IP address specified under EXTERNAL-IP.\n   If you’re using Docker Desktop\nEXTERNAL-IP is likely to be localhost or 127.0.0.1\n  If you’re using Minikube in the Linux VM\nEXTERNAL-IP will be whatever IP address assigned to the service.\n  As for the port number, under PORT(S) you should see something like 8080:30548 (the second number is likely different, but it should be something in the range [30000-32767]). The port 30548 is opened on each node of the Kubernetes cluster.  In practice, when we type http://localhost:8080, the load balancer replaces it with the IP address of a node in the cluster, followed by port number 30548. When the kube-proxy on that node receives this request, it forwards it to an instance of the service, even if that instance runs in another node (mechanism of slide 64 in Lecture 3).\n  Warning\nStop the pod and the service before moving on. Here are the commands to do so:\nkubectl delete po/web-pod\nkubectl delete svc/nginx-service\n   4 Kubernetes: deploying an application In this section, we’re going to deploy our pet store in Kubernetes. As a reminder, our application consists of two services: web and db.\nIn order to define an application in Kubernetes, we need to use two types of objects for each service of the application:\n A workload resource that gives the specification of the service, such as the pods that make up the service itself (images, network settings) and metadata, such as the desired number of instances.\n A Service object. As we have seen previously, a service object exposes an IP address that allows client applications, both inside and outside the Kubernetes cluster, to connect to the service.\n  When we define an application in Kubernetes, we rarely, if ever, need to play directly with pods. Instead, we can resort to higher-level objects, called Controllers, for an easier definition of the desired state of the application itself. The type of the controller that we need to use depends on the nature of the service itself: stateless or stateful (slides 16 of Lecture 3.).\nExercise\nExercise 4.1 \n Is the service web of our application stateless or stateful?\n Is the service db of our application stateless of stateful?     Solution\n Stateful service: one that manages permanent data and is bound to that data. Stateless service: one that is not bound to permanent data.  The service web is stateless because it does not have to be tightly bound to the data. In other words, the service web uses the data that is stored in the backend database, but it can be scheduled on any node of the cluster independently of that data.\nThe service db is stateful because it directly manages permanent data.\n  4.1 The web service: deployment For stateless application services, we can use a Deployment for the deployment of a set of identical pods that are launched across several nodes in the Kubernetes cluster.\nDeployment and ReplicaSet\nDeployments and ReplicaSets have been introduced in slides 51-52-53 of the third lecture.\n We here define the specification of a Deployment corresponding to the service web.\napiVersion: apps/v1 kind: Deployment metadata: name: web spec: replicas: 3 selector: matchLabels: app: pets service: web template: metadata: labels: app: pets service: web spec: containers: - image: quercinigia/pet-store-web:1.0 name: web ports: - containerPort: 3000 protocol: TCP Here is the explanation of the specification:\n A Deployment named web is created, as indicated by the field metadata.name.\n The Deployment creates three replicated pods, as indicated by the field spec.replicas.\n The Deployment considers that the pods with both labels app: pets and service: web are part of the deployment. This is indicated by the field spec.selector.matchLabels. This field is used to let the Deployment know how to find its pods.\n The configuration of the pods that are part of the Deployment is given in the field spec.template and its subfields.\n Each pod of the Deployment is given labels app: pets and service: web. This is indicated by the field spec.template.metadata.labels. Note that here we specify exactly the same values as in spec.selector.matchLabels. This field is used to give pods labels so that they can be identified and located in Kubernetes.\n Each pod has exactly one container, named web, run from the image quercinigia/pet-store-web:1.0 stored in the DockerHub. The container listens on port 3000 and uses the TCP protocol. This is specified in the field spec.template.spec.containers.\n  Activity\n Copy and paste the previous specification to a new file web-deployment.yaml (or any name of your liking). Make sure that you replace the image quercinigia/pet-store-web:1.0 with the one that you pushed to your DockerHub registry.\n Use the command cd in the terminal to position yourself in the directory where the file web-deployment.yaml is stored.\n Deploy this Deployment in Kubernetes by typing the following command:\n  kubectl create -f web-deployment.yaml\n Exercise\nExercise 4.2  Type the following command:\nkubectl get all\nWhich objects have been created following the creation of the Deployment?\n   Solution\nWe can clearly see three types of objects:\n Three pods, that correspond to the three replicas that we specified in the configuration.\n One deployment. Note that the 3/3 indicates that the deployment has 3 identical pods, of which 3 are running.\n One ReplicaSet. The Deployment creates a ReplicaSet, that is the actual object that controls the three pods. The Deployment provides some additional services (i.e., updates) on top of a ReplicaSet.\n    Exercise\nExercise 4.3  Get the name of one of the running pods and kill it by using the following command\nkubectl delete name-of-pod\nIf the command hangs in the terminal, feel free to type Ctrl-C to get back control of the terminal.\nType again following command:\nkubectl get all\nHow many pods do you see? Is it surprising?\n   Solution\nIf we type the command right after deleting the pod, it is likely that we’ll see four pods, one that is terminating and another one that is running. Try to type the command until you see three running pods.\nThis is not surprising. If we kill the pod, the orchestrator detects a deviation from the desired state (which is, we want three replicas) and reschedules immediately another pod. This is what we mean by a self-healing system. This is one of the major roles of an orchestrator.\n   4.2 The web service: service Now we need to define a Service in order to expose the web service to the public. Here is the definition:\napiVersion: v1 kind: Service metadata: name: web spec: type: LoadBalancer ports: - port: 8080 targetPort: 3000 protocol: TCP selector: app: pets service: web Exercise\nExercise 4.4  Describe the specification of this service.\n   Solution\n We create a service named web. This indicated in the field metadata.name.\n The service has type LoadBalancer. This is indicated in the field spec.type.\n The service listens on port 8080 and uses the TCP protocol. Each service instance (i.e., pod) listens on port 3000. This is indicated in the field spec.ports.\n The instances of the service (i.e., the pods) are those with labels app: pets and service: web. This is indicated in the field spec.selector.\n    Activity\n Copy and paste the previous specification to a new file web-service.yaml (or any name of your liking).\n Use the command cd in the terminal to position yourself in the directory where the file web-service.yaml is stored.\n Create the service with the following command:\n  kubectl create -f web-service.yaml\n Verify that the service has been created with the following command:  kubectl get services\n Locate the external IP (let’s call it EXTERNAL-IP) of the web service and type the URL http://EXTERNAL-IP:8080 in your Web browser. You should see a Web page where the phrase Pet store appears.    4.3 The db service: StatefulSet Kubernetes has defined a special type of ReplicaSet for stateful services that is called StatefulSet.\nLet’s define a StatefulSet to give the specification of the db service.\napiVersion: apps/v1 kind: StatefulSet metadata: name: db spec: selector: matchLabels: app: pets service: db serviceName: db template: metadata: labels: app: pets service: db spec: containers: - image: quercinigia/pet-store-db:1.0 name: db ports: - containerPort: 5432 volumeMounts: - mountPath: /var/lib/postgresql/data name: pets-data volumeClaimTemplates: - metadata: name: pets-data spec: accessModes: - ReadWriteOnce resources: requests: storage: 100Mi By now you shouldn’t have any problem understanding the meaning of the fields in this specification. The fields are also documented in the official Kubernetes documentation. Two points are worth a comment. First, the specification of a StatefulSet needs an attribute serviceName that indicates the name of the service that is responsible for the network identify of the pods in the set. That attribute is mandatory. This is listed as one of the limitations of a StatefulSet. Another novelty is the field volumeClaimTemplates. It describes additional constraints on the volumes defined in the specification, in this case the volume named pets-data (where PostgreSQL keeps the data). In particular, two claims are given:\n The access mode ReadWriteOnce means that the volume can be mounted as read-write by a single node in the Kubernetes cluster. Access modes are documented here.\n We request at least 100MB of storage for the database.\n  Activity\n Copy and paste the previous specification to a new file db-stateful-set.yaml (or any name of your liking). Make sure that you replace the image quercinigia/pet-store-db:1.0 with the one that you pushed to your DockerHub registry.\n Use the command cd in the terminal to position yourself in the directory where the file db-stateful-set.yaml is stored.\n Deploy this StatefulSet in Kubernetes by typing the following command:\n  kubectl create -f db-stateful-set.yaml\n Exercise\nExercise 4.5  Type the command:\nkubectl get all\nWhich objects have been created when you deployed the StatefulSet?\n   Solution\n A pod (likely to be called pod/db-0)\n A new StatefulSet that governs the pod.\n  Note that the StatefulSet has only one pod, which is normal, since we didn’t specify a higher number of replicas.\n  Exercise\nExercise 4.6  Open the Web browser and type the following URL:\n If you’re using Docker Desktop\nhttp://localhost:8080/pet\n  If you’re using Minikube on the Linux VM\nhttp://minikube-ip:8080/pet\nwhere you’ll replace minikube-ip with the external IP address associated with the web service.\n Right after, type the command kubectl get all. What do you observe? Can you explain the reason?\n   Solution\nWe cannot access the application. If you type the command kubectl get all quickly, you should show that the three pods that are instances of the service web are in an error state. If you were too slow, you should see that the restart count of each pod has changed. This means that the pods have been restarted because of an error.\nWhat happens here is that we launched the database, but we didn’t create the Service that lets the clients access the database.\n  In the output of the command get kubectl all, look at the names of the pods that are instances of the web service. Take the name of any these pods, and put it in place of NAME-OF-POD in the following command:\nkubectl logs NAME-OF-POD --previous\nExercise\nExercise 4.7  Does the output of the previous command confirm the explanation given in the previous question?\n   Solution\nYes, we can clearly read ENOTFOUND db db:5432. This means that Kubernetes cannot resolve the name db to an IP address.\n    5 The db service: Service object From the above observations, we understand that we need to define a service to expose the database to the clients.\nExercise\nExercise 5.1  Should the db service be accessible to client applications that are external to the Kubernetes cluster?\n   Solution\nNo, this component is the backend of the application. The only client that needs to access the database is the frontend, that is the web service, that runs inside the cluster.\n  Exercise\nExercise 5.2  Given the answer to the previous question, what should the type of this service be?\n   Solution\nClusterIP; this is the type of a service that does not need to be exposed to the outside world.\n  Exercise\nExercise 5.3 \nWrite the specification of the db service in a file named db-service.yaml (or any other name of your liking).\nCaution. In the file db-stateful-set.yaml the field spec.serviceName indicates the name that the service must have.\n   Solution\napiVersion: v1 kind: Service metadata: name: db spec: type: ClusterIP ports: - port: 5432 protocol: TCP selector: app: pets service: db   Activity\n Deploy the service by typing the following command:  kubectl create -f db-service.yaml\n Verify that the service has been created with the following command:  kubectl get all\n Verify that you can reach the application at http://localhost:8080/pet (Minikube users: replace localhost with the external IP address associated to the web service!). It might happen that the database service is not ready yet, and so you’ll get a connection error. Just wait and retry later.   5.1 Shutting down the application After you’re done with the application, you can shut it down with the following commands:\nkubectl delete svc/web\nkubectl delete svc/db\nkubectl delete deploy/web\nkubectl delete statefulset/db\nThe order in which you type these commands doesn’t matter.\nIf you type multiple times the command:\nkubectl get all\nyou should see that the resources progressively disappear.\n 5.2 Conclusion In the previous exercises, we deployed an application with two services, for which we had to create four files and type as many commands. For larger applications this gets a bit annoying. We can write all the definitions in a single file (e.g., pets.yaml) where each specification is terminated by - - -.\nHere is an example, where we write the specification of the Service and Deployment associated with the service web.\napiVersion: v1 kind: Service metadata: name: web spec: type: LoadBalancer ports: - port: 8080 targetPort: 3000 protocol: TCP selector: app: pets service: web --- apiVersion: apps/v1 kind: Deployment metadata: name: web spec: replicas: 3 selector: matchLabels: app: pets service: web template: metadata: labels: app: pets service: web spec: containers: - image: quercinigia/pet-store-web:1.0 name: web ports: - containerPort: 3000 protocol: TCP   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8f5b5b01a686c8fdb871e8a71fba8ba3","permalink":"/courses/cloud-computing/tutorials/tutorial-kube/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/cloud-computing/tutorials/tutorial-kube/","section":"courses","summary":"Text of the lab assignment on multi-service applications","tags":null,"title":"Multi-service applications","type":"docs"},{"authors":null,"categories":null,"content":" Objectives In this lab assignment you will:\n Gain a deeper understanding of the Docker networking model.\n Build and deploy a multi-service application with Docker Compose.\n Deploy a multi-service application on a local Kubernetes cluster.\n Deploy a multi-service application on a Kubernetes cluster in Microsoft Azure.\n   Submission  Only one submission per group.\n In order to submit your work, you need to answer all the questions that you find here. Each question corresponds to an exercise that you find in this page.\n You can answer either in French or in English. Your pick!\n Deadline: 13 May 2022, 23h59\n  Warning\nThis lab assignment is evaluated. You won’t have access to the solutions. You can ask questions anytime (even after the Friday 29 april lab session), should you run into problems with the implementation of the assignment.\n  1 Docker networking model We developed a simple chat room in Python that you can download here. The code has been adapted from this GitHub project.\nParticipants use a client program to connect to the chat room; the chat room is managed by a server application that receives the client connections and forwards the messages between the users. The archive contains the following files:\n client.py. Implementation of the chat room client. server.py. Implementation of the chat room server. utils.py. Library with utility functions used in both client.py and server.py.  The application is written in Python and it requires Python 3.7. The application doesn’t need any third-party library, the packages included in a minimal Python environment are enough.\nWarning\nOnly one instance of the server is running. Several instances of the client can run at the same time. Client instances might not be running on the same host.\n In order to execute the server, we need to pass the port number as a parameter. In order to execute the client, we need to pass as parameters the IP address of the server and the port which the server listens to.   Exercise\nExercise 1.1 \nIs a single Docker image for this application enough? Justify your answer.\n Given your answer to the previous question, how many Docker images do you need to create?    Exercise\nExercise 1.2 Build the image(s) for the application. For each image:\nUpload the Dockerfile to Edunao. Write the exact command that you used to build the image.   Warning\nThe size of the images should be kept as small as possible. Remember to include in the images only what you need to build and run the application.\n  Good to know\nIf you need to inspect the file system of an image that you create (e.g., to verify that the files that you copied are actually there), you can open a terminal in the image by using the following command:\ndocker run -it --entrypoint sh IMAGE_NAME\n Exercise\nExercise 1.3  If you built more than one image:\nDo they have some common layers?\n If so, is it something that has an impact on the build time and how?    1.1 Client and server on the same network We want to execute:\n One instance of the server.\n Two instances of the client.\n  The server, as well as the clients, will run in Docker containers attached to the same network.\nExercise\nExercise 1.4  We want to make sure that:\nThe server and the clients can communicate with each other.\n Other Docker containers cannot communicate neither with the server nor with the clients.\n  How can you satisfy both requirements in Docker? Explain your solution and justify it.\n  Exercise\nExercise 1.5  Execute the server and the two clients by using the network configuration that you explained in the previous exercise.\n The server writes messages on the terminal. Remember to launch the container with the appropriate options in order to actually see those messages.\n Users need to interact with the client, that is: read and write messages. Remember to launch the container with the appropriate options in order to actually see those messages.\n  Write the exact commands that you typed for both configuring the network and launching the server and the clients. Explain these commands.\n  Shut down the application!\nShut down both the clients and the server before you move on.\n On the client-side, type #quit at any moment to exit the chat room.\n Type Ctrl-C to stop the server.\n    1.2 Client and server on different networks We want to execute:\n One instance of the server.\n Two instances of the client.\n  However, neither client is connected to the same network as the server.\nExercise\nExercise 1.6  Why can’t you launch the containers with the same settings as in Exercise 1.5?\nWhat do you propose as a solution instead?\nHINT. You might want to look at slide 64 of the second lecture.\n  Exercise\nExercise 1.7  Execute the server and the two clients by making sure that neither client is connected to the same network as the server.\nWrite the exact commands that you typed for both configuring the network and launching the server and the clients. Explain these commands.\n  Shut down the application!\nShut down both the clients and the server before you move on.\n On the client-side, type #quit at any moment to exit the chat room.\n Type Ctrl-C to stop the server.\n     2 Multi-service application: Docker Compose We intend to build and deploy the application TripMeal by using Docker Compose. You can download the application here. The source code has been readapted from this GitHub repository.\nThe downloaded file is an archive. Extracting the archive will create a folder named tripmeal_sujet.\nExercise\nExercise 2.1  Explain the structure of the content of the folder tripmeal_sujet.\n  Exercise\nExercise 2.2  How many services does the application have? Which technologies (i.e., programming languages, databases) are used in each service?\n  The Dockerfile in the directory db is already implemented.\nYour goal here is to write a Dockerfile in the directory web.\nIn case you get Exec format error\nIn order to avoid an Exec format error when you launch the application, you’ll need to add to your Dockerfile an instruction:\nRUN chmod -x path_to_file_app\nwhere path_to_file_app is the path to the file app.py inside the image.\n Exercise\nExercise 2.3  Write the Dockerfile in the directory web. You need a Python 3.7 environment to run the application.\nUpload the Dockerfile to Edunao.\n  In the folder tripmeal_sujet, you’ll find a file named tripmeal.env. It contains the definition of environment variables that are used in the application.\nExercise\nExercise 2.4  Looking at the environment variables defined in file tripmeal.env:\n What does SERVER_PORT refer to? A port opened at one of the host network interfaces or a port opened at one of the container’s network interfaces?\n Which environment variable tells you the name to assign to the database service?\n  Feel free to answer this question after deploying the application.\n  Exercise\nExercise 2.5  What do you need to define in file docker-compose.yml to enable the communication between the different services?\n  Exercise\nExercise 2.6  Which base image is used to build a container for the database? Where is this base image stored? Can you find the documentation of this image in the Internet? Write down the link to the documentation page in the answer.\n  Exercise\nExercise 2.7  By looking at the documentation of the database image, what do you need to define in docker-compose.yml to make sure that the data is not deleted once the application is taken down?\n  You’re finally ready to complete the file docker-compose.yml.\nWarning\nRemember that you need to pass the environment variables to your application.\nAs a documentation of Docker Compose you can use:\n The examples that we’ve seen together.\n The overview presented on the official Docker website.\n You can also find the full specification of Compose here.\n   Exercise\nExercise 2.8  Write the file docker-compose.yml. Build, deploy and test your application.\nUpload the file docker-compose.yml to Edunao.\n  Exercise\nExercise 2.9  Use Docker Compose to push all the images that you built in this section to your DockerHub registry.\nIn the answer to this exercise write:\n the command that you execute to push the images. the link to the uploaded images.    Shut down the application!\nShut down both the application before you move on.\n  3 Local Kubernetes cluster We intend to deploy the application TripMeal on a local Kubernetes cluster (either Docker Desktop or Minikube).\nExercise\nExercise 3.1  Specify which services are stateless and which ones are stateful. Justify your answer.\n  Exercise\nExercise 3.2  For each service of the application TripMeal, specify the Kubernetes objects that you need to create and their types. Justify your answers.\n  Help\nIn order to write the specification of each object, you can refer to the examples that we discussed together in the second tutorial. You can also refer to the API documentation on the Kubernetes website.\n Exercise\nExercise 3.3  For each Kubernetes object:\nConfigure. Write a Yaml configuration file. Remember that you need to pass the application the environment variables.\n Create. Create the object in Kubernetes with kubectl.\n Analyze. Execute the command kubectl get all and explain in detail which objects appear in the output as the result of step 2.\n    Activity\nPlay with the application in order to verify that everything works as expected.\n Shut down the application!\nShut down the application by removing all the Kubernetes objects.\n Exercise\nExercise 3.4  Create a new file called tripmeal.yml that contains the definition of all the Kubernetes objects of the application, as we have seen in the conclusion of the tutorial 2.\nUpload this file to Edunao.\n   4 Kubernetes cluster on Microsoft Azure You’re now going to create a Kubernetes cluster on Microsoft Azure and deploy TripMeal on that cluster.\nWarning\nIn order to perform this activity, you need a student subscription on Microsoft Azure. If you haven’t activated it yet:\n Connect to this webpage.\n Click on Start free.\n Sign in by using your CentraleSupélec credentials.\n Follow the instructions.\n   During this activity, you’ll need to answer some questions that encourage you to gain a deeper knowledge of the Azure platform and better understand the commands that you type. Feel free to read the documentation on the Azure platform in order to answer the questions.\n4.1 Login to Azure through CLI Warning\nIf you get “command not found” when you type az, it means that you haven’t installed the Azure CLI yet. You’ll find more information on the Edunao course page.\nMake sure you run version 2.25 or higher of the Azure CLI, by typing:\naz --version If you use a VM with Multipass you’ll need to install the Azure CLI with the following command:\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash If you use a VM either with Multipass or with VirtualBox you’ll need to re-install kubectl:\n Type the following command so as the command kubectl does not refer to minikube kubectl anymore:  unalias kubectl  Type the following command to install a new version of kubectl:  sudo az aks install-cli  Whether you’re on Windows, macOS or Linux, you need to open a terminal.\nIn order to log in to your Azure account, type the following command:\naz login A Web page will open in your default Web browser, where you can type your username and password (your CentraleSupélec credentials). After authenticating your Azure account, you can go back to the terminal, where you should see some information about your account, such as:\n[ { \u0026quot;cloudName\u0026quot;: \u0026quot;AzureCloud\u0026quot;, \u0026quot;homeTenantId\u0026quot;: \u0026quot;\u0026lt;id\u0026gt;\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;\u0026lt;id\u0026gt;\u0026quot;, \u0026quot;isDefault\u0026quot;: true, \u0026quot;managedByTenants\u0026quot;: [], \u0026quot;name\u0026quot;: \u0026quot;Azure for Students\u0026quot;, \u0026quot;state\u0026quot;: \u0026quot;Enabled\u0026quot;, \u0026quot;tenantId\u0026quot;: \u0026quot;\u0026lt;id\u0026gt;\u0026quot;, \u0026quot;user\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;email-address\u0026gt;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;user\u0026quot; } } ]  4.2 Deploy and use Azure Container Registry When we run TripMeal on a local Kubernetes cluster, we assumed that our computer could have a direct access to the Internet and, therefore, to the DockerHub registry, where we could pull the images of the TripMeal services. When we run a containerized application in production, we cannot make this assumption as the production servers have often no direct access to the Internet.\nExercise\nExercise 4.1  In your view, why isn’t it a good idea to have production servers directly connected to the Internet?\n  We need to place the images in a container registry that is in the same context as our production servers. Since we’re going to run the application on Azure, we can use the Azure Container Registry (ACR).\n4.2.1 Registry creation First, we need to create a resource group.\nExercise\nExercise 4.2  What is a resource group in Azure and how is it useful?\n  The command to create a new resource group is the following (replace RES_GRP_NAME with a name of your choice).\naz group create --name RES_GRP_NAME --location eastus (\\#exr:unnamed-chunk-23)  In the previous command, what does the ``location`` refer to? Briefly describe this notion (presented in [Lecture 1](https://centralesupelec.edunao.com/pluginfile.php/135424/mod_resource/content/5/cm1-slides.pdf){target=\"_blank\"}). \\EndKnitrBlock{exercise} ::: -- Next, we need to create a container registry with the following command (replace RES_GRP_NAME with the name of your resource group and REG_NAME with a name of your choice for the registry).\naz acr create --resource-group RES_GRP_NAME --name REG_NAME --sku Basic Exercise\nExercise 4.3  In the previous command, what does sku refer to? Feel free to look up on the Azure website to find the answer.\n   4.2.2 Registry login After creating the registry, we can log into it with the following command:\naz acr login --name REG_NAME  4.2.3 Image tagging We’re almost ready to push the images that compose the application TripMeal to the registry. In order to do that, we need to tag (i.e., rename) our images so that their names are preceded by the login server name of the registry.\nIn order to get the name of the login server name (that we denote here as acrloginserver) of your registry, you can type the following command:\naz acr list --resource-group RES_GRP_NAME --query \u0026quot;[].{acrLoginServer:loginServer}\u0026quot; --output table Your acrloginserver will be something like xxx.azurecr.io.\nExercise\nExercise 4.4  Tag the images that correspond to the services of the application TripMeal so that their name is similar to: acrloginserver/nameofimage:latest\nWrite the exact Docker command that you use to tag the images.\n   4.2.4 Pushing the images We can push the images with the following command (use your image name instead of xxx.azurecr.io/imagename:latest).\ndocker push xxx.azurecr.io/imagename:latest Make sure to type this command for each image that you want to push.\nWarning\nIt might take few minutes before the images are completely pushed to the registry.\n Finally, verify that the images are actually in the registry with the following command:\naz acr repository list --name REG_NAME --output table Alternatively, you can connect to your Azure portal and visually browse your resources.\n  4.3 Deploy a Kubernetes cluster We now deploy a Kubernetes cluster on Azure.\n4.3.1 Cluster creation We create the cluster with the following command (replace CLUSTER_NAME with a name of your choice. As before, RES_GRP_NAME is the name of your resource group and REG_NAME is the name of the container registry).\naz aks create \\ --resource-group RES_GRP_NAME \\ --name CLUSTER_NAME \\ --node-count 2 \\ --generate-ssh-keys \\ --attach-acr REG_NAME The cluster will take a while to start. Time for a coffee! But before, answer the following question!\nExercise\nExercise 4.5  Can you tell the meaning of the options in the previous command?\n   4.3.2 Connect to the cluster We can configure kubectl to connect to the newly created cluster. You need to type the following command:\naz aks get-credentials --resource-group RES_GRP_NAME --name CLUSTER_NAME Now, your Kubernetes cluster should be visible locally. To verify it, type the following command:\nkubectl config get-contexts Here context refers to the Kubernetes clusters that kubectl has access to. The Kubernetes cluster that you created on Azure should be visible in the output; an asterisk should appear in front of its name, indicating that it is the current context (that is the Kubernetes cluster being currently referenced by kubectl).\nType the following command:\nkubectl get nodes You should see that the Kubernetes cluster has two nodes.\n  4.4 Deploy the application We’re almost done! The images are in the registry, the Kubernetes cluster is up and running. The only missing piece of the puzzle is our application TripMeal.\nFirst thing to do is to slightly modify the file tripmeal.yml that you created at the end of the previous section.\nExercise\nExercise 4.6  Look at the names of the images of each service in that file. How must these names change? Modify the file accordingly (no need to upload it on Edunao).\n  It is the moment of truth! Deploy your application by typing the following command:\nkubectl apply -f tripmeal.yml Look at Kubernetes objects created after this command:\nkubectl get all Get the external IP address of the web service and try to connect to the application, in the same way you did in the previous section.\nIf you can play with the application like you did in your local deployment it means that you reached the conclusion of this assignment! Bravo!\nExercise\nExercise 4.7  Submit a video like that the one that you can see here.\nThe video must clearly show that:\n You’re connected to your Azure portal (Email address on the top right corner of the portal).\n All the passages that you see in the sample video: you need to show the public IP address of the application that you deployed, use that address to connect to your application and play with the application to show that it works correctly.\n    The next exercise is optional. Before you leave, make sure to read the conclusion of this document!!.\nExercise\nExercise 4.8  The title of this exercise is Cerise sur le gâteau (aka, this is optional!).\nAt this point, you can connect to TripMeal by using an IP address. It would be nice if you could use a URL, like in the real websites. Can you find a way to assign a URL to your web service? Describe your procedure.\nYou need a bit of Googling here….\n    Conclusion Make sure you follow these instructions:\n Take down your application in Kubernetes by using the following command:  kubectl delete -f tripmeal.yml  Change the context of the kubectl command so that it points back to a local Kubernetes cluster. Type the following command, where CONTEXT_NAME will be docker-desktop or minikube, depending on which local Kubernetes cluster you use.  kubectl config use-context CONTEXT_NAME  Destroy all the resources linked to the application TripMeal on Microsoft Azure, otherwise you’ll get billed even if you don’t use them! You can destroy all the resources by simply deleting the resource group to which they belong. You can do it through the Azure portal or by typing the following command (replace RES_GRP_NAME with the name of the resource group that you intend to remove).  az group delete --name RES_GRP_NAME  You can check the balance of your Azure credit here.\n You can stop Docker and Kubernetes if you don’t need it anymore.\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"427e5cadc0e40c7a1fa326dad07bcb5a","permalink":"/courses/cloud-computing/labs/kube-lab/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/cloud-computing/labs/kube-lab/","section":"courses","summary":"Text of the lab assignment on Docker + Kubernetes","tags":null,"title":"Multi-service applications in the Cloud","type":"docs"},{"authors":null,"categories":null,"content":" 1 Computing averages We are given a dataset that contains the average monthly temperature measurements over the course of some years. More precisely, the dataset is stored in a CSV file, where each row corresponds to a monthly measurement and the columns contain the following values: year, month, average temperature in the month.\n1980,1,5 1980,2,2 1980,3,10 1980,4,14 1980,5,17 .... 1981,1,2 1981,2,1 1981,3,3 1981,4,10 .... We intend to get the average monthly temperature for each year.\nExercise\nExercise 1.1  Write a MapReduce algorithm that generates key-value pairs \\((year, average\\_temperature)\\).\n   Solution\nmap: \\((year, month, temperature) \\rightarrow (year, temperature)\\)\nreduce: \\((year, temps) \\rightarrow\\) \\((year, sum(temps)/len(temps))\\)\n \\(temps\\) is the list of all temperatures in the same \\(year\\). \\(sum(temps)\\) sums all the elements in the list \\(temps\\). \\(len(temps)\\) gives the length of the list \\(temps\\).    Suppose now that we have a large CSV file stored in a distributed file system (e.g., HDFS), containing a series of measurements in the format “Year, Month, Day, Minute, Second, Temperature”. We can have up to one measurement per second in some years. Like before, we’d like to compute key-value pairs (year, average_temperature) by using a MapReduce algorithm.\nExercise\nExercise 1.2  What is the maximum number of measurements in a year?\n   Solution\nSince we can have up to one measurement per second, the maximum number of measurements \\(M_{max}\\) for a certain year is given by the following formula:\n\\[ M_{max} = 365 \\times 24 \\times 60 \\times 60 \\approx 31.5 \\times 10^6 \\]\n  Exercise\nExercise 1.3  Considering the answer to the previous question, discuss the efficiency of the first implementation of the algorithm.\n   Solution\nSince there might be up to 31 million values associated with a key, the bottleneck of the computation would be the shuffle operation, since we need to copy a high number of (key,value) pairs from the mappers to the reducers.\nAlso, a reducer might have to loop over a huge list of values in order to compute their average.\n  Exercise\nExercise 1.4  Based on the answer to the previous question, propose a better implementation to handle the CSV file.\n   Solution\nmap: \\((year, mo, d, mi, sec, temperature) \\rightarrow (year, temperature)\\)\ncombine: \\((year, temps) \\rightarrow\\) \\((year, (sum(temps), len(temps)))\\)\nreduce: \\((year, [(s_i, l_i),\\ i=1\\dots n]) \\rightarrow\\) \\((year, \\frac{\\sum_{i=1}^n s_i}{\\sum_{i=1}^n l_i})\\)\n \\(temps\\) is the list of all temperatures in the same \\(year\\). \\(sum(temps)\\) sums all the elements in the list \\(temps\\). \\(len(temps)\\) gives the length of the list \\(temps\\).     2 Common friends in a social network Consider a social network described by a graph encoded in a text file. Each line of the file is a list of identifiers separated by commas. For instance, the line \\(A,B,C,D\\) means that \\(A\\) is friend with \\(B\\), \\(C\\) and \\(D\\). An excerpt of the file looks like as follows:\nA,B,C,D B,A,D C,A,D D,A,B,C ... We suppose that the friendship relation is symmetric: \\((A, B)\\) implies \\((B, A)\\).\nWe want to obtain the list of the common friends for each pair of individuals:\n(A, B), [D] (A, C), [D] (A, D), [B, C] (B, C), [D] (B, D), [A] (C, D), [A] As an additional constraint, we want to represent a couple only once and avoid to represent the symmetric couple. In other words, if we output \\((A, B)\\), we don’t want to output \\((B, A)\\).\nExercise\nExercise 2.1  Propose a MapReduce implementation to find the common friends in a social network satisifying the given constraints.\n   Solution\nmap: \\((x, F) \\rightarrow [((u, v), x)\\ \\forall (u, v) \\in F\\ |\\ u \u0026lt; v ]\\)\nreduce: \\([(u, v), LCF] \\rightarrow [(u, v), LCF]\\)\nwhere:\n \\(x\\) is the first item in a line. \\(F\\) is the list containing the items in a line except the first one (\\(x\\)’s friends). \\(LCF\\) is the list of all individuals that are friends with both \\(u\\) and \\(v\\).  We note that the reduce function is the identity.\n  \u0026lt;!– # Creating an inverted index\nWe have a collection of \\(n\\) documents in a directory and we want to create an inverted index, one that associates each word to the list of the files the word occurs in. More precisely, for each word, the inverted index will have a list of the names of the documents that contain the word.\nExercise\nExercise 2.2  Propose a MapReduce implementation to create an inverted index over a collection of documents.\n   Solution\nThe input to the map will be a key-value pair, where the key is the name of a file \\(f\\) and the value is the content \\(C\\) of the file.\nmap: \\((f, C) \\rightarrow [(w, f)\\ \\forall w \\in C]\\)\nreduce: \\((w, L) \\rightarrow (w, L)\\)\nwhere \\(L\\) is the list of the files containing the word \\(w\\).\nWe note that the reduce function is the identity.\nNote also that in the map function we can add instructions to preprocess the text. For example, we can eliminate some words that are not useful in the index (e.g., the stopwords) or remove special symbols.\n   3 Computing average and standard deviation We consider again the large CSV file with a series of measurements in the format “Year, Month, Day, Minute, Second, Temperature”. We now intend to generate a series of key-value pairs (year, (avg_temperature, std_deviation)).\nWe can express the standard deviation of \\(n\\) values \\(x_i\\) (\\(1 \\leq i \\leq n\\)) with two different equations.\nThe first equation is as follows:\n\\[ \\sigma = \\sqrt{\\frac{\\sum_{i=1}^n (x_i - \\overline{x})^2}{n}} \\]\nThe second equation is as follows:\n\\[ \\sigma = \\sqrt{\\overline{x^2} - \\overline{x}^2} = \\sqrt{\\frac{\\sum_{i=1}^n (x_i)^2}{n} - \\Bigg(\\frac{\\sum_{i=1}^n x_i}{n}\\Bigg)^2} \\]\nExercise\nExercise 3.1  Which equation of the standard deviation is more appropriate in a Map-Reduce algorithm? Why?\n   Solution\nThe second equation is more appropriate because it allows the computation of the sum of the elements and of the square of the elements step by step by using map and combine together.\nInstead, if we use the first equation, we need first to compute the average and then use it to compute the variance.\n  Exercise\nExercise 3.2  Propose a MapReduce implementation to compute the average and the standard deviation of the temperatures for each year.    Solution\nmap: \\((year, mo, d, mi, sec, temperature) \\rightarrow (year, temperature)\\)\ncombine: \\((year, T) \\rightarrow\\) \\((year, (sum(T), sum(T^2), len(T)))\\)\nreduce: \\((year, [(s_{i}, sq_{i}, l_{i}),\\ i=1\\dots n]) \\rightarrow\\) \\((year, (\\mu, \\sigma))\\)\nwhere:\n \\(T\\) is the list of all temperatures in the same \\(year\\). \\(sum(T)\\) sums all the elements in the list \\(T\\). \\(T^2 = [x^2 | x\\in T]\\) \\(len(T)\\) gives the length of the list \\(T\\). \\(\\mu = \\sum_{i=1}^n s_{i}/ \\sum_{i=1}^n l_{i}\\) \\(\\sigma = \\sqrt{ (\\sum_{i=1}^n sq_{i}/ \\sum_{i=1}^n l_{i}) - \\mu^2 }\\)     ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"0cbba47479da04631bd931db00bad3ff","permalink":"/courses/bdia/tutorials/map-reduce/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia/tutorials/map-reduce/","section":"courses","summary":"Description of the MapReduce tutorial.","tags":null,"title":"MapReduce","type":"docs"},{"authors":null,"categories":null,"content":" 1 Computing averages We are given a dataset that contains the average monthly temperature measurements over the course of some years. More precisely, the dataset is stored in a CSV file, where each row corresponds to a monthly measurement and the columns contain the following values: year, month, average temperature in the month.\n1980,1,5 1980,2,2 1980,3,10 1980,4,14 1980,5,17 .... 1981,1,2 1981,2,1 1981,3,3 1981,4,10 .... We intend to get the average monthly temperature for each year.\nExercise\nExercise 1.1  Write a MapReduce algorithm that generates key-value pairs \\((year, average\\_temperature)\\).\n   Solution\nmap: \\((year, month, temperature) \\rightarrow (year, temperature)\\)\nreduce: \\((year, temps) \\rightarrow\\) \\((year, sum(temps)/len(temps))\\)\n \\(temps\\) is the list of all temperatures in the same \\(year\\). \\(sum(temps)\\) sums all the elements in the list \\(temps\\). \\(len(temps)\\) gives the length of the list \\(temps\\).    Suppose now that we have a large CSV file stored in a distributed file system (e.g., HDFS), containing a series of measurements in the format “Year, Month, Day, Minute, Second, Temperature”. We can have up to one measurement per second in some years. Like before, we’d like to compute key-value pairs (year, average_temperature) by using a MapReduce algorithm.\nExercise\nExercise 1.2  What is the maximum number of measurements in a year?\n   Solution\nSince we can have up to one measurement per second, the maximum number of measurements \\(M_{max}\\) for a certain year is given by the following formula:\n\\[ M_{max} = 365 \\times 24 \\times 60 \\times 60 \\approx 31.5 \\times 10^6 \\]\n  Exercise\nExercise 1.3  Considering the answer to the previous question, discuss the efficiency of the first implementation of the algorithm.\n   Solution\nSince there might be up to 31 million values associated with a key, the bottleneck of the computation would be the shuffle operation, since we need to copy a high number of (key,value) pairs from the mappers to the reducers.\nAlso, a reducer might have to loop over a huge list of values in order to compute their average.\n  Exercise\nExercise 1.4  Based on the answer to the previous question, propose a better implementation to handle the CSV file.\n   Solution\nmap: \\((year, mo, d, mi, sec, temperature) \\rightarrow (year, temperature)\\)\ncombine: \\((year, temps) \\rightarrow\\) \\((year, (sum(temps), len(temps)))\\)\nreduce: \\((year, [(s_i, l_i),\\ i=1\\dots n]) \\rightarrow\\) \\((year, \\frac{\\sum_{i=1}^n s_i}{\\sum_{i=1}^n l_i})\\)\n \\(temps\\) is the list of all temperatures in the same \\(year\\). \\(sum(temps)\\) sums all the elements in the list \\(temps\\). \\(len(temps)\\) gives the length of the list \\(temps\\).     2 Common friends in a social network Consider a social network described by a graph encoded in a text file. Each line of the file is a list of identifiers separated by commas. For instance, the line \\(A,B,C,D\\) means that \\(A\\) is friend with \\(B\\), \\(C\\) and \\(D\\). An excerpt of the file looks like as follows:\nA,B,C,D B,A,D C,A,D D,A,B,C ... We suppose that the friendship relation is symmetric: \\((A, B)\\) implies \\((B, A)\\).\nWe want to obtain the list of the common friends for each pair of individuals:\n(A, B), [D] (A, C), [D] (A, D), [B, C] (B, C), [D] (B, D), [A] (C, D), [A] As an additional constraint, we want to represent a couple only once and avoid to represent the symmetric couple. In other words, if we output \\((A, B)\\), we don’t want to output \\((B, A)\\).\nExercise\nExercise 2.1  Propose a MapReduce implementation to find the common friends in a social network satisifying the given constraints.\n   Solution\nmap: \\((x, F) \\rightarrow [((u, v), x)\\ \\forall (u, v) \\in F\\ |\\ u \u0026lt; v ]\\)\nreduce: \\([(u, v), LCF] \\rightarrow [(u, v), LCF]\\)\nwhere:\n \\(x\\) is the first item in a line. \\(F\\) is the list containing the items in a line except the first one (\\(x\\)’s friends). \\(LCF\\) is the list of all individuals that are friends with both \\(u\\) and \\(v\\).  We note that the reduce function is the identity.\n   3 Computing average and standard deviation We consider again the large CSV file with a series of measurements in the format “Year, Month, Day, Minute, Second, Temperature”. We now intend to generate a series of key-value pairs (year, (avg_temperature, std_deviation)).\nWe can express the standard deviation of \\(n\\) values \\(x_i\\) (\\(1 \\leq i \\leq n\\)) with two different equations.\nThe first equation is as follows:\n\\[ \\sigma = \\sqrt{\\frac{\\sum_{i=1}^n (x_i - \\overline{x})^2}{n}} \\]\nThe second equation is as follows:\n\\[ \\sigma = \\sqrt{\\overline{x^2} - \\overline{x}^2} = \\sqrt{\\frac{\\sum_{i=1}^n (x_i)^2}{n} - \\Bigg(\\frac{\\sum_{i=1}^n x_i}{n}\\Bigg)^2} \\]\nExercise\nExercise 3.1  Which equation of the standard deviation is more appropriate in a Map-Reduce algorithm? Why?\n   Solution\nThe second equation is more appropriate because it allows the computation of the sum of the elements and of the square of the elements step by step by using map and combine together.\nInstead, if we use the first equation, we need first to compute the average and then use it to compute the variance.\n  Exercise\nExercise 3.2  Propose a MapReduce implementation to compute the average and the standard deviation of the temperatures for each year.    Solution\nmap: \\((year, mo, d, mi, sec, temperature) \\rightarrow (year, temperature)\\)\ncombine: \\((year, T) \\rightarrow\\) \\((year, (sum(T), sum(T^2), len(T)))\\)\nreduce: \\((year, [(s_{i}, sq_{i}, l_{i}),\\ i=1\\dots n]) \\rightarrow\\) \\((year, (\\mu, \\sigma))\\)\nwhere:\n \\(T\\) is the list of all temperatures in the same \\(year\\). \\(sum(T)\\) sums all the elements in the list \\(T\\). \\(T^2 = [x^2 | x\\in T]\\) \\(len(T)\\) gives the length of the list \\(T\\). \\(\\mu = \\sum_{i=1}^n s_{i}/ \\sum_{i=1}^n l_{i}\\) \\(\\sigma = \\sqrt{ (\\sum_{i=1}^n sq_{i}/ \\sum_{i=1}^n l_{i}) - \\mu^2 }\\)    (\\#exr:unnamed-chunk-8)  Propose a MapReduce implementation to create an inverted index over a collection of documents. \\EndKnitrBlock{exercise} :::  Solution ::: {.infobox .exosolution data-latex=\"{exercisebox}\"} The input to the map will be a key-value pair, where the key is the name of a file $f$ and the value is the content $C$ of the file. map: $(f, C) \\rightarrow [(w, f)\\ \\forall w \\in C]$ reduce: $(w, L) \\rightarrow (w, L)$ where $L$ is the list of the files containing the word $w$. We note that the reduce function is the identity. Note also that in the map function we can add instructions to preprocess the text. For example, we can eliminate some words that are not useful in the index (e.g., the stopwords) or remove special symbols. :::  --  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"45224063bb1ca83ddb072a9416ee9aa7","permalink":"/courses/bdia_old/tutorials/map-reduce/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia_old/tutorials/map-reduce/","section":"courses","summary":"Description of the MapReduce tutorial.","tags":null,"title":"MapReduce","type":"docs"},{"authors":null,"categories":null,"content":" 1 Computing averages We are given a dataset that contains the average monthly temperature measurements over the course of some years. More precisely, the dataset is stored in a CSV file, where each row corresponds to a monthly measurement and the columns contain the following values: year, month, average temperature in the month.\n1980,1,5 1980,2,2 1980,3,10 1980,4,14 1980,5,17 .... 1981,1,2 1981,2,1 1981,3,3 1981,4,10 .... We intend to get the average monthly temperature for each year.\nExercise\nExercise 1.1  Write a MapReduce algorithm that generates key-value pairs \\((year, average\\_temperature)\\).\n   Solution\nmap: \\((year, month, temperature) \\rightarrow (year, temperature)\\)\nreduce: \\((year, temps) \\rightarrow\\) \\((year, sum(temps)/len(temps))\\)\n \\(temps\\) is the list of all temperatures in the same \\(year\\). \\(sum(temps)\\) sums all the elements in the list \\(temps\\). \\(len(temps)\\) gives the length of the list \\(temps\\).    Suppose now that we have a large CSV file stored in a distributed file system (e.g., HDFS), containing a series of measurements in the format “Year, Month, Day, Minute, Second, Temperature”. We can have up to one measurement per second in some years. Like before, we’d like to compute key-value pairs (year, average_temperature) by using a MapReduce algorithm.\nExercise\nExercise 1.2  What is the maximum number of measurements in a year?\n   Solution\nSince we can have up to one measurement per second, the maximum number of measurements \\(M_{max}\\) for a certain year is given by the following formula:\n\\[ M_{max} = 365 \\times 24 \\times 60 \\times 60 \\approx 31.5 \\times 10^6 \\]\n  Exercise\nExercise 1.3  Considering the answer to the previous question, discuss the efficiency of the first implementation of the algorithm.\n   Solution\nSince there might be up to 31 million values associated with a key, the bottleneck of the computation would be the shuffle operation, since we need to copy a high number of (key,value) pairs from the mappers to the reducers.\nAlso, a reducer might have to loop over a huge list of values in order to compute their average.\n  Exercise\nExercise 1.4  Based on the answer to the previous question, propose a better implementation to handle the CSV file.\n   Solution\nmap: \\((year, mo, d, mi, sec, temperature) \\rightarrow (year, temperature)\\)\ncombine: \\((year, temps) \\rightarrow\\) \\((year, (sum(temps), len(temps)))\\)\nreduce: \\((year, [(s_i, l_i),\\ i=1\\dots n]) \\rightarrow\\) \\((year, \\frac{\\sum_{i=1}^n s_i}{\\sum_{i=1}^n l_i})\\)\n \\(temps\\) is the list of all temperatures in the same \\(year\\). \\(sum(temps)\\) sums all the elements in the list \\(temps\\). \\(len(temps)\\) gives the length of the list \\(temps\\).     2 Computing average and standard deviation We consider again the large CSV file with a series of measurements in the format “Year, Month, Day, Minute, Second, Temperature”. We now intend to generate a series of key-value pairs (year, (avg_temperature, std_deviation)).\nWe can express the standard deviation of \\(n\\) values \\(x_i\\) (\\(1 \\leq i \\leq n\\)) with two different equations.\nThe first equation is as follows:\n\\[ \\sigma = \\sqrt{\\frac{\\sum_{i=1}^n (x_i - \\overline{x})^2}{n}} \\]\nThe second equation is as follows:\n\\[ \\sigma = \\sqrt{\\overline{x^2} - \\overline{x}^2} = \\sqrt{\\frac{\\sum_{i=1}^n (x_i)^2}{n} - \\Bigg(\\frac{\\sum_{i=1}^n x_i}{n}\\Bigg)^2} \\]\nExercise\nExercise 2.1  Which equation of the standard deviation is more appropriate in a Map-Reduce algorithm? Why?\n   Solution\nThe second equation is more appropriate because it allows the computation of the sum of the elements and of the square of the elements step by step by using map and combine together.\nInstead, if we use the first equation, we need first to compute the average and then use it to compute the variance.\n  Exercise\nExercise 2.2  Propose a MapReduce implementation to compute the average and the standard deviation of the temperatures for each year.    Solution\nmap: \\((year, mo, d, mi, sec, temperature) \\rightarrow (year, temperature)\\)\ncombine: \\((year, T) \\rightarrow\\) \\((year, (sum(T), sum(T^2), len(T)))\\)\nreduce: \\((year, [(s_{i}, sq_{i}, l_{i}),\\ i=1\\dots n]) \\rightarrow\\) \\((year, (\\mu, \\sigma))\\)\nwhere:\n \\(T\\) is the list of all temperatures in the same \\(year\\). \\(sum(T)\\) sums all the elements in the list \\(T\\). \\(T^2 = [x^2 | x\\in T]\\) \\(len(T)\\) gives the length of the list \\(T\\). \\(\\mu = \\sum_{i=1}^n s_{i}/ \\sum_{i=1}^n l_{i}\\) \\(\\sigma = \\sqrt{ (\\sum_{i=1}^n sq_{i}/ \\sum_{i=1}^n l_{i}) - \\mu^2 }\\)     3 Common friends in a social network Consider a social network described by a graph encoded in a text file. Each line of the file is a list of identifiers separated by commas. For instance, the line \\(A,B,C,D\\) means that \\(A\\) is friend with \\(B\\), \\(C\\) and \\(D\\). An excerpt of the file looks like as follows:\nA,B,C,D B,A,D C,A,D D,A,B,C ... We suppose that the friendship relation is symmetric: \\((A, B)\\) implies \\((B, A)\\).\nWe want to obtain the list of the common friends for each pair of individuals:\n(A, B), [D] (A, C), [D] (A, D), [B, C] (B, C), [D] (B, D), [A] (C, D), [A] As an additional constraint, we want to represent a couple only once and avoid to represent the symmetric couple. In other words, if we output \\((A, B)\\), we don’t want to output \\((B, A)\\).\nExercise\nExercise 3.1  Propose a MapReduce implementation to find the common friends in a social network satisifying the given constraints.\n   Solution\nmap: \\((x, F) \\rightarrow [((u, v), x)\\ \\forall (u, v) \\in F\\ |\\ u \u0026lt; v ]\\)\nreduce: \\([(u, v), LCF] \\rightarrow [(u, v), LCF]\\)\nwhere:\n \\(x\\) is the first item in a line. \\(F\\) is the list containing the items in a line except the first one (\\(x\\)’s friends). \\(LCF\\) is the list of all individuals that are friends with both \\(u\\) and \\(v\\).  We note that the reduce function is the identity.\n   4 Creating an inverted index We have a collection of \\(n\\) documents in a directory and we want to create an inverted index, one that associates each word to the list of the files the word occurs in. More precisely, for each word, the inverted index will have a list of the names of the documents that contain the word.\nExercise\nExercise 4.1  Propose a MapReduce implementation to create an inverted index over a collection of documents.\n   Solution\nThe input to the map will be a key-value pair, where the key is the name of a file \\(f\\) and the value is the content \\(C\\) of the file.\nmap: \\((f, C) \\rightarrow [(w, f)\\ \\forall w \\in C]\\)\nreduce: \\((w, L) \\rightarrow (w, L)\\)\nwhere \\(L\\) is the list of the files containing the word \\(w\\).\nWe note that the reduce function is the identity.\nNote also that in the map function we can add instructions to preprocess the text. For example, we can eliminate some words that are not useful in the index (e.g., the stopwords) or remove special symbols.\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a59fa830506ab61c12736f4ea6f887f4","permalink":"/courses/big-data-marseille/tutorials/map-reduce/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/big-data-marseille/tutorials/map-reduce/","section":"courses","summary":"Description of the MapReduce tutorial.","tags":null,"title":"MapReduce","type":"docs"},{"authors":null,"categories":null,"content":" 1 Computing averages We are given a dataset that contains the average monthly temperature measurements over the course of some years. More precisely, the dataset is stored in a CSV file, where each row corresponds to a monthly measurement and the columns contain the following values: year, month, average temperature in the month.\n1980,1,5 1980,2,2 1980,3,10 1980,4,14 1980,5,17 .... 1981,1,2 1981,2,1 1981,3,3 1981,4,10 .... We intend to get the average monthly temperature for each year.\nExercise\nExercise 1.1  Write a MapReduce algorithm that generates key-value pairs \\((year, average\\_temperature)\\).\n   Solution\nmap: \\((year, month, temperature) \\rightarrow (year, temperature)\\)\nreduce: \\((year, temps) \\rightarrow\\) \\((year, sum(temps)/len(temps))\\)\n \\(temps\\) is the list of all temperatures in the same \\(year\\). \\(sum(temps)\\) sums all the elements in the list \\(temps\\). \\(len(temps)\\) gives the length of the list \\(temps\\).    Suppose now that we have a large CSV file stored in a distributed file system (e.g., HDFS), containing a series of measurements in the format “Year, Month, Day, Minute, Second, Temperature”. We can have up to one measurement per second in some years. Like before, we’d like to compute key-value pairs (year, average_temperature) by using a MapReduce algorithm.\nExercise\nExercise 1.2  What is the maximum number of measurements in a year?\n   Solution\nSince we can have up to one measurement per second, the maximum number of measurements \\(M_{max}\\) for a certain year is given by the following formula:\n\\[ M_{max} = 365 \\times 24 \\times 60 \\times 60 \\approx 31.5 \\times 10^6 \\]\n  Exercise\nExercise 1.3  Considering the answer to the previous question, discuss the efficiency of the first implementation of the algorithm.\n   Solution\nSince there might be up to 31 million values associated with a key, the bottleneck of the computation would be the shuffle operation, since we need to copy a high number of (key,value) pairs from the mappers to the reducers.\nAlso, a reducer might have to loop over a huge list of values in order to compute their average.\n  Exercise\nExercise 1.4  Based on the answer to the previous question, propose a better implementation to handle the CSV file.\n   Solution\nmap: \\((year, mo, d, mi, sec, temperature) \\rightarrow (year, temperature)\\)\ncombine: \\((year, temps) \\rightarrow\\) \\((year, (sum(temps), len(temps)))\\)\nreduce: \\((year, [(s_i, l_i),\\ i=1\\dots n]) \\rightarrow\\) \\((year, \\frac{\\sum_{i=1}^n s_i}{\\sum_{i=1}^n l_i})\\)\n \\(temps\\) is the list of all temperatures in the same \\(year\\). \\(sum(temps)\\) sums all the elements in the list \\(temps\\). \\(len(temps)\\) gives the length of the list \\(temps\\).     2 Computing average and standard deviation We consider again the large CSV file with a series of measurements in the format “Year, Month, Day, Minute, Second, Temperature”. We now intend to generate a series of key-value pairs (year, (avg_temperature, std_deviation)).\nWe can express the standard deviation of \\(n\\) values \\(x_i\\) (\\(1 \\leq i \\leq n\\)) with two different equations.\nThe first equation is as follows:\n\\[ \\sigma = \\sqrt{\\frac{\\sum_{i=1}^n (x_i - \\overline{x})^2}{n}} \\]\nThe second equation is as follows:\n\\[ \\sigma = \\sqrt{\\overline{x^2} - \\overline{x}^2} = \\sqrt{\\frac{\\sum_{i=1}^n (x_i)^2}{n} - \\Bigg(\\frac{\\sum_{i=1}^n x_i}{n}\\Bigg)^2} \\]\nExercise\nExercise 2.1  Which equation of the standard deviation is more appropriate in a Map-Reduce algorithm? Why?\n   Solution\nThe second equation is more appropriate because it allows the computation of the sum of the elements and of the square of the elements step by step by using map and combine together.\nInstead, if we use the first equation, we need first to compute the average and then use it to compute the variance.\n  Exercise\nExercise 2.2  Propose a MapReduce implementation to compute the average and the standard deviation of the temperatures for each year.    Solution\nmap: \\((year, mo, d, mi, sec, temperature) \\rightarrow (year, temperature)\\)\ncombine: \\((year, T) \\rightarrow\\) \\((year, (sum(T), sum(T^2), len(T)))\\)\nreduce: \\((year, [(s_{i}, sq_{i}, l_{i}),\\ i=1\\dots n]) \\rightarrow\\) \\((year, (\\mu, \\sigma))\\)\nwhere:\n \\(T\\) is the list of all temperatures in the same \\(year\\). \\(sum(T)\\) sums all the elements in the list \\(T\\). \\(T^2 = [x^2 | x\\in T]\\) \\(len(T)\\) gives the length of the list \\(T\\). \\(\\mu = \\sum_{i=1}^n s_{i}/ \\sum_{i=1}^n l_{i}\\) \\(\\sigma = \\sqrt{ (\\sum_{i=1}^n sq_{i}/ \\sum_{i=1}^n l_{i}) - \\mu^2 }\\)     3 Common friends in a social network Consider a social network described by a graph encoded in a text file. Each line of the file is a list of identifiers separated by commas. For instance, the line \\(A,B,C,D\\) means that \\(A\\) is friend with \\(B\\), \\(C\\) and \\(D\\). An excerpt of the file looks like as follows:\nA,B,C,D B,A,D C,A,D D,A,B,C ... We suppose that the friendship relation is symmetric: \\((A, B)\\) implies \\((B, A)\\).\nWe want to obtain the list of the common friends for each pair of individuals:\n(A, B), [D] (A, C), [D] (A, D), [B, C] (B, C), [D] (B, D), [A] (C, D), [A] As an additional constraint, we want to represent a couple only once and avoid to represent the symmetric couple. In other words, if we output \\((A, B)\\), we don’t want to output \\((B, A)\\).\nExercise\nExercise 3.1  Propose a MapReduce implementation to find the common friends in a social network satisifying the given constraints.\n   Solution\nmap: \\((x, F) \\rightarrow [((u, v), x)\\ \\forall (u, v) \\in F\\ |\\ u \u0026lt; v ]\\)\nreduce: \\([(u, v), LCF] \\rightarrow [(u, v), LCF]\\)\nwhere:\n \\(x\\) is the first item in a line. \\(F\\) is the list containing the items in a line except the first one (\\(x\\)’s friends). \\(LCF\\) is the list of all individuals that are friends with both \\(u\\) and \\(v\\).  We note that the reduce function is the identity.\n  (\\#exr:unnamed-chunk-8)  Propose a MapReduce implementation to create an inverted index over a collection of documents. \\EndKnitrBlock{exercise} :::  Solution ::: {.infobox .exosolution data-latex=\"{exercisebox}\"} The input to the map will be a key-value pair, where the key is the name of a file $f$ and the value is the content $C$ of the file. map: $(f, C) \\rightarrow [(w, f)\\ \\forall w \\in C]$ reduce: $(w, L) \\rightarrow (w, L)$ where $L$ is the list of the files containing the word $w$. We note that the reduce function is the identity. Note also that in the map function we can add instructions to preprocess the text. For example, we can eliminate some words that are not useful in the index (e.g., the stopwords) or remove special symbols. :::  --  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"22d83831482b2a6a4aa5d6546c3dd9cd","permalink":"/courses/plp/tutorials/map-reduce/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/plp/tutorials/map-reduce/","section":"courses","summary":"Description of the MapReduce tutorial.","tags":null,"title":"MapReduce","type":"docs"},{"authors":null,"categories":null,"content":" :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/movies.csv' as row MERGE (m:Movie {movie_id: toInteger(row.movie_id), title_en:row.movie_title_en, title_fr:row.movie_title_fr, year: toInteger(row.movie_year)}) RETURN count(m)  2. Create an **index** on the property *movie_id* of the nodes with label **Movie** with the following command:  create index movie_idx for (m:Movie) on (m.movie_id)  3. Import the **nodes** corresponding to the **actors** (label **Actor**) by using the following command (it took 62 seconds on my computer):  :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/actors.csv' as row MERGE (a:Actor {actor_id: toInteger(row.actor_id), name:row.actor_name}) RETURN count(a)  4. Create an **index** on the property *actor_id* of the nodes with label **Actor** with the following command:  create index actor_idx for (a:Actor) on (a.actor_id)  5. Import the **nodes** corresponding to the **directors** (label **Director**) by using the following command (it took 4 seconds on my computer):  :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/directors.csv' as row MERGE (d:Director {director_id: toInteger(row.director_id), name:row.director_name}) RETURN count(d)  6. Create an **index** on the property *director_id* of the nodes with label **Director** with the following command:  create index director_idx for (d:Director) on (d.director_id)  7. Import the **nodes** corresponding to the **genres** (label **Genre**) by using the following command (it took 197 ms on my computer):  :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/genres.csv' as row MERGE (g:Genre {genre_id: toInteger(row.genre_id), name:row.genre_name}) RETURN count(g)  8. Create an **index** on the property *genre_id* of the nodes with label **Genre** with the following command:  create index genre_idx for (g:Genre) on (g.genre_id)  9. Import the **nodes** corresponding to the **users** (label **User**) by using the following command (it took 347 seconds on my computer):  :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/users.csv' as row MERGE (u:User {user_id: toInteger(row.user_id), name:row.user_nickname}) RETURN count(u)  10. Create an **index** on the property *user_id* of the nodes with label **User** with the following command:  create index user_idx for (u:User) on (u.user_id)  11. Import the links of type **ACTED_IN** between actors and movies with the following command (it took 2.5 seconds on my computer):  :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/movies_actors.csv' as row MATCH (m:Movie {movie_id: toInteger(row.movie_id)}) MATCH (a:Actor {actor_id: toInteger(row.actor_id)}) MERGE (a)-[r:ACTED_IN]-(m) RETURN count(r)  12. Import the links of type **DIRECTED** between directors and movies with the following command (it took 688 ms on my computer):  :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/movies_directors.csv' as row MATCH (m:Movie {movie_id: toInteger(row.movie_id)}) MATCH (d:Director {director_id: toInteger(row.director_id)}) MERGE (d)-[r:DIRECTED]-(m) RETURN count(r)  13. Import the links of type **HAS_GENRE** between movies and genres with the following command (it took 1 second on my computer):  :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/movies_genres.csv' as row MATCH (m:Movie {movie_id: toInteger(row.movie_id)}) MATCH (g:Genre {genre_id: toInteger(row.genre_id)}) MERGE (m)-[r:HAS_GENRE]-(g) RETURN count(r)  14. Import the links of type **RATED** between users and movies with the following command (it took 5.9 seconds on my computer):  :auto USING PERIODIC COMMIT 1000 LOAD CSV WITH HEADERS FROM 'https://gquercini.github.io/courses/plp/tutorials/neo4j/user_rates.csv' as row MATCH (m:Movie {movie_id: toInteger(row.movie_id)}) MATCH (u:User {user_id: toInteger(row.user_id)}) MERGE (u)-[r:RATED {rate:toFloat(row.rate)}]-(m) RETURN count(r)  # Exploratory queries If you looked at the commands used to import the data, you might already have an idea as to the structure of the graph. You can get a glimpse on the node labels, the relationship types and the property keys by clicking on the button circled in the following figure: ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-1)  Write and execute the following query:  MATCH (m:Movie {title_en:\"Toy Story\"}) RETURN m;  What do you obtain? What are the properties associated to a node with label *Movie*? Click once on the node to display its properties. \\EndKnitrBlock{exercise} ::: ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-2)  Double-click on the node displayed as the result of the previous query. Analyze the neighbouring nodes (their labels and properties) and the incident links (direction, type and properties). You can move around the node by dragging it in the window. \\EndKnitrBlock{exercise} ::: # Queries ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-3)  Write and execute the following queries: Q1. The genres of the movies in the database. Q2. The number of movies in the database. Q3. The title of the movies released in 2015. Q4. The number of directors by movie. Sort in decreasing order. Q5. The names of the directors and the title of the movies that they directed and in which they also played. Q6. The genres of the movies in which Tom Hanks played. Q7. The title and the rate of all the movies that the user with identifier 3 rated. Sort by rate in decreasing order.\\EndKnitrBlock{exercise} ::: ## Query chaining Cypher allows the specification of complex queries composed of several queries that are concatenated with the clause **WITH**. We are now going to see an example to obtain the titles of the movies that have been rated by at least 100 users. At a first glance, the following query looks like a good solution:  MATCH (n:Movie)= 100 RETURN n.title_en LIMIT 5;  However, executing this query returns the following error:  Invalid use of aggregating function count(...) in this context (line 1, column 42 (offset: 41)) \"MATCH (n:Movie)= 100\"  Similarly to SQL, we cannot use aggregating functions in the clause WHERE. A correct formulation of the query requires the use of the clause WITH to concatenate two queries: the first will count the number of rates for each movie:  MATCH (n:Movie)The second will take in the output of the first and will filter all the movies where nb_rates MATCH (n:Movie)= 100 RETURN n.title_en  ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-4)  Write and execute a query to obtain the five movies that obtained the best average rate among the movies that have been rated by at least 100 users. \\EndKnitrBlock{exercise} ::: # Movie recommendation We are now going to see how Neo4j can be effectively used in a real application by implementing queries that form the basis of a simple **movie recommendation system**. This system is based on the notion of **collaborative filtering**. This consists in recommending a user $u$ some films that s/he hasn’t rated yet and other users with similar preferences have loved. In our context, we say that a user loves a movie if s/he rated the movie at least 3. This concept is explained in the following figure. The user $u$ loves 6 movies, 3 of which are also loved by the user $v$ (the black nodes); it is reasonable to think that $u$ may also love the two movies that $v$ loved and $u$ hasn’t rated yet. The principle of collaborative filtering is based on the computation of a **similarity score** between two users. Several similarity scores are possible in this context; here, we are going to use the **Jaccard coefficient**. Let $L(u)$ and $L(v)$ be the sets of movies that $u$ and $v$ love respectively; the similarity score $J(u,v)$ between $u$ and $v$ is given by: $$ J(u, v) = \\frac{|L(u) \\cap L(v)|}{|L(u) \\cup L(v)|} $$ In order to recommend movies to a target user $v$, the recommender system computes the similarity score between $v$ and all the other users of the system and proposes to $v$ the movies that s/he hasn’t rated yet and that the $k$ most similar users loved. We are now going to incrementally write a query to recommend some movies to the target user 3. The first step consists in determining the value $|L(v)|$. ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-5)  Write and execute the query to obtain the number of movies that the user 3 loved. This query must return the target user and the number of movies that s/he loves. \\EndKnitrBlock{exercise} ::: Next, we are going to determine the value $|L(u)|$, for all users $u$ except $v$. ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-6)  Write and execute the query to obtain the number of movies that each user $u$ loves, except the target user 3. This query must return each user $u$ and the number of movies that s/he loves. \\EndKnitrBlock{exercise} ::: We put the two queries together with the clause WITH. ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-7)  Compose the two previous queries with the clause WITH. This query must return the target user 3, the number of movies that s/he loves, the other users $u$ and the number of movies that they love. \\EndKnitrBlock{exercise} ::: Now, we need to determine the value $L(u)\\cup L(v)$, for each user $u$, and compute the similarity score with the Jaccard coefficient. ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-8)  Append (by using WITH) to the query written in the previous exercise a query that obtains the number of movies that any user $u$ loved and that the target user 3 loved too, and computes the similarity score between the target user 3 and $u$. This query must return the five most similar users to the target user and the similarity scores.  Hint Multiply the numerator of the equation by 1.0, otherwise Cypher will compute an integer division.  \\EndKnitrBlock{exercise} ::: The last step consists in recommending some movies to the target user. From the previous query, take the identifier of the user $w$ with the highest similarity to the target user. You are going to use this identifier directly in the new query. ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-9)  Write and execute the query to obtain the list of the movies that the user $w$ loved and that the target user hasn't rated yet. Sort this list by decreasing rate.  Hint * First, write a query to obtain the list of the movies that the target user rated. In the MATCH clause, use the variable $m$ to indicate a movie that the target user rated. Conclude the query with:  RETURN collect(m.title_en) AS movies  The function *collect* creates a list called *movies*. * Replace RETURN with WITH in the previous query and add a second query to select the titles of the movies $m$ that the user $w$ loved and the target user did not rate. In order to exclude the films that the target user did not rate, use the following predicate:  none(x in movies where x=m.title_en)  in the WHERE clause.  \\EndKnitrBlock{exercise} ::: -- ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b24cdc6cd229bdb2a25dcce9b304ddaf","permalink":"/courses/bdia_old/tutorials/neo4j-tutorial/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia_old/tutorials/neo4j-tutorial/","section":"courses","summary":"Description of the Neo4j tutorial.","tags":null,"title":"Neo4j","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial you’ll learn:\n How to obtain a non-redundant set of functional dependencies. How to determine the candidate keys of a table given its functional dependencies. How to determine the normal form of a table.  1 Question 1 We consider a relational table \\(R\\) with four columns \\(A\\), \\(B\\), \\(C\\) and \\(D\\). Let \\(\\mathcal{F}\\) be the following set of functional dependencies:\n\\(AB \\rightarrow C\\)\n \\(D \\rightarrow BC\\)\n \\(A \\rightarrow B\\)\n  Exercise\nExercise 1.1  Derive a minimal set \\(\\mathcal{G}\\) of functional dependencies that is equivalent to \\(\\mathcal{F}\\).\n   Solution\nWe first need to write the functional dependencies in canonical form (the right-side of each FD must consist of only one column).\nThe FD (2.) can be rewritten using the decomposition axiom.\n\\(AB \\rightarrow C\\)\n \\(D \\rightarrow B\\)\n \\(D \\rightarrow C\\)\n \\(A \\rightarrow B\\)\n  Next, we need to make sure that all functional dependencies are left-irreducible.\nAll functional dependencies except the first one are trivially left-irreducible (the determinant consists of only one column). The first has two columns in the determinant, therefore we need to check whether we can eliminate one of the two columns and still preserve an equivalent set of functional dependencies.\nWe apply Armstrong’s axioms to compute the closure of this set of functional dependencies.\nFrom (1.) and (4.), we can apply the pseudotransitivity axiom and we obtain:\n\\[A \\rightarrow B \\wedge AB \\rightarrow C \\implies AA \\rightarrow C \\implies A \\rightarrow C\\]\nSince \\(A \\rightarrow C\\) is in the closure, the column \\(B\\) in FD (1.) is useless and can therefore be omitted.\nThe set \\(\\mathcal{G}\\) consists of the following FDs:\n \\(A \\rightarrow C\\)\n \\(D \\rightarrow B\\)\n \\(D \\rightarrow C\\)\n \\(A \\rightarrow B\\)\n  None of these functional dependencies are redundant.\n   2 Question 2 Let \\(R\\) be a relational table with five columns \\((A, B, C, D, E)\\). The following set \\(\\mathcal{F}\\) of functional dependencies hold:\n\\(AB \\rightarrow C\\) \\(C \\rightarrow A\\) \\(C \\rightarrow B\\) \\(C \\rightarrow D\\) \\(D \\rightarrow E\\)  Exercise\nExercise 2.1  Specify the candidate keys of the table \\(R\\).\n   Solution\nA candidate key is a set of columns that imply all the other columns.\nFirst, let’s try sets composed of only one column: \\(\\{A\\}\\), \\(\\{B\\}\\), \\(\\{C\\}\\), \\(\\{D\\}\\) and \\(\\{E\\}\\).\nWe have the following: (\\(\\{X\\}^+_{\\mathcal{F}}\\) indicates the set of all columns implied by \\(X\\)).\n \\(\\{A\\}^+_{\\mathcal{F}} = \\{A\\}\\)\n \\(\\{B\\}^+_{\\mathcal{F}} = \\{B\\}\\)\n \\(\\{C\\}^+_{\\mathcal{F}} = \\{A, B, C, D, E\\}\\)\n \\(\\{D\\}^+_{\\mathcal{F}} = \\{D, E\\}\\)\n \\(\\{E\\}^+_{\\mathcal{F}} = \\{E\\}\\)\n  Therefore, \\(\\{C\\}\\) is a candidate key because it implies all the other columns.\nFrom the functional dependency (1), we obtain that \\(AB\\) implies \\(C\\); therefore, by transitivity they imply all the other columns.\nIn conclusion, we have two candidate keys: \\(\\{C\\}\\) and \\(\\{A, B\\}\\).\n  Exercise\nExercise 2.2  We assume that \\(R\\) is in 1NF.\n Is table \\(R\\) in 2NF? Justify your answer.\n Is table \\(R\\) in 3NF? Justify your answer.\n Is table \\(R\\) in BCNF? Justify your answer.     Solution\n \\(R\\) is in 2NF. In fact, all non-prime columns depend entirely on both candidate keys.\n \\(R\\) is not in 3NF. In fact, the functional dependency \\(D \\rightarrow E\\) is between two non-prime columns.\n As a result, \\(R\\) is not in BCNF either.\n    Exercise\nExercise 2.3  If the table \\(R\\) from the previous exercise is not in BCNF, how would you change the schema so that BCNF is satisfied? For each table, specify the primary key and the foreign keys linking the tables to each other.\n   Solution\nThe table is not in 3NF. The offending functional dependency is \\(D \\rightarrow E\\).\nWe need to create a new table \\(R_1\\), where the primary key is the determinant in the offending functional dependency (\\(D\\)). We then move all columns that are dependent on \\(D\\) (only \\(E\\) in our case) from \\(R\\) to \\(R_1\\). Note that \\(D\\) is kept in \\(R\\) so that we can use it to link \\(R\\) with \\(R_1\\).\nIn summary:\n\\[R = \\{A, B, C, D\\}\\]\n\\[R_1 = \\{D, E\\}\\]\nThe primary key of \\(R\\) is \\(\\{C\\}\\) (or, we can also choose \\(\\{A, B\\}\\) if we want). The primary key of \\(R_1\\) is \\(\\{D\\}\\).\nThe column \\(D\\) in \\(R\\) is a foreign key referencing the column \\(D\\) in \\(R_1\\).\n   3 Question 3 Let \\(R\\) be a relational table with four columns \\((A, B, C, D)\\). \\(\\{A, B\\}\\) is the only candidate key.\nExercise\nExercise 3.1  Identify a minimal set of functional dependencies. Justify your answer.\n   Solution\nA candidate key implies all the other columns of the table. Therefore we have :\n\\[AB \\rightarrow C\\] \\[AB \\rightarrow D\\]\nBoth functional dependencies are in canonical form (the right side only consist of one column). Trivially, both functional dependencies are left-irreducible (we cannot remove any of the columns in the determinant without losing information). So, this is a minimal set of functional dependencies.\n  Exercise\nExercise 3.2  Add \\(B \\rightarrow D\\) to the set of functional dependencies that you identified in the previous exercise. Modify the minimal set of functional dependencies accordingly. Justify your answer.\n   Solution\nWe consider the following functional dependencies:\n\\(AB \\rightarrow C\\) \\(AB \\rightarrow D\\) \\(B \\rightarrow D\\)  The FD (3) clearly makes FD (2) redundant. By using the augmentation axiom on (3) we obtain:\n\\(AB \\rightarrow AD\\)  By applying the decomposition axiom on (4) we obtain:\n\\(AB \\rightarrow A\\)\n \\(AB \\rightarrow D\\)\n  Which shows that (2) is redundant.\nIn summary, we have the following functional dependencies:\n\\[AB\\rightarrow C \\] \\[B\\rightarrow D \\]\n  Exercise\nExercise 3.3  We assume that \\(R\\) is in 1NF.\n Is table \\(R\\) in 2NF? Justify your answer.\n Is table \\(R\\) in 3NF? Justify your answer.\n Is table \\(R\\) in BCNF? Justify your answer.     Solution\n \\(R\\) is not in 2NF. In fact, the non-prime column \\(D\\) is functionally dependent on only one part of the candidate key.\n \\(R\\) is not in 3NF, let alone BCNF, because it doesn’t fulfill the first condition, that is being in 2NF.\n    Exercise\nExercise 3.4  Normalize \\(R\\) to the BCNF form. Justify your choices.\n   Solution\nThe functional dependency that gives a partial dependency is: \\(B \\rightarrow D\\). We create a new table \\(R_1\\), where the determinant (\\(B\\)) of the offending functional dependency is the primary key. We move the columns that depend on \\(B\\) (here, only \\(D\\)) from table \\(R\\) to table \\(R_1\\).\nIn summary:\n\\[R = (A, B, C)\\]\n\\[R_1 = (B, D)\\]\nWe can see that \\(R\\) is in 3NF because:\n The only non-prime column is \\(C\\), therefore there cannot be any dependency between non-prime columns.  \\(R\\) is in BCNF because:\n The only functional dependency \\(AB \\rightarrow C\\) has a key as its determinant.  Similarly, for \\(R_1\\).\n   4 Question 4 We consider the following table:\nPatient (ssn, first_name, last_name, phone_number, insurance_number, insurance_expiration_date) where the following set \\(\\mathcal{F}\\) of functional dependencies holds:\nssn -\u0026gt; first_name, last_name, phone_number, insurance_number, insurance_expiration_date insurance_number -\u0026gt; insurance_expiration_date Exercise\nExercise 4.1 Derive a minimal set \\(\\mathcal{G}\\) of functional dependencies that is equivalent to \\(\\mathcal{F}\\).    Solution\nFirst, we need to rewrite the FDs in canonical form.\n\\(ssn \\rightarrow first\\_name\\) \\(ssn \\rightarrow last\\_name\\) \\(ssn \\rightarrow phone\\_number\\) \\(ssn \\rightarrow insurance\\_number\\) \\(ssn \\rightarrow insurance\\_expiration\\_date\\) \\(insurance\\_number \\rightarrow insurance\\_expiration\\_date\\)  The determinant of each FD is composed of only one column, therefore it is already left-irreducible. It is easy to see that all FDs with ssn as a determinant must be kept (otherwise we lose some information).\nBy transitivity from 4. and 6. we obtain:\n\\[ssn \\rightarrow insurance\\_expiration\\_date\\]\nTherefore, \\(\\mathcal{G}\\) is obtained from \\(\\mathcal{F}\\) by removing 5.\n  Exercise\nExercise 4.2 Given \\(\\mathcal{G}\\), identify the candidate keys in the table Patient.    Solution\nFrom the functional dependencies in \\(\\mathcal{F}\\), it’s easy to see that that the only column that implies all the others is ssn. Therefore, {ssn} is the only candidate key in this table.\n  Exercise\nExercise 4.3 Specify the normal form of the table Patient. Justify your answer.    Solution\n It is immediate to verify that the table is 1NF.\n The table is 2NF because there is only one candidate key, which is composed of only one column. Therefore, there cannot be any partial dependency.\n The table is not in 3NF. Indeed, there is a functional dependency between two non-prime columns:\n  \\[insurance\\_number \\rightarrow insurance\\_expiration\\_date\\]\n  Exercise\nExercise 4.4 How would you normalize table Patient to BCNF? Justify your answer.    Solution\nThe offending functional dependency is:\n\\[insurance\\_number \\rightarrow insurance\\_expiration\\_date\\]\nWe need to create another table (let’s call it Insurance) that contains the determinant of the offending functional dependency (insurance_number) as its primary key. We need to move the colum (insurance_expiration_date) that depends on insurance_number from table Patient to table Insurance.\nIn summary:\n Patient (ssn, first_name, last_name, phone_number, insurance_number) Insurance (insurance_number, insurance_expiration_date)  Note that the column insurance_number in table Patient is foreign key to the column insurance_number in table Insurance.\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"dd4b11df4fa072aaae4db3251396b08d","permalink":"/courses/databases/tutorials/normalization/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/databases/tutorials/normalization/","section":"courses","summary":"Description of the normalization tutorial.","tags":null,"title":"Normalization","type":"docs"},{"authors":null,"categories":null,"content":" 1 Computing averages We consider a collection of CSV files containing temperature measurements in the following format:\nyear,month,day,hours,minutes,seconds,temperature\nyou can find the files under the directory hdfs://sar17:9000/data/temperatures/\nHere are the details for each file:\n File temperatures_86400.csv contains one measurement per day in the years 1980 - 2018. File temperatures_2880.csv contains one measurement every 2880 seconds in the years 1980 - 2018. File temperatures_86.csv contains one measurement every 86 seconds for the year 1980 alone. File temperatures_10.csv contains one measurement every 10 seconds for the years 1980 - 2018.  We intend to implement a Spark algorithm to generate pairs \\((y, t_{avg})\\), where \\(y\\) is the year and \\(t_{avg}\\) is the average temperature in the year.\n1.1 First implementation Copy the file /usr/users/cpu-prof/cpu_vialle/DCE-Spark/template_temperatures.py to your home directory by typing the following command:\ncp /usr/users/cpu-prof/cpu_vialle/DCE-Spark/template_temperatures.py ./avg_temperatures_slow.py\n Open the file avg_temperatures_slow.py. The file contains the implementation of the function avg_temperature_slow that takes in an RDD where each item is a line of the input text file and returns an RDD, where each item is a key-value pair (year, avg_temp).\nIn the same file, locate the two variables input_path and output-path. and write the following code:\ninput_path = \u0026quot;hdfs://sar17:9000/data/temperatures/\u0026quot; output_path = \u0026quot;hdfs://sar17:9000/bdiaspark22/bdiaspark22_XX/\u0026quot; Replace XX with the number corresponding to your login! Don’t forget the / at the end of the file paths!\nExecute the following actions:\n Run the script avg_temperatures_slow.py by using temperatures_86400.csv as an input. To this extent, use the following command:  spark-submit --master spark://sar17:7077 avg_temperatures_slow.py temperatures_86400.csv\n  You should find the output of the program under the folder hdfs://sar17:9000/bdiaspark22/bdiaspark22_XX/temperatures_86400.out Type the following command to verify it :  hdfs dfs -ls hdfs://sar17:9000/bdiaspark22/bdiaspark22_XX/temperatures_86400.out\n  If you want to read the result of the computation, you can execute the following command:  hdfs dfs -cat hdfs://sar17:9000/bdiaspark22/bdiaspark22_XX/temperatures_86400.out/*\n Exercise\nExercise 1.1 \n What’s the execution time?  In the output of Spark on the command line you should see a line that mentions something along the following line:\nINFO DAGScheduler: Job 0 finished: runJob at SparkHadoopWriter.scala:78, took 3.478220 s\n  Run the same script by using temperatures_2880.csv as an input.\n What is the execution time? Does it seem reasonable compared with the execution time that you observed before? Justify your answer.\n Execute the same script by using temperatures_86.csv as an input.\n What is the execution time? How would you justify it, knowing that the files temperatures_2880.csv and temperatures_86.csv have a similar size (11 MB the former, 9 MB the latter)?     1.2 Second implementation Create a copy of avg_temperatures_slow.py and rename it as\navg_temperatures_fast.py, with the following command:\ncp ./avg_temperatures_slow.py ./avg_temperatures_fast.py\n Exercise\nExercise 1.2  Open the file and implement the function avg_temperature_fast.\nNOTE. Remember to comment the call to avg_temperature_slow and to uncomment the call to avg_temperature_fast at the end of the file.\n  Exercise\nExercise 1.3 \n Run the script avg_temperatures_fast.py by using temperatures_86.csv as an input.\n What’s the execution time? Compare it with the execution time obtained in the previous exercise and comment the difference.\n Run the same script by using temperatures_10.csv (3 GB!) as an input. Do you think that the program takes too long? Why?\n      2 Common friends in a social network Consider a social network described by a graph encoded in a text file. Each line of the file is a list of identifiers separated by commas. For instance, the line \\(A,B,C,D\\) means that \\(A\\) is friend with \\(B\\), \\(C\\) and \\(D\\). An excerpt of the file looks like as follows:\nA,B,C,D B,A,D C,A,D D,A,B,C ... We suppose that the friendship relation is symmetric: \\((A, B)\\) implies \\((B, A)\\).\nWe want to obtain the list of the common friends for each pair of individuals:\n(A, B), [D] (A, C), [D] (A, D), [B, C] (B, C), [A, D] (B, D), [A] (C, D), [A] As an additional constraint, we want to represent a couple only once and avoid to represent the symmetric couple. In other words, if we output \\((A, B)\\), we don’t want to output \\((B, A)\\).\nWe use the following input files available in folder hdfs://sar17:9000/data/sn/:\n sn_tiny.csv. Small social network, that you can use to test your implementation.\n sn_10k_100k.csv. Social network with \\(10^4\\) individuals and \\(10^5\\) links.\n sn_100k_100k.csv. Social network with \\(10^5\\) individuals and \\(10^5\\) links.\n sn_1k_100k.csv. Social network with \\(10^3\\) individuals and \\(10^5\\) links.\n sn_1m_1m.csv. Social network with \\(10^6\\) individuals and \\(10^6\\) links.\n  2.1 Implementation Get the code template with the following commands:\ncp /usr/users/cpu-prof/cpu_vialle/DCE-Spark/template_common_friends.py .\n Exercise\nExercise 2.1 \n Write an implementation that uses a reduceByKey.\n Write an implementation that uses a groupByKey.\n Test both implementations on file sn_tiny.csv.     2.2 Tests and performance measures Exercise\nExercise 2.2 \n Run both implementations on the other files.\n Fill in a table where you indicate: the name and size of each file and the measured running times of both implementations.\n     2.3 Minimum, maximum and average degree Exercise\nExercise 2.3 \nWrite a Spark program to compute the minimum, maximum and average degree of a node in the social network. You should use RDDs to do so, don’t try to collect() the content of the RDDs and so compute the values on Python lists.\n Compute the minimum, maximum and average degree for all the given input files.\n Complete the table that you created at the previous exercise by adding the minimum, maximum and average number of friends.\n     2.4 Performance analysis Exercise\nExercise 2.4 \n We suppose that each node has a number of friends that is equal to average number of friends. Compute (with pencil or paper, no need to write a code for that) the number of intermediate pairs \\(((A, B), X)\\) generated by your code.\n Complete the table by writing down the number of intermediate pairs for each file.\n Plot three graphs, where the y-axis has the program running times and the x-axis has: the number of intermediate pairs, the average degree and the file size respectively.\n Which graphs best predict the evolution of the computational time?      3 Average and standard deviation We use the same files as in the first question. Our objective is to write a Spark program that produces triples \\((y, t_{\\mu}, t_{\\sigma})\\), where \\(y\\), \\(t_{\\mu}\\) and \\(t_{\\sigma}\\) are the year, the average temperature in the year and the standard deviation respectively.\nWe can express the standard deviation of \\(n\\) values \\(x_1 \\ldots x_n\\) with the following formula:\n\\[ \\sigma = \\sqrt{\\overline{x^2} - \\overline{x}^2} = \\sqrt{\\frac{\\sum_{i=1}^n (x_i)^2}{n} - \\Bigg(\\frac{\\sum_{i=1}^n x_i}{n}\\Bigg)^2} \\]\nType the following command to get a code template:\ncp /usr/users/cpu-prof/cpu_vialle/DCE-Spark/template_temperatures.py ./avg_stddev_temp.py\n Exercise\nExercise 3.1 \n Define a new function avg_stddev_temperature in file avg_stddev_temp.py.\n Execute the script and observe the results.\n     ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"67f3bc33b5d1da6975469e8a8b62caae","permalink":"/courses/bdia/tutorials/spark-programming-dce/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia/tutorials/spark-programming-dce/","section":"courses","summary":"Description of the tutorial on Spark programming on a cluster","tags":null,"title":"Running Spark programs on a cluster","type":"docs"},{"authors":null,"categories":null,"content":" Refer to this documentation to learn how to connect and interact with the cluster.\n(\\#exr:unnamed-chunk-1)  * Run the script ``avg_temperatures_first.py`` by using ``temperatures_86400.csv`` as an input. To this extent, use the following command: `` spark-submit --master spark://sar01:7077 avg_temperatures_first.py temperatures_86400.csv ``  You should find the output of the program under the folder ``hdfs://sar01:9000/cpupsmia1/your_username/temperatures_86400.out`` * What's the execution time? * In the output of Spark on the command line you should see a line that mentions something along the following line: `` INFO DAGScheduler: Job 0 finished: runJob at SparkHadoopWriter.scala:78, took 3.478220 s `` * Run the same script by using ``temperatures_2880.csv`` as an input. * What is the execution time? Does it seem reasonable compared with the execution time that you observed before? Justify your answer. * Execute the same script by using ``temperatures_86.csv`` as an input. * What is the execution time? How would you justify it, knowing that the files ``temperatures_2880.csv`` and ``temperatures_86.csv`` have a similar size (11 MB the former, 9 MB the latter)? \\EndKnitrBlock{exercise} ::: ## Second implementation Copy the file ``~vialle/DCE-Spark/template_temperatures.py`` to your home directory by typing the following command: `` cp ~vialle/DCE-Spark/template_temperatures.py ./avg_temperatures_second.py ``  ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-2)  Based on the observations made in the previous exercise, write an improved implementation of the function ``avg_temperature``. \\EndKnitrBlock{exercise} ::: ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-3)  * Run the script ``avg_temperatures_second.py`` by using ``temperatures_86.csv`` as an input. * What's the execution time? Compare it with the execution time obtained in the previous exercise and comment the difference. * Run the same script by using ``temperatures_10.csv`` (3 GB!) as an input. Do you think that the program takes too long? Why? \\EndKnitrBlock{exercise} ::: # Average and standard deviation We use the same files as in the first question. Our objective is to write a Spark program that produces triples $(y, t_{\\mu}, t_{\\sigma})$, where $y$, $t_{\\mu}$ and $t_{\\sigma}$ are the year, the average temperature in the year and the standard deviation respectively. We can express the standard deviation of $n$ values $x_1 \\ldots x_n$ with the following formula: $$ \\sigma = \\sqrt{\\overline{x^2} - \\overline{x}^2} = \\sqrt{\\frac{\\sum_{i=1}^n (x_i)^2}{n} - \\Bigg(\\frac{\\sum_{i=1}^n x_i}{n}\\Bigg)^2} $$ Copy the file ``~vialle/DCE-Spark/template_temperatures.py`` to your home directory by typing the following command: `` cp ~vialle/DCE-Spark/template_temperatures.py ./avg_stddev_temp.py `` ::: {.infobox .exercisebox data-latex=\"{exercisebox}\"} **Exercise** \\BeginKnitrBlock{exercise}(\\#exr:unnamed-chunk-4)  * Complete the definition of the function ``avg_temperature`` in file ``avg_stddev_temp.py``. * Run the script by using ``temperatures_86400.csv`` and ``temperatures_2880.csv`` as input files (small files). * Run the script by using ``temperatures_86.csv`` and ``temperatures_10.csv`` as input files (large files). \\EndKnitrBlock{exercise} ::: -- ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3b9dfc136ad31db433d3400a02f460d5","permalink":"/courses/bdia_old/tutorials/spark-programming-dce/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/bdia_old/tutorials/spark-programming-dce/","section":"courses","summary":"Description of the tutorial on Spark programming on a cluster","tags":null,"title":"Introduction to Spark programming","type":"docs"},{"authors":null,"categories":null,"content":" In this tutorial you’ll learn:\n The key integrity constraints in a relational database. Basic SQL queries.  1 Setting up the environment We use a database managed by a PostgreSQL server. The server runs in a dedicated virtual machine.\nWatch this video to find out how to launch a server and connect to it. The data is already stored at the server.\n 2 Description of the data We consider the database of a DVD rental store chain containing data on films, actors, customers and the transactions of the store.\nThis database goes by the name Sakila and was developed by Mike Hillyer, a former member of the MySQL team.\n Figure 2.1: The conceptual schema of the Sakila database  The tables of the database are documented on this page.\nSakila has been ported from MySQL to PostgreSQL under the name pagila.\nIn pgAdmin, Open a new query tool to do the exercises.\n 3 Integrity constraints Exercise\nExercise 3.1  Execute the following statement:\n insert into film_actor values(1, 25)  What is this statement supposed to do? What is the reaction of the DBMS?\n   Solution\nThis statement should insert a new row in table film_actor, where the value of actor_id is 1 and the value of film_id is 25.\nThe DBMS returns an error because there is already a row with these values and the two columns film_actor, film_id form the primary key.\n  Exercise\nExercise 3.2  Write the statement to delete the film with film_id=1 from the table Film.\nExecute the command. What happens?\n   Solution\n delete from film where film_id=1  The statement is rejected because there are rows in other tables that reference the row that we intend to delete. This is the effect of the foreign key constraint.\n  Exercise\nExercise 3.3  Look at the definition of the foreign key constraints in table film_actor (right-click on the table, select Constraints, foreign key).\nIs the definition of the foreign key constraint to table film coherent with the behavior observed in the previous exercise?\nNB In order to see the options of a foreign key, click on the edit button on the left of the constraint. Then look at the tab Action.\n   Solution\nThe foreign key linking table film_actor to table film is defined with the option RESTRICT on delete. This is coherent with the behavior that we observed in the previous exercise. Referenced rows cannot be deleted if there are still referencing rows.\n  Exercise\nExercise 3.4  Execute the following query:\n SELECT f.film_id as film_id_in_table_film, fa.film_id AS film_id_in_table_film_actor, fa.actor_id as actor_id, f.title as title FROM film f JOIN film_actor fa USING (film_id) WHERE f.title='ACE GOLDFINGER'  What does the query? Note down the identifier of the film in both tables film and film_actor. (columns film_id_in_table_film and film_id_in_table_film_actor).\n   Solution\nThe query returns the list of all actors in the film titled Ace Goldfinger. We note that the identifier of the film in both tables is identical (2), as it should because the query joins the two tables on the equality of these two values.\n  Exercise\nExercise 3.5  Write and execute a statement to set the value 10000 to the identifier of the film ACE GOLDFINGER in table Film.\nAfter the modification, execute the query of the previous exercise. What changed? Explain in details what happened.\n   Solution\nThe statement to modify the film_id of the given film is as follows:\n UPDATE film SET film_id=10000 WHERE title=‘ACE GOLDFINGER’ \nAfter executing the same query as the previous exercise, we see that the identifier of the film has changed in the table film_actor too. This is expected, because the foreign key constraint between the colum film_id in table film_actor and the column film_id in table film has the option ON UPDATE CASCADE. This means that if we modify the identifier of the film in table film, the modification is propagated to all the referencing columns.\n  Exercise\nExercise 3.6  Execute the following statement:\n UPDATE film_actor SET film_id=2 WHERE film_id=10000  What does? What happens? Explain.\n   Solution\nThe statement intends to set the identifier of the film titled Ace Goldfinger (in the previous exercise we gave it the identifier 10000) back to its original value. However, we execute the statement on the table film_actor. The action is not allowed, as the identifier 2 does not correspond to any film in table film.\nThe foreign key enforces the referential integrity constraint. A row cannot refer to a non-existing entity in the referenced table.\n   4 Basic queries Exercise\nExercise 4.1  Write the following SQL queries:\nReturn all the information on all customers.\n Return the first and last name of all customers.\n Return the first and last name of all customers of the store with identifier 1.     Solution\n select * from customer   select first_name, last_name from customer   select first_name, last_name from customer where store_id=1      5 Sorting and paginating Exercise\nExercise 5.1  Write the following SQL queries:\nReturn the last and first name of all customers. Sort by last name in ascending order.\n Same as in 1., but only return the first 100 customers.\n Return the last and first name of all customers of the store with identifier 1. Sort by last name in ascending order and by first name in descending order.     Solution\n select last_name, first_name from customer order by last_name asc   select last_name, first_name from customer order by last_name asc limit 100   select first_name, last_name from customer where store_id=1      6 Aggregating queries Exercise\nExercise 6.1  Write the following SQL queries:\nCount the number of films in the database (expected result: 1000).\n How many distinct actor last names are there?\n Compute the total amount of payments across all rentals (expected result: 67416.51).\n Compute the average, minimum and maximum duration of rental across all films (expected result: 4.9850000000000000, 3, 7).\n Return the number of actors for each film.\n Return the number of copies of each film in each store (table inventory).\n Same as 6., but only returns the pairs (film, store) if the number of copies is greater than or equal to 3.\n     Solution\n select count(*) from film   select count (distinct last_name) from actor   select sum(amount) from payment   select avg(rental_duration), min(rental_duration), max(rental_duration) from film   select film_id, count(*) as nb_actors from film_actor group by film_id   select film_id, store_id, count(*) as nb_films from inventory group by film_id, store_id   select film_id, store_id, count(*) as nb_films from inventory group by film_id, store_id having count(*) =3      7 Join queries Exercise\nExercise 7.1  Write the following SQL queries:\nReturn the first and last name of the manager of the store with identifier 1 (expected result: Mike Hillyer).\n Return the first and last name of the actors in the film ACE GOLDFINGER.\n Return first and last name of each actor and the number of films in which they played a role.\n Same as in 3., but order by number of films in descending order.\n Same as in 4., but only return actors who played a role in at least 10 films.\n Return the identifier, the first and family name of the customers who have rented between 5 and 10 movies in the category Family.     Solution\n select first_name, last_name from staff join store using(store_id) where store_id=1   select first_name, last_name from film join film_actor using(film_id) join actor using(actor_id) where title='ACE GOLDFINGER'   select first_name, last_name, count(*) as nb_films from actor join film_actor using(actor_id) group by actor_id   select first_name, last_name, count(*) as nb_films from actor join film_actor using(actor_id) group by actor_id order by nb_films desc   select first_name, last_name, count(*) as nb_films from actor join film_actor using(actor_id) group by actor_id having count(*) = 10 order by nb_films desc   select cust.customer_id, first_name, last_name, count(*) as nb_films from customer cust join rental using(customer_id) join inventory using(inventory_id) join film_category using(film_id) join category cat using(category_id) where cat.name='Family' group by customer_id having count(*) between 5 and 10      ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"cbe104d364885f55187f1d8090d0fa37","permalink":"/courses/databases/tutorials/sql-intro/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/databases/tutorials/sql-intro/","section":"courses","summary":"Description of the SQLite tutorial.","tags":null,"title":"Learning SQL queries","type":"docs"},{"authors":null,"categories":null,"content":" Exercise\nExercise 1  Write the following SQL queries:\nWhich last names are not repeated in table actor?\n Is a copy of the movie ACADEMY DINOSAUR available for rent from store 1?\n Return the title and the release year of all films in one of the following categories: Family, Animation, Documentary.\n   Tip You can use the operator IN  Find all customers (id, last name, first name) whose last name starts with the letter L.  Tip You can use the operator LIKE  Return the total paid by each customer. For each customer, display a single column containing first and last name and another column with the total amount paid. Order the result alphabetically by last name   Tip You can use the operator CONCAT  Return the total revenue from the rentals across the stores in each country. Order by descending revenue.\n The first and last name of the actor that played in the most films. If two or more actors are tied, the query must return the names of all of them.     Solution\n select last_name from actor group by last_name having count(*) = 1   select distinct i.inventory_id from film f join inventory i using(film_id) join rental r using(inventory_id) where f.title='ACADEMY DINOSAUR' and i.store_id=1 and r.return_date is not null   select distinct f.title, f.release_year from film f join film_category using(film_id) join category cat using(category_id) where cat.name in ('Family', 'Animation', 'Documentary')   select customer_id, first_name, last_name from customer where last_name LIKE 'L%'   select concat(first_name, ' ', last_name), sum(amount) from customer join payment using (customer_id) group by customer_id order by last_name asc   select country, sum(amount) as revenue from payment join rental using (rental_id) join inventory using (inventory_id) join store using (store_id) join address using (address_id) join city using (city_id) join country using (country_id) group by country_id order by revenue desc  select actor_id, first_name, last_name, count() from film_actor join actor using(actor_id) group by actor_id having count() = (select max(nb_films) from (select count(*) as nb_films from film_actor group by actor_id) t)    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c06fcd64991e971604cc6f448ab6d9db","permalink":"/courses/databases/tutorials/sql-advanced/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/databases/tutorials/sql-advanced/","section":"courses","summary":"Advanced SQL queries.","tags":null,"title":"Learning SQL queries","type":"docs"}]